// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String  @unique
  password      String?
  emailVerified Boolean @default(false)

  billingAddress String?
  billingCity    String?
  billingState   String?
  billingCountry String?
  billingZip     String?
  invoices       Invoice[]
  role           Role      @default(USER)
  provider       Provider? @default(EMAIL)
  providerId     String?
  loginAttempts  Int       @default(0)
  lockoutUntil   DateTime?
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  domains            Domain[]
  HostingAccount     HostingAccount[]

  InvoiceTemplate  InvoiceTemplate[]
  RecurringInvoice RecurringInvoice[]
  ReminderSettings ReminderSettings?
}

model EmailVerification {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([token])
}

model Domain {
  id                String           @id @default(cuid())
  name              String           @unique
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  registrar         String? // e.g., "namecheap", "godaddy"
  registrationDate  DateTime
  expiryDate        DateTime
  autoRenew         Boolean          @default(true)
  status            DomainStatus     @default(ACTIVE)
  privacyProtection Boolean          @default(true)
  nameservers       Nameserver[]
  dnsRecords        DnsRecord[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  HostingAccount    HostingAccount[]

  transferStatus  String?
  transferDetails String?
  renewalDetails  String?
  isLocked        Boolean   @default(false)
  lastUpdated     DateTime?

  @@index([userId])
  @@index([name])
  @@map("domains")
}

model Nameserver {
  id        String   @id @default(cuid())
  hostname  String
  domainId  String
  domain    Domain   @relation(fields: [domainId], references: [id])
  order     Int // To maintain nameserver order (ns1, ns2, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([domainId])
}

model DnsRecord {
  id        String   @id @default(cuid())
  domainId  String
  domain    Domain   @relation(fields: [domainId], references: [id])
  type      String // A, AAAA, CNAME, MX, TXT, etc.
  name      String // hostname or @
  content   String // IP address, hostname, or text content
  ttl       Int      @default(3600)
  priority  Int? // For MX records
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([domainId])
  @@index([type])
  @@map("dns_records")
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  EMAIL
  GOOGLE
}

enum DomainStatus {
  ACTIVE
  PENDING
  EXPIRED
  TRANSFERRED
  SUSPENDED
}

model HostingPackage {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String // shared, reseller, vps, dedicated
  description String
  status      String // active, draft, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Pricing
  monthlyPrice   Decimal
  quarterlyPrice Decimal
  annualPrice    Decimal

  // Features
  diskSpace      String // Note this is a string
  bandwidth      String // Note this is a string
  domains        Int
  databases      Int
  emailAccounts  Int
  sslCertificate Boolean @default(false)
  backups        Boolean @default(false)
  dedicatedIp    Boolean @default(false)

  // DirectAdmin package mapping
  directAdminPackageName String? // Name of the corresponding DirectAdmin package

  // Relations
  hostingAccounts HostingAccount[]
  serverMappings  PackageServerMapping[]
}

model PackageServerMapping {
  id                     String         @id @default(cuid())
  hostingPackageId       String
  hostingPackage         HostingPackage @relation(fields: [hostingPackageId], references: [id])
  serverId               String
  server                 Server         @relation(fields: [serverId], references: [id])
  directAdminPackageName String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  @@unique([hostingPackageId, serverId])
  @@index([hostingPackageId])
  @@index([serverId])
}

model HostingAccount {
  id               String         @id @default(cuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])
  packageId        String
  package          HostingPackage @relation(fields: [packageId], references: [id])
  domain           Domain?        @relation(fields: [domainId], references: [id])
  domainId         String?
  username         String         @unique
  password         String
  serverIp         String
  status           HostingStatus  @default(PENDING)
  suspensionReason String?
  diskUsage        Int            @default(0) // in MB
  bandwidthUsage   Int            @default(0) // in MB
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  server           Server         @relation(fields: [serverId], references: [id])
  serverId         String
  ftpAccounts      FTPAccount[]
  databases        Database[]
  emailAccounts    EmailAccount[]

  @@index([userId])
  @@index([packageId])
  @@index([serverId])
}

model Server {
  id              String                 @id @default(cuid())
  name            String
  ipAddress       String
  hostname        String
  port            Int                    @default(22)
  username        String
  password        String
  type            ServerType
  location        String
  useSSL          Boolean                @default(true)
  status          ServerStatus           @default(ACTIVE)
  operatingSystem String
  totalDiskSpace  Int // in MB
  usedDiskSpace   Int                    @default(0)
  totalBandwidth  Int // in MB
  usedBandwidth   Int                    @default(0)
  cpuCores        Int
  ram             Int // in MB
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  hostingAccounts HostingAccount[]
  maintenanceLogs MaintenanceLog[]
  packageMappings PackageServerMapping[]
}

model FTPAccount {
  id               String         @id @default(cuid())
  hostingAccountId String
  hostingAccount   HostingAccount @relation(fields: [hostingAccountId], references: [id])
  username         String         @unique
  password         String
  directory        String         @default("/")
  permissions      String         @default("read_write")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([hostingAccountId])
}

model Database {
  id               String         @id @default(cuid())
  hostingAccountId String
  hostingAccount   HostingAccount @relation(fields: [hostingAccountId], references: [id])
  name             String
  username         String
  password         String
  type             DatabaseType   @default(MYSQL)
  size             Int            @default(0) // in MB
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([hostingAccountId])
}

model EmailAccount {
  id               String         @id @default(cuid())
  hostingAccountId String
  hostingAccount   HostingAccount @relation(fields: [hostingAccountId], references: [id])
  email            String         @unique
  password         String
  forwardTo        String?
  quotaSize        Int            @default(1024) // in MB
  usedQuota        Int            @default(0) // in MB
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([hostingAccountId])
}

model MaintenanceLog {
  id               String            @id @default(cuid())
  serverId         String
  server           Server            @relation(fields: [serverId], references: [id])
  type             MaintenanceType
  description      String
  startTime        DateTime
  endTime          DateTime?
  status           MaintenanceStatus @default(SCHEDULED)
  notificationSent Boolean           @default(false) // Added notificationSent field
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([serverId])
}

model InvoiceTemplate {
  id               String                @id @default(uuid())
  userId           String
  user             User                  @relation(fields: [userId], references: [id])
  name             String
  description      String?
  items            InvoiceTemplateItem[]
  notes            String?
  isActive         Boolean               @default(true)
  paymentTerms     Int                   @default(30)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  invoices         Invoice[]
  RecurringInvoice RecurringInvoice[]

  @@index([userId])
}

model InvoiceTemplateItem {
  id          String          @id @default(uuid())
  templateId  String
  template    InvoiceTemplate @relation(fields: [templateId], references: [id])
  description String
  quantity    Int
  unitPrice   Float
  type        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([templateId])
}

model RecurringInvoice {
  id                 String                @id @default(uuid())
  userId             String
  user               User                  @relation(fields: [userId], references: [id])
  templateId         String
  template           InvoiceTemplate       @relation(fields: [templateId], references: [id])
  frequency          String // WEEKLY, MONTHLY, QUARTERLY, ANNUALLY
  startDate          DateTime
  endDate            DateTime?
  recipientId        String
  autoSend           Boolean               @default(false)
  amount             Float?
  description        String?
  nextGenerationDate DateTime
  lastGenerationDate DateTime?
  status             String                @default("ACTIVE") // ACTIVE, PAUSED, CANCELLED
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  generationLogs     RecurringInvoiceLog[]

  @@unique([id, userId])
  @@index([userId])
  @@index([templateId])
}

model RecurringInvoiceLog {
  id                 String           @id @default(uuid())
  recurringInvoiceId String
  recurringInvoice   RecurringInvoice @relation(fields: [recurringInvoiceId], references: [id])
  invoiceId          String?
  success            Boolean
  error              String?
  createdAt          DateTime         @default(now())

  @@index([recurringInvoiceId])
}

model ReminderSettings {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  enabled           Boolean  @default(true)
  beforeDueDays     Int[]    @default([1, 3, 7])
  afterDueDays      Int[]    @default([1, 3, 7, 14, 30])
  includeAttachment Boolean  @default(true)
  customMessage     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ReminderLog {
  id          String   @id @default(uuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  type        String // upcoming, overdue
  daysFromDue Int
  successful  Boolean
  error       String?
  createdAt   DateTime @default(now())

  @@index([invoiceId])
}

model Invoice {
  id               String           @id @default(uuid())
  number           String           @unique // Add this field
  userId           String
  user             User             @relation(fields: [userId], references: [id])
  items            InvoiceItem[]
  payments         Payment[]
  total            Float
  status           InvoiceStatus    @default(DRAFT)
  dueDate          DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  notes            String?
  templateId       String?
  template         InvoiceTemplate? @relation(fields: [templateId], references: [id])
  recipientId      String?
  paidDate         DateTime?
  lastReminderSent DateTime?
  remindersSent    Int              @default(0)
  reminderLogs     ReminderLog[]
  metadata         Json?
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId   String
  description String
  quantity    Int
  price       Float
  total       Float
  type        String // This field is missing in your schema
  relatedId   String? // This field is also missing
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id        String        @id @default(uuid())
  invoiceId String
  invoice   Invoice       @relation(fields: [invoiceId], references: [id])
  amount    Float
  status    PaymentStatus
  reference String?       @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum HostingStatus {
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
  FAILED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ServerType {
  DIRECTADMIN
  CPANEL
  PLESK
  AWS
  SHARED
  VPS
  DEDICATED
  CLOUD
  OTHER
}

enum ServerStatus {
  ACTIVE
  MAINTENANCE
  OFFLINE
  DEPRECATED
}

enum DatabaseType {
  MYSQL
  POSTGRESQL
  MONGODB
}

enum MaintenanceType {
  SCHEDULED
  EMERGENCY
  UPGRADE
  BACKUP
  SECURITY_PATCH
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
