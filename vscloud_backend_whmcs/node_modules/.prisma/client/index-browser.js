
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.3.1
 * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
 */
Prisma.prismaVersion = {
  client: "6.3.1",
  engine: "acc0b9dd43eb689cbd20c9470515d719db10d0b0"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  emailVerified: 'emailVerified',
  role: 'role',
  provider: 'provider',
  providerId: 'providerId',
  loginAttempts: 'loginAttempts',
  lockoutUntil: 'lockoutUntil',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailVerificationScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.DomainScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userId: 'userId',
  registrar: 'registrar',
  registrationDate: 'registrationDate',
  expiryDate: 'expiryDate',
  autoRenew: 'autoRenew',
  status: 'status',
  privacyProtection: 'privacyProtection',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NameserverScalarFieldEnum = {
  id: 'id',
  hostname: 'hostname',
  domainId: 'domainId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DnsRecordScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  type: 'type',
  name: 'name',
  content: 'content',
  ttl: 'ttl',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HostingPackageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  monthlyPrice: 'monthlyPrice',
  quarterlyPrice: 'quarterlyPrice',
  annualPrice: 'annualPrice',
  diskSpace: 'diskSpace',
  bandwidth: 'bandwidth',
  domains: 'domains',
  databases: 'databases',
  emailAccounts: 'emailAccounts',
  sslCertificate: 'sslCertificate',
  backups: 'backups',
  dedicatedIp: 'dedicatedIp',
  directAdminPackageName: 'directAdminPackageName'
};

exports.Prisma.PackageServerMappingScalarFieldEnum = {
  id: 'id',
  hostingPackageId: 'hostingPackageId',
  serverId: 'serverId',
  directAdminPackageName: 'directAdminPackageName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HostingAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  packageId: 'packageId',
  domainId: 'domainId',
  username: 'username',
  password: 'password',
  serverIp: 'serverIp',
  status: 'status',
  suspensionReason: 'suspensionReason',
  diskUsage: 'diskUsage',
  bandwidthUsage: 'bandwidthUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serverId: 'serverId'
};

exports.Prisma.ServerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ipAddress: 'ipAddress',
  hostname: 'hostname',
  port: 'port',
  username: 'username',
  password: 'password',
  type: 'type',
  location: 'location',
  useSSL: 'useSSL',
  status: 'status',
  operatingSystem: 'operatingSystem',
  totalDiskSpace: 'totalDiskSpace',
  usedDiskSpace: 'usedDiskSpace',
  totalBandwidth: 'totalBandwidth',
  usedBandwidth: 'usedBandwidth',
  cpuCores: 'cpuCores',
  ram: 'ram',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FTPAccountScalarFieldEnum = {
  id: 'id',
  hostingAccountId: 'hostingAccountId',
  username: 'username',
  password: 'password',
  directory: 'directory',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DatabaseScalarFieldEnum = {
  id: 'id',
  hostingAccountId: 'hostingAccountId',
  name: 'name',
  username: 'username',
  password: 'password',
  type: 'type',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailAccountScalarFieldEnum = {
  id: 'id',
  hostingAccountId: 'hostingAccountId',
  email: 'email',
  password: 'password',
  forwardTo: 'forwardTo',
  quotaSize: 'quotaSize',
  usedQuota: 'usedQuota',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceLogScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  type: 'type',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  notificationSent: 'notificationSent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.Provider = exports.$Enums.Provider = {
  EMAIL: 'EMAIL',
  GOOGLE: 'GOOGLE'
};

exports.DomainStatus = exports.$Enums.DomainStatus = {
  ACTIVE: 'ACTIVE',
  PENDING: 'PENDING',
  EXPIRED: 'EXPIRED',
  TRANSFERRED: 'TRANSFERRED',
  SUSPENDED: 'SUSPENDED'
};

exports.HostingStatus = exports.$Enums.HostingStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
  FAILED: 'FAILED'
};

exports.ServerType = exports.$Enums.ServerType = {
  DIRECTADMIN: 'DIRECTADMIN',
  CPANEL: 'CPANEL',
  PLESK: 'PLESK',
  AWS: 'AWS',
  SHARED: 'SHARED',
  VPS: 'VPS',
  DEDICATED: 'DEDICATED',
  CLOUD: 'CLOUD',
  OTHER: 'OTHER'
};

exports.ServerStatus = exports.$Enums.ServerStatus = {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  OFFLINE: 'OFFLINE',
  DEPRECATED: 'DEPRECATED'
};

exports.DatabaseType = exports.$Enums.DatabaseType = {
  MYSQL: 'MYSQL',
  POSTGRESQL: 'POSTGRESQL',
  MONGODB: 'MONGODB'
};

exports.MaintenanceType = exports.$Enums.MaintenanceType = {
  SCHEDULED: 'SCHEDULED',
  EMERGENCY: 'EMERGENCY',
  UPGRADE: 'UPGRADE',
  BACKUP: 'BACKUP',
  SECURITY_PATCH: 'SECURITY_PATCH'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  EmailVerification: 'EmailVerification',
  PasswordReset: 'PasswordReset',
  Domain: 'Domain',
  Nameserver: 'Nameserver',
  DnsRecord: 'DnsRecord',
  HostingPackage: 'HostingPackage',
  PackageServerMapping: 'PackageServerMapping',
  HostingAccount: 'HostingAccount',
  Server: 'Server',
  FTPAccount: 'FTPAccount',
  Database: 'Database',
  EmailAccount: 'EmailAccount',
  MaintenanceLog: 'MaintenanceLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
