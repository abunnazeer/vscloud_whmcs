
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model EmailVerification
 * 
 */
export type EmailVerification = $Result.DefaultSelection<Prisma.$EmailVerificationPayload>
/**
 * Model PasswordReset
 * 
 */
export type PasswordReset = $Result.DefaultSelection<Prisma.$PasswordResetPayload>
/**
 * Model Domain
 * 
 */
export type Domain = $Result.DefaultSelection<Prisma.$DomainPayload>
/**
 * Model Nameserver
 * 
 */
export type Nameserver = $Result.DefaultSelection<Prisma.$NameserverPayload>
/**
 * Model DnsRecord
 * 
 */
export type DnsRecord = $Result.DefaultSelection<Prisma.$DnsRecordPayload>
/**
 * Model HostingPackage
 * 
 */
export type HostingPackage = $Result.DefaultSelection<Prisma.$HostingPackagePayload>
/**
 * Model HostingAccount
 * 
 */
export type HostingAccount = $Result.DefaultSelection<Prisma.$HostingAccountPayload>
/**
 * Model Server
 * 
 */
export type Server = $Result.DefaultSelection<Prisma.$ServerPayload>
/**
 * Model FTPAccount
 * 
 */
export type FTPAccount = $Result.DefaultSelection<Prisma.$FTPAccountPayload>
/**
 * Model Database
 * 
 */
export type Database = $Result.DefaultSelection<Prisma.$DatabasePayload>
/**
 * Model EmailAccount
 * 
 */
export type EmailAccount = $Result.DefaultSelection<Prisma.$EmailAccountPayload>
/**
 * Model MaintenanceLog
 * 
 */
export type MaintenanceLog = $Result.DefaultSelection<Prisma.$MaintenanceLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Provider: {
  EMAIL: 'EMAIL',
  GOOGLE: 'GOOGLE'
};

export type Provider = (typeof Provider)[keyof typeof Provider]


export const DomainStatus: {
  ACTIVE: 'ACTIVE',
  PENDING: 'PENDING',
  EXPIRED: 'EXPIRED',
  TRANSFERRED: 'TRANSFERRED',
  SUSPENDED: 'SUSPENDED'
};

export type DomainStatus = (typeof DomainStatus)[keyof typeof DomainStatus]


export const HostingStatus: {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
  FAILED: 'FAILED'
};

export type HostingStatus = (typeof HostingStatus)[keyof typeof HostingStatus]


export const ServerType: {
  SHARED: 'SHARED',
  VPS: 'VPS',
  DEDICATED: 'DEDICATED',
  CLOUD: 'CLOUD'
};

export type ServerType = (typeof ServerType)[keyof typeof ServerType]


export const ServerStatus: {
  ACTIVE: 'ACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  OFFLINE: 'OFFLINE',
  DEPRECATED: 'DEPRECATED'
};

export type ServerStatus = (typeof ServerStatus)[keyof typeof ServerStatus]


export const DatabaseType: {
  MYSQL: 'MYSQL',
  POSTGRESQL: 'POSTGRESQL',
  MONGODB: 'MONGODB'
};

export type DatabaseType = (typeof DatabaseType)[keyof typeof DatabaseType]


export const MaintenanceType: {
  SCHEDULED: 'SCHEDULED',
  EMERGENCY: 'EMERGENCY',
  UPGRADE: 'UPGRADE',
  BACKUP: 'BACKUP',
  SECURITY_PATCH: 'SECURITY_PATCH'
};

export type MaintenanceType = (typeof MaintenanceType)[keyof typeof MaintenanceType]


export const MaintenanceStatus: {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type MaintenanceStatus = (typeof MaintenanceStatus)[keyof typeof MaintenanceStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Provider = $Enums.Provider

export const Provider: typeof $Enums.Provider

export type DomainStatus = $Enums.DomainStatus

export const DomainStatus: typeof $Enums.DomainStatus

export type HostingStatus = $Enums.HostingStatus

export const HostingStatus: typeof $Enums.HostingStatus

export type ServerType = $Enums.ServerType

export const ServerType: typeof $Enums.ServerType

export type ServerStatus = $Enums.ServerStatus

export const ServerStatus: typeof $Enums.ServerStatus

export type DatabaseType = $Enums.DatabaseType

export const DatabaseType: typeof $Enums.DatabaseType

export type MaintenanceType = $Enums.MaintenanceType

export const MaintenanceType: typeof $Enums.MaintenanceType

export type MaintenanceStatus = $Enums.MaintenanceStatus

export const MaintenanceStatus: typeof $Enums.MaintenanceStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailVerification`: Exposes CRUD operations for the **EmailVerification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailVerifications
    * const emailVerifications = await prisma.emailVerification.findMany()
    * ```
    */
  get emailVerification(): Prisma.EmailVerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.passwordReset`: Exposes CRUD operations for the **PasswordReset** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordResets
    * const passwordResets = await prisma.passwordReset.findMany()
    * ```
    */
  get passwordReset(): Prisma.PasswordResetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.domain`: Exposes CRUD operations for the **Domain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Domains
    * const domains = await prisma.domain.findMany()
    * ```
    */
  get domain(): Prisma.DomainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.nameserver`: Exposes CRUD operations for the **Nameserver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nameservers
    * const nameservers = await prisma.nameserver.findMany()
    * ```
    */
  get nameserver(): Prisma.NameserverDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dnsRecord`: Exposes CRUD operations for the **DnsRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DnsRecords
    * const dnsRecords = await prisma.dnsRecord.findMany()
    * ```
    */
  get dnsRecord(): Prisma.DnsRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hostingPackage`: Exposes CRUD operations for the **HostingPackage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostingPackages
    * const hostingPackages = await prisma.hostingPackage.findMany()
    * ```
    */
  get hostingPackage(): Prisma.HostingPackageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hostingAccount`: Exposes CRUD operations for the **HostingAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HostingAccounts
    * const hostingAccounts = await prisma.hostingAccount.findMany()
    * ```
    */
  get hostingAccount(): Prisma.HostingAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.server`: Exposes CRUD operations for the **Server** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Servers
    * const servers = await prisma.server.findMany()
    * ```
    */
  get server(): Prisma.ServerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fTPAccount`: Exposes CRUD operations for the **FTPAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FTPAccounts
    * const fTPAccounts = await prisma.fTPAccount.findMany()
    * ```
    */
  get fTPAccount(): Prisma.FTPAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.database`: Exposes CRUD operations for the **Database** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Databases
    * const databases = await prisma.database.findMany()
    * ```
    */
  get database(): Prisma.DatabaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailAccount`: Exposes CRUD operations for the **EmailAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailAccounts
    * const emailAccounts = await prisma.emailAccount.findMany()
    * ```
    */
  get emailAccount(): Prisma.EmailAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.maintenanceLog`: Exposes CRUD operations for the **MaintenanceLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MaintenanceLogs
    * const maintenanceLogs = await prisma.maintenanceLog.findMany()
    * ```
    */
  get maintenanceLog(): Prisma.MaintenanceLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.3.1
   * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    EmailVerification: 'EmailVerification',
    PasswordReset: 'PasswordReset',
    Domain: 'Domain',
    Nameserver: 'Nameserver',
    DnsRecord: 'DnsRecord',
    HostingPackage: 'HostingPackage',
    HostingAccount: 'HostingAccount',
    Server: 'Server',
    FTPAccount: 'FTPAccount',
    Database: 'Database',
    EmailAccount: 'EmailAccount',
    MaintenanceLog: 'MaintenanceLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "emailVerification" | "passwordReset" | "domain" | "nameserver" | "dnsRecord" | "hostingPackage" | "hostingAccount" | "server" | "fTPAccount" | "database" | "emailAccount" | "maintenanceLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      EmailVerification: {
        payload: Prisma.$EmailVerificationPayload<ExtArgs>
        fields: Prisma.EmailVerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailVerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailVerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          findFirst: {
            args: Prisma.EmailVerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailVerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          findMany: {
            args: Prisma.EmailVerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>[]
          }
          create: {
            args: Prisma.EmailVerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          createMany: {
            args: Prisma.EmailVerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailVerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>[]
          }
          delete: {
            args: Prisma.EmailVerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          update: {
            args: Prisma.EmailVerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          deleteMany: {
            args: Prisma.EmailVerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailVerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailVerificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>[]
          }
          upsert: {
            args: Prisma.EmailVerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailVerificationPayload>
          }
          aggregate: {
            args: Prisma.EmailVerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailVerification>
          }
          groupBy: {
            args: Prisma.EmailVerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailVerificationCountArgs<ExtArgs>
            result: $Utils.Optional<EmailVerificationCountAggregateOutputType> | number
          }
        }
      }
      PasswordReset: {
        payload: Prisma.$PasswordResetPayload<ExtArgs>
        fields: Prisma.PasswordResetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordResetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordResetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findFirst: {
            args: Prisma.PasswordResetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordResetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          findMany: {
            args: Prisma.PasswordResetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          create: {
            args: Prisma.PasswordResetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          createMany: {
            args: Prisma.PasswordResetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PasswordResetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          delete: {
            args: Prisma.PasswordResetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          update: {
            args: Prisma.PasswordResetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          deleteMany: {
            args: Prisma.PasswordResetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordResetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PasswordResetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>[]
          }
          upsert: {
            args: Prisma.PasswordResetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PasswordResetPayload>
          }
          aggregate: {
            args: Prisma.PasswordResetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePasswordReset>
          }
          groupBy: {
            args: Prisma.PasswordResetGroupByArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordResetCountArgs<ExtArgs>
            result: $Utils.Optional<PasswordResetCountAggregateOutputType> | number
          }
        }
      }
      Domain: {
        payload: Prisma.$DomainPayload<ExtArgs>
        fields: Prisma.DomainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DomainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DomainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          findFirst: {
            args: Prisma.DomainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DomainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          findMany: {
            args: Prisma.DomainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>[]
          }
          create: {
            args: Prisma.DomainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          createMany: {
            args: Prisma.DomainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DomainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>[]
          }
          delete: {
            args: Prisma.DomainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          update: {
            args: Prisma.DomainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          deleteMany: {
            args: Prisma.DomainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DomainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DomainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>[]
          }
          upsert: {
            args: Prisma.DomainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DomainPayload>
          }
          aggregate: {
            args: Prisma.DomainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDomain>
          }
          groupBy: {
            args: Prisma.DomainGroupByArgs<ExtArgs>
            result: $Utils.Optional<DomainGroupByOutputType>[]
          }
          count: {
            args: Prisma.DomainCountArgs<ExtArgs>
            result: $Utils.Optional<DomainCountAggregateOutputType> | number
          }
        }
      }
      Nameserver: {
        payload: Prisma.$NameserverPayload<ExtArgs>
        fields: Prisma.NameserverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NameserverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NameserverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>
          }
          findFirst: {
            args: Prisma.NameserverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NameserverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>
          }
          findMany: {
            args: Prisma.NameserverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>[]
          }
          create: {
            args: Prisma.NameserverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>
          }
          createMany: {
            args: Prisma.NameserverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NameserverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>[]
          }
          delete: {
            args: Prisma.NameserverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>
          }
          update: {
            args: Prisma.NameserverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>
          }
          deleteMany: {
            args: Prisma.NameserverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NameserverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NameserverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>[]
          }
          upsert: {
            args: Prisma.NameserverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NameserverPayload>
          }
          aggregate: {
            args: Prisma.NameserverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNameserver>
          }
          groupBy: {
            args: Prisma.NameserverGroupByArgs<ExtArgs>
            result: $Utils.Optional<NameserverGroupByOutputType>[]
          }
          count: {
            args: Prisma.NameserverCountArgs<ExtArgs>
            result: $Utils.Optional<NameserverCountAggregateOutputType> | number
          }
        }
      }
      DnsRecord: {
        payload: Prisma.$DnsRecordPayload<ExtArgs>
        fields: Prisma.DnsRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DnsRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DnsRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>
          }
          findFirst: {
            args: Prisma.DnsRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DnsRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>
          }
          findMany: {
            args: Prisma.DnsRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>[]
          }
          create: {
            args: Prisma.DnsRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>
          }
          createMany: {
            args: Prisma.DnsRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DnsRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>[]
          }
          delete: {
            args: Prisma.DnsRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>
          }
          update: {
            args: Prisma.DnsRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>
          }
          deleteMany: {
            args: Prisma.DnsRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DnsRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DnsRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>[]
          }
          upsert: {
            args: Prisma.DnsRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DnsRecordPayload>
          }
          aggregate: {
            args: Prisma.DnsRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDnsRecord>
          }
          groupBy: {
            args: Prisma.DnsRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<DnsRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.DnsRecordCountArgs<ExtArgs>
            result: $Utils.Optional<DnsRecordCountAggregateOutputType> | number
          }
        }
      }
      HostingPackage: {
        payload: Prisma.$HostingPackagePayload<ExtArgs>
        fields: Prisma.HostingPackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostingPackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostingPackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>
          }
          findFirst: {
            args: Prisma.HostingPackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostingPackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>
          }
          findMany: {
            args: Prisma.HostingPackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>[]
          }
          create: {
            args: Prisma.HostingPackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>
          }
          createMany: {
            args: Prisma.HostingPackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostingPackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>[]
          }
          delete: {
            args: Prisma.HostingPackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>
          }
          update: {
            args: Prisma.HostingPackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>
          }
          deleteMany: {
            args: Prisma.HostingPackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostingPackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HostingPackageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>[]
          }
          upsert: {
            args: Prisma.HostingPackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingPackagePayload>
          }
          aggregate: {
            args: Prisma.HostingPackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostingPackage>
          }
          groupBy: {
            args: Prisma.HostingPackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostingPackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostingPackageCountArgs<ExtArgs>
            result: $Utils.Optional<HostingPackageCountAggregateOutputType> | number
          }
        }
      }
      HostingAccount: {
        payload: Prisma.$HostingAccountPayload<ExtArgs>
        fields: Prisma.HostingAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HostingAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HostingAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>
          }
          findFirst: {
            args: Prisma.HostingAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HostingAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>
          }
          findMany: {
            args: Prisma.HostingAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>[]
          }
          create: {
            args: Prisma.HostingAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>
          }
          createMany: {
            args: Prisma.HostingAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HostingAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>[]
          }
          delete: {
            args: Prisma.HostingAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>
          }
          update: {
            args: Prisma.HostingAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>
          }
          deleteMany: {
            args: Prisma.HostingAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HostingAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HostingAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>[]
          }
          upsert: {
            args: Prisma.HostingAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HostingAccountPayload>
          }
          aggregate: {
            args: Prisma.HostingAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHostingAccount>
          }
          groupBy: {
            args: Prisma.HostingAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<HostingAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.HostingAccountCountArgs<ExtArgs>
            result: $Utils.Optional<HostingAccountCountAggregateOutputType> | number
          }
        }
      }
      Server: {
        payload: Prisma.$ServerPayload<ExtArgs>
        fields: Prisma.ServerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          findFirst: {
            args: Prisma.ServerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          findMany: {
            args: Prisma.ServerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>[]
          }
          create: {
            args: Prisma.ServerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          createMany: {
            args: Prisma.ServerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>[]
          }
          delete: {
            args: Prisma.ServerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          update: {
            args: Prisma.ServerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          deleteMany: {
            args: Prisma.ServerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>[]
          }
          upsert: {
            args: Prisma.ServerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServerPayload>
          }
          aggregate: {
            args: Prisma.ServerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServer>
          }
          groupBy: {
            args: Prisma.ServerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServerCountArgs<ExtArgs>
            result: $Utils.Optional<ServerCountAggregateOutputType> | number
          }
        }
      }
      FTPAccount: {
        payload: Prisma.$FTPAccountPayload<ExtArgs>
        fields: Prisma.FTPAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FTPAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FTPAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>
          }
          findFirst: {
            args: Prisma.FTPAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FTPAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>
          }
          findMany: {
            args: Prisma.FTPAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>[]
          }
          create: {
            args: Prisma.FTPAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>
          }
          createMany: {
            args: Prisma.FTPAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FTPAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>[]
          }
          delete: {
            args: Prisma.FTPAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>
          }
          update: {
            args: Prisma.FTPAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>
          }
          deleteMany: {
            args: Prisma.FTPAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FTPAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FTPAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>[]
          }
          upsert: {
            args: Prisma.FTPAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FTPAccountPayload>
          }
          aggregate: {
            args: Prisma.FTPAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFTPAccount>
          }
          groupBy: {
            args: Prisma.FTPAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<FTPAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.FTPAccountCountArgs<ExtArgs>
            result: $Utils.Optional<FTPAccountCountAggregateOutputType> | number
          }
        }
      }
      Database: {
        payload: Prisma.$DatabasePayload<ExtArgs>
        fields: Prisma.DatabaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DatabaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DatabaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>
          }
          findFirst: {
            args: Prisma.DatabaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DatabaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>
          }
          findMany: {
            args: Prisma.DatabaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>[]
          }
          create: {
            args: Prisma.DatabaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>
          }
          createMany: {
            args: Prisma.DatabaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DatabaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>[]
          }
          delete: {
            args: Prisma.DatabaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>
          }
          update: {
            args: Prisma.DatabaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>
          }
          deleteMany: {
            args: Prisma.DatabaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DatabaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DatabaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>[]
          }
          upsert: {
            args: Prisma.DatabaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatabasePayload>
          }
          aggregate: {
            args: Prisma.DatabaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDatabase>
          }
          groupBy: {
            args: Prisma.DatabaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<DatabaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.DatabaseCountArgs<ExtArgs>
            result: $Utils.Optional<DatabaseCountAggregateOutputType> | number
          }
        }
      }
      EmailAccount: {
        payload: Prisma.$EmailAccountPayload<ExtArgs>
        fields: Prisma.EmailAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          findFirst: {
            args: Prisma.EmailAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          findMany: {
            args: Prisma.EmailAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>[]
          }
          create: {
            args: Prisma.EmailAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          createMany: {
            args: Prisma.EmailAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailAccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>[]
          }
          delete: {
            args: Prisma.EmailAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          update: {
            args: Prisma.EmailAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          deleteMany: {
            args: Prisma.EmailAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EmailAccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>[]
          }
          upsert: {
            args: Prisma.EmailAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailAccountPayload>
          }
          aggregate: {
            args: Prisma.EmailAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailAccount>
          }
          groupBy: {
            args: Prisma.EmailAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailAccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailAccountCountArgs<ExtArgs>
            result: $Utils.Optional<EmailAccountCountAggregateOutputType> | number
          }
        }
      }
      MaintenanceLog: {
        payload: Prisma.$MaintenanceLogPayload<ExtArgs>
        fields: Prisma.MaintenanceLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MaintenanceLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MaintenanceLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
          }
          findFirst: {
            args: Prisma.MaintenanceLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MaintenanceLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
          }
          findMany: {
            args: Prisma.MaintenanceLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>[]
          }
          create: {
            args: Prisma.MaintenanceLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
          }
          createMany: {
            args: Prisma.MaintenanceLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MaintenanceLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>[]
          }
          delete: {
            args: Prisma.MaintenanceLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
          }
          update: {
            args: Prisma.MaintenanceLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
          }
          deleteMany: {
            args: Prisma.MaintenanceLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MaintenanceLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MaintenanceLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>[]
          }
          upsert: {
            args: Prisma.MaintenanceLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MaintenanceLogPayload>
          }
          aggregate: {
            args: Prisma.MaintenanceLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaintenanceLog>
          }
          groupBy: {
            args: Prisma.MaintenanceLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.MaintenanceLogCountArgs<ExtArgs>
            result: $Utils.Optional<MaintenanceLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    emailVerification?: EmailVerificationOmit
    passwordReset?: PasswordResetOmit
    domain?: DomainOmit
    nameserver?: NameserverOmit
    dnsRecord?: DnsRecordOmit
    hostingPackage?: HostingPackageOmit
    hostingAccount?: HostingAccountOmit
    server?: ServerOmit
    fTPAccount?: FTPAccountOmit
    database?: DatabaseOmit
    emailAccount?: EmailAccountOmit
    maintenanceLog?: MaintenanceLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    emailVerifications: number
    passwordResets: number
    domains: number
    HostingAccount: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    emailVerifications?: boolean | UserCountOutputTypeCountEmailVerificationsArgs
    passwordResets?: boolean | UserCountOutputTypeCountPasswordResetsArgs
    domains?: boolean | UserCountOutputTypeCountDomainsArgs
    HostingAccount?: boolean | UserCountOutputTypeCountHostingAccountArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmailVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailVerificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDomainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DomainWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHostingAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostingAccountWhereInput
  }


  /**
   * Count Type DomainCountOutputType
   */

  export type DomainCountOutputType = {
    nameservers: number
    dnsRecords: number
    HostingAccount: number
  }

  export type DomainCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nameservers?: boolean | DomainCountOutputTypeCountNameserversArgs
    dnsRecords?: boolean | DomainCountOutputTypeCountDnsRecordsArgs
    HostingAccount?: boolean | DomainCountOutputTypeCountHostingAccountArgs
  }

  // Custom InputTypes
  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DomainCountOutputType
     */
    select?: DomainCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeCountNameserversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NameserverWhereInput
  }

  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeCountDnsRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DnsRecordWhereInput
  }

  /**
   * DomainCountOutputType without action
   */
  export type DomainCountOutputTypeCountHostingAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostingAccountWhereInput
  }


  /**
   * Count Type HostingPackageCountOutputType
   */

  export type HostingPackageCountOutputType = {
    hostingAccounts: number
  }

  export type HostingPackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccounts?: boolean | HostingPackageCountOutputTypeCountHostingAccountsArgs
  }

  // Custom InputTypes
  /**
   * HostingPackageCountOutputType without action
   */
  export type HostingPackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackageCountOutputType
     */
    select?: HostingPackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HostingPackageCountOutputType without action
   */
  export type HostingPackageCountOutputTypeCountHostingAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostingAccountWhereInput
  }


  /**
   * Count Type HostingAccountCountOutputType
   */

  export type HostingAccountCountOutputType = {
    ftpAccounts: number
    databases: number
    emailAccounts: number
  }

  export type HostingAccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ftpAccounts?: boolean | HostingAccountCountOutputTypeCountFtpAccountsArgs
    databases?: boolean | HostingAccountCountOutputTypeCountDatabasesArgs
    emailAccounts?: boolean | HostingAccountCountOutputTypeCountEmailAccountsArgs
  }

  // Custom InputTypes
  /**
   * HostingAccountCountOutputType without action
   */
  export type HostingAccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccountCountOutputType
     */
    select?: HostingAccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HostingAccountCountOutputType without action
   */
  export type HostingAccountCountOutputTypeCountFtpAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FTPAccountWhereInput
  }

  /**
   * HostingAccountCountOutputType without action
   */
  export type HostingAccountCountOutputTypeCountDatabasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DatabaseWhereInput
  }

  /**
   * HostingAccountCountOutputType without action
   */
  export type HostingAccountCountOutputTypeCountEmailAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailAccountWhereInput
  }


  /**
   * Count Type ServerCountOutputType
   */

  export type ServerCountOutputType = {
    hostingAccounts: number
    maintenanceLogs: number
  }

  export type ServerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccounts?: boolean | ServerCountOutputTypeCountHostingAccountsArgs
    maintenanceLogs?: boolean | ServerCountOutputTypeCountMaintenanceLogsArgs
  }

  // Custom InputTypes
  /**
   * ServerCountOutputType without action
   */
  export type ServerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServerCountOutputType
     */
    select?: ServerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServerCountOutputType without action
   */
  export type ServerCountOutputTypeCountHostingAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostingAccountWhereInput
  }

  /**
   * ServerCountOutputType without action
   */
  export type ServerCountOutputTypeCountMaintenanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    loginAttempts: number | null
  }

  export type UserSumAggregateOutputType = {
    loginAttempts: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    emailVerified: boolean | null
    role: $Enums.Role | null
    provider: $Enums.Provider | null
    providerId: string | null
    loginAttempts: number | null
    lockoutUntil: Date | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    emailVerified: boolean | null
    role: $Enums.Role | null
    provider: $Enums.Provider | null
    providerId: string | null
    loginAttempts: number | null
    lockoutUntil: Date | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    emailVerified: number
    role: number
    provider: number
    providerId: number
    loginAttempts: number
    lockoutUntil: number
    lastLoginAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    loginAttempts?: true
  }

  export type UserSumAggregateInputType = {
    loginAttempts?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    emailVerified?: true
    role?: true
    provider?: true
    providerId?: true
    loginAttempts?: true
    lockoutUntil?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    emailVerified?: true
    role?: true
    provider?: true
    providerId?: true
    loginAttempts?: true
    lockoutUntil?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    emailVerified?: true
    role?: true
    provider?: true
    providerId?: true
    loginAttempts?: true
    lockoutUntil?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string | null
    emailVerified: boolean
    role: $Enums.Role
    provider: $Enums.Provider | null
    providerId: string | null
    loginAttempts: number
    lockoutUntil: Date | null
    lastLoginAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    loginAttempts?: boolean
    lockoutUntil?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    emailVerifications?: boolean | User$emailVerificationsArgs<ExtArgs>
    passwordResets?: boolean | User$passwordResetsArgs<ExtArgs>
    domains?: boolean | User$domainsArgs<ExtArgs>
    HostingAccount?: boolean | User$HostingAccountArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    loginAttempts?: boolean
    lockoutUntil?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    loginAttempts?: boolean
    lockoutUntil?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    emailVerified?: boolean
    role?: boolean
    provider?: boolean
    providerId?: boolean
    loginAttempts?: boolean
    lockoutUntil?: boolean
    lastLoginAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "emailVerified" | "role" | "provider" | "providerId" | "loginAttempts" | "lockoutUntil" | "lastLoginAt" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    emailVerifications?: boolean | User$emailVerificationsArgs<ExtArgs>
    passwordResets?: boolean | User$passwordResetsArgs<ExtArgs>
    domains?: boolean | User$domainsArgs<ExtArgs>
    HostingAccount?: boolean | User$HostingAccountArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      emailVerifications: Prisma.$EmailVerificationPayload<ExtArgs>[]
      passwordResets: Prisma.$PasswordResetPayload<ExtArgs>[]
      domains: Prisma.$DomainPayload<ExtArgs>[]
      HostingAccount: Prisma.$HostingAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string | null
      emailVerified: boolean
      role: $Enums.Role
      provider: $Enums.Provider | null
      providerId: string | null
      loginAttempts: number
      lockoutUntil: Date | null
      lastLoginAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    emailVerifications<T extends User$emailVerificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$emailVerificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    passwordResets<T extends User$passwordResetsArgs<ExtArgs> = {}>(args?: Subset<T, User$passwordResetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    domains<T extends User$domainsArgs<ExtArgs> = {}>(args?: Subset<T, User$domainsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    HostingAccount<T extends User$HostingAccountArgs<ExtArgs> = {}>(args?: Subset<T, User$HostingAccountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'Role'>
    readonly provider: FieldRef<"User", 'Provider'>
    readonly providerId: FieldRef<"User", 'String'>
    readonly loginAttempts: FieldRef<"User", 'Int'>
    readonly lockoutUntil: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.emailVerifications
   */
  export type User$emailVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    where?: EmailVerificationWhereInput
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    cursor?: EmailVerificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailVerificationScalarFieldEnum | EmailVerificationScalarFieldEnum[]
  }

  /**
   * User.passwordResets
   */
  export type User$passwordResetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    cursor?: PasswordResetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * User.domains
   */
  export type User$domainsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    where?: DomainWhereInput
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    cursor?: DomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DomainScalarFieldEnum | DomainScalarFieldEnum[]
  }

  /**
   * User.HostingAccount
   */
  export type User$HostingAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    where?: HostingAccountWhereInput
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    cursor?: HostingAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HostingAccountScalarFieldEnum | HostingAccountScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model EmailVerification
   */

  export type AggregateEmailVerification = {
    _count: EmailVerificationCountAggregateOutputType | null
    _min: EmailVerificationMinAggregateOutputType | null
    _max: EmailVerificationMaxAggregateOutputType | null
  }

  export type EmailVerificationMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type EmailVerificationMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type EmailVerificationCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expires: number
    createdAt: number
    _all: number
  }


  export type EmailVerificationMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type EmailVerificationMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type EmailVerificationCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
    _all?: true
  }

  export type EmailVerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerification to aggregate.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailVerifications
    **/
    _count?: true | EmailVerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailVerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailVerificationMaxAggregateInputType
  }

  export type GetEmailVerificationAggregateType<T extends EmailVerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailVerification[P]>
      : GetScalarType<T[P], AggregateEmailVerification[P]>
  }




  export type EmailVerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailVerificationWhereInput
    orderBy?: EmailVerificationOrderByWithAggregationInput | EmailVerificationOrderByWithAggregationInput[]
    by: EmailVerificationScalarFieldEnum[] | EmailVerificationScalarFieldEnum
    having?: EmailVerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailVerificationCountAggregateInputType | true
    _min?: EmailVerificationMinAggregateInputType
    _max?: EmailVerificationMaxAggregateInputType
  }

  export type EmailVerificationGroupByOutputType = {
    id: string
    token: string
    userId: string
    expires: Date
    createdAt: Date
    _count: EmailVerificationCountAggregateOutputType | null
    _min: EmailVerificationMinAggregateOutputType | null
    _max: EmailVerificationMaxAggregateOutputType | null
  }

  type GetEmailVerificationGroupByPayload<T extends EmailVerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailVerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailVerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
            : GetScalarType<T[P], EmailVerificationGroupByOutputType[P]>
        }
      >
    >


  export type EmailVerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerification"]>

  export type EmailVerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerification"]>

  export type EmailVerificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailVerification"]>

  export type EmailVerificationSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
  }

  export type EmailVerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "userId" | "expires" | "createdAt", ExtArgs["result"]["emailVerification"]>
  export type EmailVerificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailVerificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EmailVerificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EmailVerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailVerification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      expires: Date
      createdAt: Date
    }, ExtArgs["result"]["emailVerification"]>
    composites: {}
  }

  type EmailVerificationGetPayload<S extends boolean | null | undefined | EmailVerificationDefaultArgs> = $Result.GetResult<Prisma.$EmailVerificationPayload, S>

  type EmailVerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailVerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailVerificationCountAggregateInputType | true
    }

  export interface EmailVerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailVerification'], meta: { name: 'EmailVerification' } }
    /**
     * Find zero or one EmailVerification that matches the filter.
     * @param {EmailVerificationFindUniqueArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailVerificationFindUniqueArgs>(args: SelectSubset<T, EmailVerificationFindUniqueArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one EmailVerification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailVerificationFindUniqueOrThrowArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailVerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailVerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first EmailVerification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindFirstArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailVerificationFindFirstArgs>(args?: SelectSubset<T, EmailVerificationFindFirstArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first EmailVerification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindFirstOrThrowArgs} args - Arguments to find a EmailVerification
     * @example
     * // Get one EmailVerification
     * const emailVerification = await prisma.emailVerification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailVerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailVerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more EmailVerifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailVerifications
     * const emailVerifications = await prisma.emailVerification.findMany()
     * 
     * // Get first 10 EmailVerifications
     * const emailVerifications = await prisma.emailVerification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailVerificationWithIdOnly = await prisma.emailVerification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailVerificationFindManyArgs>(args?: SelectSubset<T, EmailVerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a EmailVerification.
     * @param {EmailVerificationCreateArgs} args - Arguments to create a EmailVerification.
     * @example
     * // Create one EmailVerification
     * const EmailVerification = await prisma.emailVerification.create({
     *   data: {
     *     // ... data to create a EmailVerification
     *   }
     * })
     * 
     */
    create<T extends EmailVerificationCreateArgs>(args: SelectSubset<T, EmailVerificationCreateArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many EmailVerifications.
     * @param {EmailVerificationCreateManyArgs} args - Arguments to create many EmailVerifications.
     * @example
     * // Create many EmailVerifications
     * const emailVerification = await prisma.emailVerification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailVerificationCreateManyArgs>(args?: SelectSubset<T, EmailVerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailVerifications and returns the data saved in the database.
     * @param {EmailVerificationCreateManyAndReturnArgs} args - Arguments to create many EmailVerifications.
     * @example
     * // Create many EmailVerifications
     * const emailVerification = await prisma.emailVerification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailVerifications and only return the `id`
     * const emailVerificationWithIdOnly = await prisma.emailVerification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailVerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailVerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a EmailVerification.
     * @param {EmailVerificationDeleteArgs} args - Arguments to delete one EmailVerification.
     * @example
     * // Delete one EmailVerification
     * const EmailVerification = await prisma.emailVerification.delete({
     *   where: {
     *     // ... filter to delete one EmailVerification
     *   }
     * })
     * 
     */
    delete<T extends EmailVerificationDeleteArgs>(args: SelectSubset<T, EmailVerificationDeleteArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one EmailVerification.
     * @param {EmailVerificationUpdateArgs} args - Arguments to update one EmailVerification.
     * @example
     * // Update one EmailVerification
     * const emailVerification = await prisma.emailVerification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailVerificationUpdateArgs>(args: SelectSubset<T, EmailVerificationUpdateArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more EmailVerifications.
     * @param {EmailVerificationDeleteManyArgs} args - Arguments to filter EmailVerifications to delete.
     * @example
     * // Delete a few EmailVerifications
     * const { count } = await prisma.emailVerification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailVerificationDeleteManyArgs>(args?: SelectSubset<T, EmailVerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailVerifications
     * const emailVerification = await prisma.emailVerification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailVerificationUpdateManyArgs>(args: SelectSubset<T, EmailVerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailVerifications and returns the data updated in the database.
     * @param {EmailVerificationUpdateManyAndReturnArgs} args - Arguments to update many EmailVerifications.
     * @example
     * // Update many EmailVerifications
     * const emailVerification = await prisma.emailVerification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailVerifications and only return the `id`
     * const emailVerificationWithIdOnly = await prisma.emailVerification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailVerificationUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailVerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one EmailVerification.
     * @param {EmailVerificationUpsertArgs} args - Arguments to update or create a EmailVerification.
     * @example
     * // Update or create a EmailVerification
     * const emailVerification = await prisma.emailVerification.upsert({
     *   create: {
     *     // ... data to create a EmailVerification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailVerification we want to update
     *   }
     * })
     */
    upsert<T extends EmailVerificationUpsertArgs>(args: SelectSubset<T, EmailVerificationUpsertArgs<ExtArgs>>): Prisma__EmailVerificationClient<$Result.GetResult<Prisma.$EmailVerificationPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of EmailVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationCountArgs} args - Arguments to filter EmailVerifications to count.
     * @example
     * // Count the number of EmailVerifications
     * const count = await prisma.emailVerification.count({
     *   where: {
     *     // ... the filter for the EmailVerifications we want to count
     *   }
     * })
    **/
    count<T extends EmailVerificationCountArgs>(
      args?: Subset<T, EmailVerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailVerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailVerificationAggregateArgs>(args: Subset<T, EmailVerificationAggregateArgs>): Prisma.PrismaPromise<GetEmailVerificationAggregateType<T>>

    /**
     * Group by EmailVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailVerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailVerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailVerificationGroupByArgs['orderBy'] }
        : { orderBy?: EmailVerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailVerification model
   */
  readonly fields: EmailVerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailVerification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailVerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailVerification model
   */ 
  interface EmailVerificationFieldRefs {
    readonly id: FieldRef<"EmailVerification", 'String'>
    readonly token: FieldRef<"EmailVerification", 'String'>
    readonly userId: FieldRef<"EmailVerification", 'String'>
    readonly expires: FieldRef<"EmailVerification", 'DateTime'>
    readonly createdAt: FieldRef<"EmailVerification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailVerification findUnique
   */
  export type EmailVerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification findUniqueOrThrow
   */
  export type EmailVerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification findFirst
   */
  export type EmailVerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerifications.
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerifications.
     */
    distinct?: EmailVerificationScalarFieldEnum | EmailVerificationScalarFieldEnum[]
  }

  /**
   * EmailVerification findFirstOrThrow
   */
  export type EmailVerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerification to fetch.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailVerifications.
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailVerifications.
     */
    distinct?: EmailVerificationScalarFieldEnum | EmailVerificationScalarFieldEnum[]
  }

  /**
   * EmailVerification findMany
   */
  export type EmailVerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * Filter, which EmailVerifications to fetch.
     */
    where?: EmailVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailVerifications to fetch.
     */
    orderBy?: EmailVerificationOrderByWithRelationInput | EmailVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailVerifications.
     */
    cursor?: EmailVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailVerifications.
     */
    skip?: number
    distinct?: EmailVerificationScalarFieldEnum | EmailVerificationScalarFieldEnum[]
  }

  /**
   * EmailVerification create
   */
  export type EmailVerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailVerification.
     */
    data: XOR<EmailVerificationCreateInput, EmailVerificationUncheckedCreateInput>
  }

  /**
   * EmailVerification createMany
   */
  export type EmailVerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailVerifications.
     */
    data: EmailVerificationCreateManyInput | EmailVerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailVerification createManyAndReturn
   */
  export type EmailVerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * The data used to create many EmailVerifications.
     */
    data: EmailVerificationCreateManyInput | EmailVerificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailVerification update
   */
  export type EmailVerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailVerification.
     */
    data: XOR<EmailVerificationUpdateInput, EmailVerificationUncheckedUpdateInput>
    /**
     * Choose, which EmailVerification to update.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification updateMany
   */
  export type EmailVerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailVerifications.
     */
    data: XOR<EmailVerificationUpdateManyMutationInput, EmailVerificationUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerifications to update
     */
    where?: EmailVerificationWhereInput
    /**
     * Limit how many EmailVerifications to update.
     */
    limit?: number
  }

  /**
   * EmailVerification updateManyAndReturn
   */
  export type EmailVerificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * The data used to update EmailVerifications.
     */
    data: XOR<EmailVerificationUpdateManyMutationInput, EmailVerificationUncheckedUpdateManyInput>
    /**
     * Filter which EmailVerifications to update
     */
    where?: EmailVerificationWhereInput
    /**
     * Limit how many EmailVerifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailVerification upsert
   */
  export type EmailVerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailVerification to update in case it exists.
     */
    where: EmailVerificationWhereUniqueInput
    /**
     * In case the EmailVerification found by the `where` argument doesn't exist, create a new EmailVerification with this data.
     */
    create: XOR<EmailVerificationCreateInput, EmailVerificationUncheckedCreateInput>
    /**
     * In case the EmailVerification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailVerificationUpdateInput, EmailVerificationUncheckedUpdateInput>
  }

  /**
   * EmailVerification delete
   */
  export type EmailVerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
    /**
     * Filter which EmailVerification to delete.
     */
    where: EmailVerificationWhereUniqueInput
  }

  /**
   * EmailVerification deleteMany
   */
  export type EmailVerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailVerifications to delete
     */
    where?: EmailVerificationWhereInput
    /**
     * Limit how many EmailVerifications to delete.
     */
    limit?: number
  }

  /**
   * EmailVerification without action
   */
  export type EmailVerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailVerification
     */
    select?: EmailVerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailVerification
     */
    omit?: EmailVerificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailVerificationInclude<ExtArgs> | null
  }


  /**
   * Model PasswordReset
   */

  export type AggregatePasswordReset = {
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  export type PasswordResetMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type PasswordResetMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
  }

  export type PasswordResetCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    expires: number
    createdAt: number
    _all: number
  }


  export type PasswordResetMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type PasswordResetMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
  }

  export type PasswordResetCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    expires?: true
    createdAt?: true
    _all?: true
  }

  export type PasswordResetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordReset to aggregate.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordResets
    **/
    _count?: true | PasswordResetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordResetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordResetMaxAggregateInputType
  }

  export type GetPasswordResetAggregateType<T extends PasswordResetAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordReset]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordReset[P]>
      : GetScalarType<T[P], AggregatePasswordReset[P]>
  }




  export type PasswordResetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PasswordResetWhereInput
    orderBy?: PasswordResetOrderByWithAggregationInput | PasswordResetOrderByWithAggregationInput[]
    by: PasswordResetScalarFieldEnum[] | PasswordResetScalarFieldEnum
    having?: PasswordResetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordResetCountAggregateInputType | true
    _min?: PasswordResetMinAggregateInputType
    _max?: PasswordResetMaxAggregateInputType
  }

  export type PasswordResetGroupByOutputType = {
    id: string
    token: string
    userId: string
    expires: Date
    createdAt: Date
    _count: PasswordResetCountAggregateOutputType | null
    _min: PasswordResetMinAggregateOutputType | null
    _max: PasswordResetMaxAggregateOutputType | null
  }

  type GetPasswordResetGroupByPayload<T extends PasswordResetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordResetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordResetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordResetGroupByOutputType[P]>
        }
      >
    >


  export type PasswordResetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordReset"]>

  export type PasswordResetSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
  }

  export type PasswordResetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "token" | "userId" | "expires" | "createdAt", ExtArgs["result"]["passwordReset"]>
  export type PasswordResetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PasswordResetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PasswordResetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PasswordReset"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      userId: string
      expires: Date
      createdAt: Date
    }, ExtArgs["result"]["passwordReset"]>
    composites: {}
  }

  type PasswordResetGetPayload<S extends boolean | null | undefined | PasswordResetDefaultArgs> = $Result.GetResult<Prisma.$PasswordResetPayload, S>

  type PasswordResetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PasswordResetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PasswordResetCountAggregateInputType | true
    }

  export interface PasswordResetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordReset'], meta: { name: 'PasswordReset' } }
    /**
     * Find zero or one PasswordReset that matches the filter.
     * @param {PasswordResetFindUniqueArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PasswordResetFindUniqueArgs>(args: SelectSubset<T, PasswordResetFindUniqueArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one PasswordReset that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PasswordResetFindUniqueOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PasswordResetFindUniqueOrThrowArgs>(args: SelectSubset<T, PasswordResetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first PasswordReset that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PasswordResetFindFirstArgs>(args?: SelectSubset<T, PasswordResetFindFirstArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first PasswordReset that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindFirstOrThrowArgs} args - Arguments to find a PasswordReset
     * @example
     * // Get one PasswordReset
     * const passwordReset = await prisma.passwordReset.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PasswordResetFindFirstOrThrowArgs>(args?: SelectSubset<T, PasswordResetFindFirstOrThrowArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more PasswordResets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany()
     * 
     * // Get first 10 PasswordResets
     * const passwordResets = await prisma.passwordReset.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PasswordResetFindManyArgs>(args?: SelectSubset<T, PasswordResetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a PasswordReset.
     * @param {PasswordResetCreateArgs} args - Arguments to create a PasswordReset.
     * @example
     * // Create one PasswordReset
     * const PasswordReset = await prisma.passwordReset.create({
     *   data: {
     *     // ... data to create a PasswordReset
     *   }
     * })
     * 
     */
    create<T extends PasswordResetCreateArgs>(args: SelectSubset<T, PasswordResetCreateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many PasswordResets.
     * @param {PasswordResetCreateManyArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PasswordResetCreateManyArgs>(args?: SelectSubset<T, PasswordResetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PasswordResets and returns the data saved in the database.
     * @param {PasswordResetCreateManyAndReturnArgs} args - Arguments to create many PasswordResets.
     * @example
     * // Create many PasswordResets
     * const passwordReset = await prisma.passwordReset.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PasswordResets and only return the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PasswordResetCreateManyAndReturnArgs>(args?: SelectSubset<T, PasswordResetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a PasswordReset.
     * @param {PasswordResetDeleteArgs} args - Arguments to delete one PasswordReset.
     * @example
     * // Delete one PasswordReset
     * const PasswordReset = await prisma.passwordReset.delete({
     *   where: {
     *     // ... filter to delete one PasswordReset
     *   }
     * })
     * 
     */
    delete<T extends PasswordResetDeleteArgs>(args: SelectSubset<T, PasswordResetDeleteArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one PasswordReset.
     * @param {PasswordResetUpdateArgs} args - Arguments to update one PasswordReset.
     * @example
     * // Update one PasswordReset
     * const passwordReset = await prisma.passwordReset.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PasswordResetUpdateArgs>(args: SelectSubset<T, PasswordResetUpdateArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more PasswordResets.
     * @param {PasswordResetDeleteManyArgs} args - Arguments to filter PasswordResets to delete.
     * @example
     * // Delete a few PasswordResets
     * const { count } = await prisma.passwordReset.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PasswordResetDeleteManyArgs>(args?: SelectSubset<T, PasswordResetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PasswordResetUpdateManyArgs>(args: SelectSubset<T, PasswordResetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordResets and returns the data updated in the database.
     * @param {PasswordResetUpdateManyAndReturnArgs} args - Arguments to update many PasswordResets.
     * @example
     * // Update many PasswordResets
     * const passwordReset = await prisma.passwordReset.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PasswordResets and only return the `id`
     * const passwordResetWithIdOnly = await prisma.passwordReset.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PasswordResetUpdateManyAndReturnArgs>(args: SelectSubset<T, PasswordResetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one PasswordReset.
     * @param {PasswordResetUpsertArgs} args - Arguments to update or create a PasswordReset.
     * @example
     * // Update or create a PasswordReset
     * const passwordReset = await prisma.passwordReset.upsert({
     *   create: {
     *     // ... data to create a PasswordReset
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordReset we want to update
     *   }
     * })
     */
    upsert<T extends PasswordResetUpsertArgs>(args: SelectSubset<T, PasswordResetUpsertArgs<ExtArgs>>): Prisma__PasswordResetClient<$Result.GetResult<Prisma.$PasswordResetPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of PasswordResets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetCountArgs} args - Arguments to filter PasswordResets to count.
     * @example
     * // Count the number of PasswordResets
     * const count = await prisma.passwordReset.count({
     *   where: {
     *     // ... the filter for the PasswordResets we want to count
     *   }
     * })
    **/
    count<T extends PasswordResetCountArgs>(
      args?: Subset<T, PasswordResetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordResetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordResetAggregateArgs>(args: Subset<T, PasswordResetAggregateArgs>): Prisma.PrismaPromise<GetPasswordResetAggregateType<T>>

    /**
     * Group by PasswordReset.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordResetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordResetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordResetGroupByArgs['orderBy'] }
        : { orderBy?: PasswordResetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordResetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordResetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordReset model
   */
  readonly fields: PasswordResetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordReset.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordResetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PasswordReset model
   */ 
  interface PasswordResetFieldRefs {
    readonly id: FieldRef<"PasswordReset", 'String'>
    readonly token: FieldRef<"PasswordReset", 'String'>
    readonly userId: FieldRef<"PasswordReset", 'String'>
    readonly expires: FieldRef<"PasswordReset", 'DateTime'>
    readonly createdAt: FieldRef<"PasswordReset", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PasswordReset findUnique
   */
  export type PasswordResetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findUniqueOrThrow
   */
  export type PasswordResetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset findFirst
   */
  export type PasswordResetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findFirstOrThrow
   */
  export type PasswordResetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordReset to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordResets.
     */
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset findMany
   */
  export type PasswordResetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter, which PasswordResets to fetch.
     */
    where?: PasswordResetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordResets to fetch.
     */
    orderBy?: PasswordResetOrderByWithRelationInput | PasswordResetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordResets.
     */
    cursor?: PasswordResetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordResets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordResets.
     */
    skip?: number
    distinct?: PasswordResetScalarFieldEnum | PasswordResetScalarFieldEnum[]
  }

  /**
   * PasswordReset create
   */
  export type PasswordResetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordReset.
     */
    data: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
  }

  /**
   * PasswordReset createMany
   */
  export type PasswordResetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PasswordReset createManyAndReturn
   */
  export type PasswordResetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * The data used to create many PasswordResets.
     */
    data: PasswordResetCreateManyInput | PasswordResetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordReset update
   */
  export type PasswordResetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordReset.
     */
    data: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
    /**
     * Choose, which PasswordReset to update.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset updateMany
   */
  export type PasswordResetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to update.
     */
    limit?: number
  }

  /**
   * PasswordReset updateManyAndReturn
   */
  export type PasswordResetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * The data used to update PasswordResets.
     */
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyInput>
    /**
     * Filter which PasswordResets to update
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PasswordReset upsert
   */
  export type PasswordResetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordReset to update in case it exists.
     */
    where: PasswordResetWhereUniqueInput
    /**
     * In case the PasswordReset found by the `where` argument doesn't exist, create a new PasswordReset with this data.
     */
    create: XOR<PasswordResetCreateInput, PasswordResetUncheckedCreateInput>
    /**
     * In case the PasswordReset was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordResetUpdateInput, PasswordResetUncheckedUpdateInput>
  }

  /**
   * PasswordReset delete
   */
  export type PasswordResetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
    /**
     * Filter which PasswordReset to delete.
     */
    where: PasswordResetWhereUniqueInput
  }

  /**
   * PasswordReset deleteMany
   */
  export type PasswordResetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordResets to delete
     */
    where?: PasswordResetWhereInput
    /**
     * Limit how many PasswordResets to delete.
     */
    limit?: number
  }

  /**
   * PasswordReset without action
   */
  export type PasswordResetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordReset
     */
    select?: PasswordResetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PasswordReset
     */
    omit?: PasswordResetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PasswordResetInclude<ExtArgs> | null
  }


  /**
   * Model Domain
   */

  export type AggregateDomain = {
    _count: DomainCountAggregateOutputType | null
    _min: DomainMinAggregateOutputType | null
    _max: DomainMaxAggregateOutputType | null
  }

  export type DomainMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    registrar: string | null
    registrationDate: Date | null
    expiryDate: Date | null
    autoRenew: boolean | null
    status: $Enums.DomainStatus | null
    privacyProtection: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DomainMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    registrar: string | null
    registrationDate: Date | null
    expiryDate: Date | null
    autoRenew: boolean | null
    status: $Enums.DomainStatus | null
    privacyProtection: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DomainCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    registrar: number
    registrationDate: number
    expiryDate: number
    autoRenew: number
    status: number
    privacyProtection: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DomainMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    registrar?: true
    registrationDate?: true
    expiryDate?: true
    autoRenew?: true
    status?: true
    privacyProtection?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DomainMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    registrar?: true
    registrationDate?: true
    expiryDate?: true
    autoRenew?: true
    status?: true
    privacyProtection?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DomainCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    registrar?: true
    registrationDate?: true
    expiryDate?: true
    autoRenew?: true
    status?: true
    privacyProtection?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DomainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domain to aggregate.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Domains
    **/
    _count?: true | DomainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DomainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DomainMaxAggregateInputType
  }

  export type GetDomainAggregateType<T extends DomainAggregateArgs> = {
        [P in keyof T & keyof AggregateDomain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDomain[P]>
      : GetScalarType<T[P], AggregateDomain[P]>
  }




  export type DomainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DomainWhereInput
    orderBy?: DomainOrderByWithAggregationInput | DomainOrderByWithAggregationInput[]
    by: DomainScalarFieldEnum[] | DomainScalarFieldEnum
    having?: DomainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DomainCountAggregateInputType | true
    _min?: DomainMinAggregateInputType
    _max?: DomainMaxAggregateInputType
  }

  export type DomainGroupByOutputType = {
    id: string
    name: string
    userId: string
    registrar: string | null
    registrationDate: Date
    expiryDate: Date
    autoRenew: boolean
    status: $Enums.DomainStatus
    privacyProtection: boolean
    createdAt: Date
    updatedAt: Date
    _count: DomainCountAggregateOutputType | null
    _min: DomainMinAggregateOutputType | null
    _max: DomainMaxAggregateOutputType | null
  }

  type GetDomainGroupByPayload<T extends DomainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DomainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DomainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DomainGroupByOutputType[P]>
            : GetScalarType<T[P], DomainGroupByOutputType[P]>
        }
      >
    >


  export type DomainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    registrar?: boolean
    registrationDate?: boolean
    expiryDate?: boolean
    autoRenew?: boolean
    status?: boolean
    privacyProtection?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    nameservers?: boolean | Domain$nameserversArgs<ExtArgs>
    dnsRecords?: boolean | Domain$dnsRecordsArgs<ExtArgs>
    HostingAccount?: boolean | Domain$HostingAccountArgs<ExtArgs>
    _count?: boolean | DomainCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domain"]>

  export type DomainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    registrar?: boolean
    registrationDate?: boolean
    expiryDate?: boolean
    autoRenew?: boolean
    status?: boolean
    privacyProtection?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domain"]>

  export type DomainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    registrar?: boolean
    registrationDate?: boolean
    expiryDate?: boolean
    autoRenew?: boolean
    status?: boolean
    privacyProtection?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["domain"]>

  export type DomainSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    registrar?: boolean
    registrationDate?: boolean
    expiryDate?: boolean
    autoRenew?: boolean
    status?: boolean
    privacyProtection?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DomainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId" | "registrar" | "registrationDate" | "expiryDate" | "autoRenew" | "status" | "privacyProtection" | "createdAt" | "updatedAt", ExtArgs["result"]["domain"]>
  export type DomainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    nameservers?: boolean | Domain$nameserversArgs<ExtArgs>
    dnsRecords?: boolean | Domain$dnsRecordsArgs<ExtArgs>
    HostingAccount?: boolean | Domain$HostingAccountArgs<ExtArgs>
    _count?: boolean | DomainCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DomainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DomainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DomainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Domain"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      nameservers: Prisma.$NameserverPayload<ExtArgs>[]
      dnsRecords: Prisma.$DnsRecordPayload<ExtArgs>[]
      HostingAccount: Prisma.$HostingAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      registrar: string | null
      registrationDate: Date
      expiryDate: Date
      autoRenew: boolean
      status: $Enums.DomainStatus
      privacyProtection: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["domain"]>
    composites: {}
  }

  type DomainGetPayload<S extends boolean | null | undefined | DomainDefaultArgs> = $Result.GetResult<Prisma.$DomainPayload, S>

  type DomainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DomainCountAggregateInputType | true
    }

  export interface DomainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Domain'], meta: { name: 'Domain' } }
    /**
     * Find zero or one Domain that matches the filter.
     * @param {DomainFindUniqueArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DomainFindUniqueArgs>(args: SelectSubset<T, DomainFindUniqueArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Domain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DomainFindUniqueOrThrowArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DomainFindUniqueOrThrowArgs>(args: SelectSubset<T, DomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Domain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindFirstArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DomainFindFirstArgs>(args?: SelectSubset<T, DomainFindFirstArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Domain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindFirstOrThrowArgs} args - Arguments to find a Domain
     * @example
     * // Get one Domain
     * const domain = await prisma.domain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DomainFindFirstOrThrowArgs>(args?: SelectSubset<T, DomainFindFirstOrThrowArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Domains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Domains
     * const domains = await prisma.domain.findMany()
     * 
     * // Get first 10 Domains
     * const domains = await prisma.domain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const domainWithIdOnly = await prisma.domain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DomainFindManyArgs>(args?: SelectSubset<T, DomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Domain.
     * @param {DomainCreateArgs} args - Arguments to create a Domain.
     * @example
     * // Create one Domain
     * const Domain = await prisma.domain.create({
     *   data: {
     *     // ... data to create a Domain
     *   }
     * })
     * 
     */
    create<T extends DomainCreateArgs>(args: SelectSubset<T, DomainCreateArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Domains.
     * @param {DomainCreateManyArgs} args - Arguments to create many Domains.
     * @example
     * // Create many Domains
     * const domain = await prisma.domain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DomainCreateManyArgs>(args?: SelectSubset<T, DomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Domains and returns the data saved in the database.
     * @param {DomainCreateManyAndReturnArgs} args - Arguments to create many Domains.
     * @example
     * // Create many Domains
     * const domain = await prisma.domain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Domains and only return the `id`
     * const domainWithIdOnly = await prisma.domain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DomainCreateManyAndReturnArgs>(args?: SelectSubset<T, DomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Domain.
     * @param {DomainDeleteArgs} args - Arguments to delete one Domain.
     * @example
     * // Delete one Domain
     * const Domain = await prisma.domain.delete({
     *   where: {
     *     // ... filter to delete one Domain
     *   }
     * })
     * 
     */
    delete<T extends DomainDeleteArgs>(args: SelectSubset<T, DomainDeleteArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Domain.
     * @param {DomainUpdateArgs} args - Arguments to update one Domain.
     * @example
     * // Update one Domain
     * const domain = await prisma.domain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DomainUpdateArgs>(args: SelectSubset<T, DomainUpdateArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Domains.
     * @param {DomainDeleteManyArgs} args - Arguments to filter Domains to delete.
     * @example
     * // Delete a few Domains
     * const { count } = await prisma.domain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DomainDeleteManyArgs>(args?: SelectSubset<T, DomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Domains
     * const domain = await prisma.domain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DomainUpdateManyArgs>(args: SelectSubset<T, DomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Domains and returns the data updated in the database.
     * @param {DomainUpdateManyAndReturnArgs} args - Arguments to update many Domains.
     * @example
     * // Update many Domains
     * const domain = await prisma.domain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Domains and only return the `id`
     * const domainWithIdOnly = await prisma.domain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DomainUpdateManyAndReturnArgs>(args: SelectSubset<T, DomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Domain.
     * @param {DomainUpsertArgs} args - Arguments to update or create a Domain.
     * @example
     * // Update or create a Domain
     * const domain = await prisma.domain.upsert({
     *   create: {
     *     // ... data to create a Domain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Domain we want to update
     *   }
     * })
     */
    upsert<T extends DomainUpsertArgs>(args: SelectSubset<T, DomainUpsertArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Domains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainCountArgs} args - Arguments to filter Domains to count.
     * @example
     * // Count the number of Domains
     * const count = await prisma.domain.count({
     *   where: {
     *     // ... the filter for the Domains we want to count
     *   }
     * })
    **/
    count<T extends DomainCountArgs>(
      args?: Subset<T, DomainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DomainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Domain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DomainAggregateArgs>(args: Subset<T, DomainAggregateArgs>): Prisma.PrismaPromise<GetDomainAggregateType<T>>

    /**
     * Group by Domain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DomainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DomainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DomainGroupByArgs['orderBy'] }
        : { orderBy?: DomainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Domain model
   */
  readonly fields: DomainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Domain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DomainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    nameservers<T extends Domain$nameserversArgs<ExtArgs> = {}>(args?: Subset<T, Domain$nameserversArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    dnsRecords<T extends Domain$dnsRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Domain$dnsRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    HostingAccount<T extends Domain$HostingAccountArgs<ExtArgs> = {}>(args?: Subset<T, Domain$HostingAccountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Domain model
   */ 
  interface DomainFieldRefs {
    readonly id: FieldRef<"Domain", 'String'>
    readonly name: FieldRef<"Domain", 'String'>
    readonly userId: FieldRef<"Domain", 'String'>
    readonly registrar: FieldRef<"Domain", 'String'>
    readonly registrationDate: FieldRef<"Domain", 'DateTime'>
    readonly expiryDate: FieldRef<"Domain", 'DateTime'>
    readonly autoRenew: FieldRef<"Domain", 'Boolean'>
    readonly status: FieldRef<"Domain", 'DomainStatus'>
    readonly privacyProtection: FieldRef<"Domain", 'Boolean'>
    readonly createdAt: FieldRef<"Domain", 'DateTime'>
    readonly updatedAt: FieldRef<"Domain", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Domain findUnique
   */
  export type DomainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain findUniqueOrThrow
   */
  export type DomainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain findFirst
   */
  export type DomainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domains.
     */
    distinct?: DomainScalarFieldEnum | DomainScalarFieldEnum[]
  }

  /**
   * Domain findFirstOrThrow
   */
  export type DomainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domain to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Domains.
     */
    distinct?: DomainScalarFieldEnum | DomainScalarFieldEnum[]
  }

  /**
   * Domain findMany
   */
  export type DomainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter, which Domains to fetch.
     */
    where?: DomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Domains to fetch.
     */
    orderBy?: DomainOrderByWithRelationInput | DomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Domains.
     */
    cursor?: DomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Domains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Domains.
     */
    skip?: number
    distinct?: DomainScalarFieldEnum | DomainScalarFieldEnum[]
  }

  /**
   * Domain create
   */
  export type DomainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The data needed to create a Domain.
     */
    data: XOR<DomainCreateInput, DomainUncheckedCreateInput>
  }

  /**
   * Domain createMany
   */
  export type DomainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Domains.
     */
    data: DomainCreateManyInput | DomainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Domain createManyAndReturn
   */
  export type DomainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * The data used to create many Domains.
     */
    data: DomainCreateManyInput | DomainCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Domain update
   */
  export type DomainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The data needed to update a Domain.
     */
    data: XOR<DomainUpdateInput, DomainUncheckedUpdateInput>
    /**
     * Choose, which Domain to update.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain updateMany
   */
  export type DomainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Domains.
     */
    data: XOR<DomainUpdateManyMutationInput, DomainUncheckedUpdateManyInput>
    /**
     * Filter which Domains to update
     */
    where?: DomainWhereInput
    /**
     * Limit how many Domains to update.
     */
    limit?: number
  }

  /**
   * Domain updateManyAndReturn
   */
  export type DomainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * The data used to update Domains.
     */
    data: XOR<DomainUpdateManyMutationInput, DomainUncheckedUpdateManyInput>
    /**
     * Filter which Domains to update
     */
    where?: DomainWhereInput
    /**
     * Limit how many Domains to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Domain upsert
   */
  export type DomainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * The filter to search for the Domain to update in case it exists.
     */
    where: DomainWhereUniqueInput
    /**
     * In case the Domain found by the `where` argument doesn't exist, create a new Domain with this data.
     */
    create: XOR<DomainCreateInput, DomainUncheckedCreateInput>
    /**
     * In case the Domain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DomainUpdateInput, DomainUncheckedUpdateInput>
  }

  /**
   * Domain delete
   */
  export type DomainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    /**
     * Filter which Domain to delete.
     */
    where: DomainWhereUniqueInput
  }

  /**
   * Domain deleteMany
   */
  export type DomainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Domains to delete
     */
    where?: DomainWhereInput
    /**
     * Limit how many Domains to delete.
     */
    limit?: number
  }

  /**
   * Domain.nameservers
   */
  export type Domain$nameserversArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    where?: NameserverWhereInput
    orderBy?: NameserverOrderByWithRelationInput | NameserverOrderByWithRelationInput[]
    cursor?: NameserverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NameserverScalarFieldEnum | NameserverScalarFieldEnum[]
  }

  /**
   * Domain.dnsRecords
   */
  export type Domain$dnsRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    where?: DnsRecordWhereInput
    orderBy?: DnsRecordOrderByWithRelationInput | DnsRecordOrderByWithRelationInput[]
    cursor?: DnsRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DnsRecordScalarFieldEnum | DnsRecordScalarFieldEnum[]
  }

  /**
   * Domain.HostingAccount
   */
  export type Domain$HostingAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    where?: HostingAccountWhereInput
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    cursor?: HostingAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HostingAccountScalarFieldEnum | HostingAccountScalarFieldEnum[]
  }

  /**
   * Domain without action
   */
  export type DomainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
  }


  /**
   * Model Nameserver
   */

  export type AggregateNameserver = {
    _count: NameserverCountAggregateOutputType | null
    _avg: NameserverAvgAggregateOutputType | null
    _sum: NameserverSumAggregateOutputType | null
    _min: NameserverMinAggregateOutputType | null
    _max: NameserverMaxAggregateOutputType | null
  }

  export type NameserverAvgAggregateOutputType = {
    order: number | null
  }

  export type NameserverSumAggregateOutputType = {
    order: number | null
  }

  export type NameserverMinAggregateOutputType = {
    id: string | null
    hostname: string | null
    domainId: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NameserverMaxAggregateOutputType = {
    id: string | null
    hostname: string | null
    domainId: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NameserverCountAggregateOutputType = {
    id: number
    hostname: number
    domainId: number
    order: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NameserverAvgAggregateInputType = {
    order?: true
  }

  export type NameserverSumAggregateInputType = {
    order?: true
  }

  export type NameserverMinAggregateInputType = {
    id?: true
    hostname?: true
    domainId?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NameserverMaxAggregateInputType = {
    id?: true
    hostname?: true
    domainId?: true
    order?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NameserverCountAggregateInputType = {
    id?: true
    hostname?: true
    domainId?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NameserverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nameserver to aggregate.
     */
    where?: NameserverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nameservers to fetch.
     */
    orderBy?: NameserverOrderByWithRelationInput | NameserverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NameserverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nameservers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nameservers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nameservers
    **/
    _count?: true | NameserverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NameserverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NameserverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NameserverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NameserverMaxAggregateInputType
  }

  export type GetNameserverAggregateType<T extends NameserverAggregateArgs> = {
        [P in keyof T & keyof AggregateNameserver]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNameserver[P]>
      : GetScalarType<T[P], AggregateNameserver[P]>
  }




  export type NameserverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NameserverWhereInput
    orderBy?: NameserverOrderByWithAggregationInput | NameserverOrderByWithAggregationInput[]
    by: NameserverScalarFieldEnum[] | NameserverScalarFieldEnum
    having?: NameserverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NameserverCountAggregateInputType | true
    _avg?: NameserverAvgAggregateInputType
    _sum?: NameserverSumAggregateInputType
    _min?: NameserverMinAggregateInputType
    _max?: NameserverMaxAggregateInputType
  }

  export type NameserverGroupByOutputType = {
    id: string
    hostname: string
    domainId: string
    order: number
    createdAt: Date
    updatedAt: Date
    _count: NameserverCountAggregateOutputType | null
    _avg: NameserverAvgAggregateOutputType | null
    _sum: NameserverSumAggregateOutputType | null
    _min: NameserverMinAggregateOutputType | null
    _max: NameserverMaxAggregateOutputType | null
  }

  type GetNameserverGroupByPayload<T extends NameserverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NameserverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NameserverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NameserverGroupByOutputType[P]>
            : GetScalarType<T[P], NameserverGroupByOutputType[P]>
        }
      >
    >


  export type NameserverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostname?: boolean
    domainId?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameserver"]>

  export type NameserverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostname?: boolean
    domainId?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameserver"]>

  export type NameserverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostname?: boolean
    domainId?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nameserver"]>

  export type NameserverSelectScalar = {
    id?: boolean
    hostname?: boolean
    domainId?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NameserverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hostname" | "domainId" | "order" | "createdAt" | "updatedAt", ExtArgs["result"]["nameserver"]>
  export type NameserverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }
  export type NameserverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }
  export type NameserverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }

  export type $NameserverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nameserver"
    objects: {
      domain: Prisma.$DomainPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hostname: string
      domainId: string
      order: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["nameserver"]>
    composites: {}
  }

  type NameserverGetPayload<S extends boolean | null | undefined | NameserverDefaultArgs> = $Result.GetResult<Prisma.$NameserverPayload, S>

  type NameserverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NameserverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NameserverCountAggregateInputType | true
    }

  export interface NameserverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nameserver'], meta: { name: 'Nameserver' } }
    /**
     * Find zero or one Nameserver that matches the filter.
     * @param {NameserverFindUniqueArgs} args - Arguments to find a Nameserver
     * @example
     * // Get one Nameserver
     * const nameserver = await prisma.nameserver.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NameserverFindUniqueArgs>(args: SelectSubset<T, NameserverFindUniqueArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Nameserver that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NameserverFindUniqueOrThrowArgs} args - Arguments to find a Nameserver
     * @example
     * // Get one Nameserver
     * const nameserver = await prisma.nameserver.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NameserverFindUniqueOrThrowArgs>(args: SelectSubset<T, NameserverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Nameserver that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameserverFindFirstArgs} args - Arguments to find a Nameserver
     * @example
     * // Get one Nameserver
     * const nameserver = await prisma.nameserver.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NameserverFindFirstArgs>(args?: SelectSubset<T, NameserverFindFirstArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Nameserver that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameserverFindFirstOrThrowArgs} args - Arguments to find a Nameserver
     * @example
     * // Get one Nameserver
     * const nameserver = await prisma.nameserver.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NameserverFindFirstOrThrowArgs>(args?: SelectSubset<T, NameserverFindFirstOrThrowArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Nameservers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameserverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nameservers
     * const nameservers = await prisma.nameserver.findMany()
     * 
     * // Get first 10 Nameservers
     * const nameservers = await prisma.nameserver.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nameserverWithIdOnly = await prisma.nameserver.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NameserverFindManyArgs>(args?: SelectSubset<T, NameserverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Nameserver.
     * @param {NameserverCreateArgs} args - Arguments to create a Nameserver.
     * @example
     * // Create one Nameserver
     * const Nameserver = await prisma.nameserver.create({
     *   data: {
     *     // ... data to create a Nameserver
     *   }
     * })
     * 
     */
    create<T extends NameserverCreateArgs>(args: SelectSubset<T, NameserverCreateArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Nameservers.
     * @param {NameserverCreateManyArgs} args - Arguments to create many Nameservers.
     * @example
     * // Create many Nameservers
     * const nameserver = await prisma.nameserver.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NameserverCreateManyArgs>(args?: SelectSubset<T, NameserverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Nameservers and returns the data saved in the database.
     * @param {NameserverCreateManyAndReturnArgs} args - Arguments to create many Nameservers.
     * @example
     * // Create many Nameservers
     * const nameserver = await prisma.nameserver.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Nameservers and only return the `id`
     * const nameserverWithIdOnly = await prisma.nameserver.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NameserverCreateManyAndReturnArgs>(args?: SelectSubset<T, NameserverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Nameserver.
     * @param {NameserverDeleteArgs} args - Arguments to delete one Nameserver.
     * @example
     * // Delete one Nameserver
     * const Nameserver = await prisma.nameserver.delete({
     *   where: {
     *     // ... filter to delete one Nameserver
     *   }
     * })
     * 
     */
    delete<T extends NameserverDeleteArgs>(args: SelectSubset<T, NameserverDeleteArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Nameserver.
     * @param {NameserverUpdateArgs} args - Arguments to update one Nameserver.
     * @example
     * // Update one Nameserver
     * const nameserver = await prisma.nameserver.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NameserverUpdateArgs>(args: SelectSubset<T, NameserverUpdateArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Nameservers.
     * @param {NameserverDeleteManyArgs} args - Arguments to filter Nameservers to delete.
     * @example
     * // Delete a few Nameservers
     * const { count } = await prisma.nameserver.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NameserverDeleteManyArgs>(args?: SelectSubset<T, NameserverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nameservers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameserverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nameservers
     * const nameserver = await prisma.nameserver.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NameserverUpdateManyArgs>(args: SelectSubset<T, NameserverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nameservers and returns the data updated in the database.
     * @param {NameserverUpdateManyAndReturnArgs} args - Arguments to update many Nameservers.
     * @example
     * // Update many Nameservers
     * const nameserver = await prisma.nameserver.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Nameservers and only return the `id`
     * const nameserverWithIdOnly = await prisma.nameserver.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NameserverUpdateManyAndReturnArgs>(args: SelectSubset<T, NameserverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Nameserver.
     * @param {NameserverUpsertArgs} args - Arguments to update or create a Nameserver.
     * @example
     * // Update or create a Nameserver
     * const nameserver = await prisma.nameserver.upsert({
     *   create: {
     *     // ... data to create a Nameserver
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nameserver we want to update
     *   }
     * })
     */
    upsert<T extends NameserverUpsertArgs>(args: SelectSubset<T, NameserverUpsertArgs<ExtArgs>>): Prisma__NameserverClient<$Result.GetResult<Prisma.$NameserverPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Nameservers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameserverCountArgs} args - Arguments to filter Nameservers to count.
     * @example
     * // Count the number of Nameservers
     * const count = await prisma.nameserver.count({
     *   where: {
     *     // ... the filter for the Nameservers we want to count
     *   }
     * })
    **/
    count<T extends NameserverCountArgs>(
      args?: Subset<T, NameserverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NameserverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nameserver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameserverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NameserverAggregateArgs>(args: Subset<T, NameserverAggregateArgs>): Prisma.PrismaPromise<GetNameserverAggregateType<T>>

    /**
     * Group by Nameserver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NameserverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NameserverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NameserverGroupByArgs['orderBy'] }
        : { orderBy?: NameserverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NameserverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNameserverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nameserver model
   */
  readonly fields: NameserverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nameserver.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NameserverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domain<T extends DomainDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DomainDefaultArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nameserver model
   */ 
  interface NameserverFieldRefs {
    readonly id: FieldRef<"Nameserver", 'String'>
    readonly hostname: FieldRef<"Nameserver", 'String'>
    readonly domainId: FieldRef<"Nameserver", 'String'>
    readonly order: FieldRef<"Nameserver", 'Int'>
    readonly createdAt: FieldRef<"Nameserver", 'DateTime'>
    readonly updatedAt: FieldRef<"Nameserver", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Nameserver findUnique
   */
  export type NameserverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * Filter, which Nameserver to fetch.
     */
    where: NameserverWhereUniqueInput
  }

  /**
   * Nameserver findUniqueOrThrow
   */
  export type NameserverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * Filter, which Nameserver to fetch.
     */
    where: NameserverWhereUniqueInput
  }

  /**
   * Nameserver findFirst
   */
  export type NameserverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * Filter, which Nameserver to fetch.
     */
    where?: NameserverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nameservers to fetch.
     */
    orderBy?: NameserverOrderByWithRelationInput | NameserverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nameservers.
     */
    cursor?: NameserverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nameservers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nameservers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nameservers.
     */
    distinct?: NameserverScalarFieldEnum | NameserverScalarFieldEnum[]
  }

  /**
   * Nameserver findFirstOrThrow
   */
  export type NameserverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * Filter, which Nameserver to fetch.
     */
    where?: NameserverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nameservers to fetch.
     */
    orderBy?: NameserverOrderByWithRelationInput | NameserverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nameservers.
     */
    cursor?: NameserverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nameservers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nameservers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nameservers.
     */
    distinct?: NameserverScalarFieldEnum | NameserverScalarFieldEnum[]
  }

  /**
   * Nameserver findMany
   */
  export type NameserverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * Filter, which Nameservers to fetch.
     */
    where?: NameserverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nameservers to fetch.
     */
    orderBy?: NameserverOrderByWithRelationInput | NameserverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nameservers.
     */
    cursor?: NameserverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nameservers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nameservers.
     */
    skip?: number
    distinct?: NameserverScalarFieldEnum | NameserverScalarFieldEnum[]
  }

  /**
   * Nameserver create
   */
  export type NameserverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * The data needed to create a Nameserver.
     */
    data: XOR<NameserverCreateInput, NameserverUncheckedCreateInput>
  }

  /**
   * Nameserver createMany
   */
  export type NameserverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nameservers.
     */
    data: NameserverCreateManyInput | NameserverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Nameserver createManyAndReturn
   */
  export type NameserverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * The data used to create many Nameservers.
     */
    data: NameserverCreateManyInput | NameserverCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Nameserver update
   */
  export type NameserverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * The data needed to update a Nameserver.
     */
    data: XOR<NameserverUpdateInput, NameserverUncheckedUpdateInput>
    /**
     * Choose, which Nameserver to update.
     */
    where: NameserverWhereUniqueInput
  }

  /**
   * Nameserver updateMany
   */
  export type NameserverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nameservers.
     */
    data: XOR<NameserverUpdateManyMutationInput, NameserverUncheckedUpdateManyInput>
    /**
     * Filter which Nameservers to update
     */
    where?: NameserverWhereInput
    /**
     * Limit how many Nameservers to update.
     */
    limit?: number
  }

  /**
   * Nameserver updateManyAndReturn
   */
  export type NameserverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * The data used to update Nameservers.
     */
    data: XOR<NameserverUpdateManyMutationInput, NameserverUncheckedUpdateManyInput>
    /**
     * Filter which Nameservers to update
     */
    where?: NameserverWhereInput
    /**
     * Limit how many Nameservers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Nameserver upsert
   */
  export type NameserverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * The filter to search for the Nameserver to update in case it exists.
     */
    where: NameserverWhereUniqueInput
    /**
     * In case the Nameserver found by the `where` argument doesn't exist, create a new Nameserver with this data.
     */
    create: XOR<NameserverCreateInput, NameserverUncheckedCreateInput>
    /**
     * In case the Nameserver was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NameserverUpdateInput, NameserverUncheckedUpdateInput>
  }

  /**
   * Nameserver delete
   */
  export type NameserverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
    /**
     * Filter which Nameserver to delete.
     */
    where: NameserverWhereUniqueInput
  }

  /**
   * Nameserver deleteMany
   */
  export type NameserverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nameservers to delete
     */
    where?: NameserverWhereInput
    /**
     * Limit how many Nameservers to delete.
     */
    limit?: number
  }

  /**
   * Nameserver without action
   */
  export type NameserverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nameserver
     */
    select?: NameserverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nameserver
     */
    omit?: NameserverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NameserverInclude<ExtArgs> | null
  }


  /**
   * Model DnsRecord
   */

  export type AggregateDnsRecord = {
    _count: DnsRecordCountAggregateOutputType | null
    _avg: DnsRecordAvgAggregateOutputType | null
    _sum: DnsRecordSumAggregateOutputType | null
    _min: DnsRecordMinAggregateOutputType | null
    _max: DnsRecordMaxAggregateOutputType | null
  }

  export type DnsRecordAvgAggregateOutputType = {
    ttl: number | null
    priority: number | null
  }

  export type DnsRecordSumAggregateOutputType = {
    ttl: number | null
    priority: number | null
  }

  export type DnsRecordMinAggregateOutputType = {
    id: string | null
    domainId: string | null
    type: string | null
    name: string | null
    content: string | null
    ttl: number | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DnsRecordMaxAggregateOutputType = {
    id: string | null
    domainId: string | null
    type: string | null
    name: string | null
    content: string | null
    ttl: number | null
    priority: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DnsRecordCountAggregateOutputType = {
    id: number
    domainId: number
    type: number
    name: number
    content: number
    ttl: number
    priority: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DnsRecordAvgAggregateInputType = {
    ttl?: true
    priority?: true
  }

  export type DnsRecordSumAggregateInputType = {
    ttl?: true
    priority?: true
  }

  export type DnsRecordMinAggregateInputType = {
    id?: true
    domainId?: true
    type?: true
    name?: true
    content?: true
    ttl?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DnsRecordMaxAggregateInputType = {
    id?: true
    domainId?: true
    type?: true
    name?: true
    content?: true
    ttl?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DnsRecordCountAggregateInputType = {
    id?: true
    domainId?: true
    type?: true
    name?: true
    content?: true
    ttl?: true
    priority?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DnsRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DnsRecord to aggregate.
     */
    where?: DnsRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DnsRecords to fetch.
     */
    orderBy?: DnsRecordOrderByWithRelationInput | DnsRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DnsRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DnsRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DnsRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DnsRecords
    **/
    _count?: true | DnsRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DnsRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DnsRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DnsRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DnsRecordMaxAggregateInputType
  }

  export type GetDnsRecordAggregateType<T extends DnsRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateDnsRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDnsRecord[P]>
      : GetScalarType<T[P], AggregateDnsRecord[P]>
  }




  export type DnsRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DnsRecordWhereInput
    orderBy?: DnsRecordOrderByWithAggregationInput | DnsRecordOrderByWithAggregationInput[]
    by: DnsRecordScalarFieldEnum[] | DnsRecordScalarFieldEnum
    having?: DnsRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DnsRecordCountAggregateInputType | true
    _avg?: DnsRecordAvgAggregateInputType
    _sum?: DnsRecordSumAggregateInputType
    _min?: DnsRecordMinAggregateInputType
    _max?: DnsRecordMaxAggregateInputType
  }

  export type DnsRecordGroupByOutputType = {
    id: string
    domainId: string
    type: string
    name: string
    content: string
    ttl: number
    priority: number | null
    createdAt: Date
    updatedAt: Date
    _count: DnsRecordCountAggregateOutputType | null
    _avg: DnsRecordAvgAggregateOutputType | null
    _sum: DnsRecordSumAggregateOutputType | null
    _min: DnsRecordMinAggregateOutputType | null
    _max: DnsRecordMaxAggregateOutputType | null
  }

  type GetDnsRecordGroupByPayload<T extends DnsRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DnsRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DnsRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DnsRecordGroupByOutputType[P]>
            : GetScalarType<T[P], DnsRecordGroupByOutputType[P]>
        }
      >
    >


  export type DnsRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domainId?: boolean
    type?: boolean
    name?: boolean
    content?: boolean
    ttl?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dnsRecord"]>

  export type DnsRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domainId?: boolean
    type?: boolean
    name?: boolean
    content?: boolean
    ttl?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dnsRecord"]>

  export type DnsRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    domainId?: boolean
    type?: boolean
    name?: boolean
    content?: boolean
    ttl?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dnsRecord"]>

  export type DnsRecordSelectScalar = {
    id?: boolean
    domainId?: boolean
    type?: boolean
    name?: boolean
    content?: boolean
    ttl?: boolean
    priority?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DnsRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "domainId" | "type" | "name" | "content" | "ttl" | "priority" | "createdAt" | "updatedAt", ExtArgs["result"]["dnsRecord"]>
  export type DnsRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }
  export type DnsRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }
  export type DnsRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    domain?: boolean | DomainDefaultArgs<ExtArgs>
  }

  export type $DnsRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DnsRecord"
    objects: {
      domain: Prisma.$DomainPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      domainId: string
      type: string
      name: string
      content: string
      ttl: number
      priority: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dnsRecord"]>
    composites: {}
  }

  type DnsRecordGetPayload<S extends boolean | null | undefined | DnsRecordDefaultArgs> = $Result.GetResult<Prisma.$DnsRecordPayload, S>

  type DnsRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DnsRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DnsRecordCountAggregateInputType | true
    }

  export interface DnsRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DnsRecord'], meta: { name: 'DnsRecord' } }
    /**
     * Find zero or one DnsRecord that matches the filter.
     * @param {DnsRecordFindUniqueArgs} args - Arguments to find a DnsRecord
     * @example
     * // Get one DnsRecord
     * const dnsRecord = await prisma.dnsRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DnsRecordFindUniqueArgs>(args: SelectSubset<T, DnsRecordFindUniqueArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one DnsRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DnsRecordFindUniqueOrThrowArgs} args - Arguments to find a DnsRecord
     * @example
     * // Get one DnsRecord
     * const dnsRecord = await prisma.dnsRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DnsRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, DnsRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first DnsRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DnsRecordFindFirstArgs} args - Arguments to find a DnsRecord
     * @example
     * // Get one DnsRecord
     * const dnsRecord = await prisma.dnsRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DnsRecordFindFirstArgs>(args?: SelectSubset<T, DnsRecordFindFirstArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first DnsRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DnsRecordFindFirstOrThrowArgs} args - Arguments to find a DnsRecord
     * @example
     * // Get one DnsRecord
     * const dnsRecord = await prisma.dnsRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DnsRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, DnsRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more DnsRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DnsRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DnsRecords
     * const dnsRecords = await prisma.dnsRecord.findMany()
     * 
     * // Get first 10 DnsRecords
     * const dnsRecords = await prisma.dnsRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dnsRecordWithIdOnly = await prisma.dnsRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DnsRecordFindManyArgs>(args?: SelectSubset<T, DnsRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a DnsRecord.
     * @param {DnsRecordCreateArgs} args - Arguments to create a DnsRecord.
     * @example
     * // Create one DnsRecord
     * const DnsRecord = await prisma.dnsRecord.create({
     *   data: {
     *     // ... data to create a DnsRecord
     *   }
     * })
     * 
     */
    create<T extends DnsRecordCreateArgs>(args: SelectSubset<T, DnsRecordCreateArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many DnsRecords.
     * @param {DnsRecordCreateManyArgs} args - Arguments to create many DnsRecords.
     * @example
     * // Create many DnsRecords
     * const dnsRecord = await prisma.dnsRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DnsRecordCreateManyArgs>(args?: SelectSubset<T, DnsRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DnsRecords and returns the data saved in the database.
     * @param {DnsRecordCreateManyAndReturnArgs} args - Arguments to create many DnsRecords.
     * @example
     * // Create many DnsRecords
     * const dnsRecord = await prisma.dnsRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DnsRecords and only return the `id`
     * const dnsRecordWithIdOnly = await prisma.dnsRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DnsRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, DnsRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a DnsRecord.
     * @param {DnsRecordDeleteArgs} args - Arguments to delete one DnsRecord.
     * @example
     * // Delete one DnsRecord
     * const DnsRecord = await prisma.dnsRecord.delete({
     *   where: {
     *     // ... filter to delete one DnsRecord
     *   }
     * })
     * 
     */
    delete<T extends DnsRecordDeleteArgs>(args: SelectSubset<T, DnsRecordDeleteArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one DnsRecord.
     * @param {DnsRecordUpdateArgs} args - Arguments to update one DnsRecord.
     * @example
     * // Update one DnsRecord
     * const dnsRecord = await prisma.dnsRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DnsRecordUpdateArgs>(args: SelectSubset<T, DnsRecordUpdateArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more DnsRecords.
     * @param {DnsRecordDeleteManyArgs} args - Arguments to filter DnsRecords to delete.
     * @example
     * // Delete a few DnsRecords
     * const { count } = await prisma.dnsRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DnsRecordDeleteManyArgs>(args?: SelectSubset<T, DnsRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DnsRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DnsRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DnsRecords
     * const dnsRecord = await prisma.dnsRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DnsRecordUpdateManyArgs>(args: SelectSubset<T, DnsRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DnsRecords and returns the data updated in the database.
     * @param {DnsRecordUpdateManyAndReturnArgs} args - Arguments to update many DnsRecords.
     * @example
     * // Update many DnsRecords
     * const dnsRecord = await prisma.dnsRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DnsRecords and only return the `id`
     * const dnsRecordWithIdOnly = await prisma.dnsRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DnsRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, DnsRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one DnsRecord.
     * @param {DnsRecordUpsertArgs} args - Arguments to update or create a DnsRecord.
     * @example
     * // Update or create a DnsRecord
     * const dnsRecord = await prisma.dnsRecord.upsert({
     *   create: {
     *     // ... data to create a DnsRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DnsRecord we want to update
     *   }
     * })
     */
    upsert<T extends DnsRecordUpsertArgs>(args: SelectSubset<T, DnsRecordUpsertArgs<ExtArgs>>): Prisma__DnsRecordClient<$Result.GetResult<Prisma.$DnsRecordPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of DnsRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DnsRecordCountArgs} args - Arguments to filter DnsRecords to count.
     * @example
     * // Count the number of DnsRecords
     * const count = await prisma.dnsRecord.count({
     *   where: {
     *     // ... the filter for the DnsRecords we want to count
     *   }
     * })
    **/
    count<T extends DnsRecordCountArgs>(
      args?: Subset<T, DnsRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DnsRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DnsRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DnsRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DnsRecordAggregateArgs>(args: Subset<T, DnsRecordAggregateArgs>): Prisma.PrismaPromise<GetDnsRecordAggregateType<T>>

    /**
     * Group by DnsRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DnsRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DnsRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DnsRecordGroupByArgs['orderBy'] }
        : { orderBy?: DnsRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DnsRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDnsRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DnsRecord model
   */
  readonly fields: DnsRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DnsRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DnsRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    domain<T extends DomainDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DomainDefaultArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DnsRecord model
   */ 
  interface DnsRecordFieldRefs {
    readonly id: FieldRef<"DnsRecord", 'String'>
    readonly domainId: FieldRef<"DnsRecord", 'String'>
    readonly type: FieldRef<"DnsRecord", 'String'>
    readonly name: FieldRef<"DnsRecord", 'String'>
    readonly content: FieldRef<"DnsRecord", 'String'>
    readonly ttl: FieldRef<"DnsRecord", 'Int'>
    readonly priority: FieldRef<"DnsRecord", 'Int'>
    readonly createdAt: FieldRef<"DnsRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"DnsRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DnsRecord findUnique
   */
  export type DnsRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * Filter, which DnsRecord to fetch.
     */
    where: DnsRecordWhereUniqueInput
  }

  /**
   * DnsRecord findUniqueOrThrow
   */
  export type DnsRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * Filter, which DnsRecord to fetch.
     */
    where: DnsRecordWhereUniqueInput
  }

  /**
   * DnsRecord findFirst
   */
  export type DnsRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * Filter, which DnsRecord to fetch.
     */
    where?: DnsRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DnsRecords to fetch.
     */
    orderBy?: DnsRecordOrderByWithRelationInput | DnsRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DnsRecords.
     */
    cursor?: DnsRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DnsRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DnsRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DnsRecords.
     */
    distinct?: DnsRecordScalarFieldEnum | DnsRecordScalarFieldEnum[]
  }

  /**
   * DnsRecord findFirstOrThrow
   */
  export type DnsRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * Filter, which DnsRecord to fetch.
     */
    where?: DnsRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DnsRecords to fetch.
     */
    orderBy?: DnsRecordOrderByWithRelationInput | DnsRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DnsRecords.
     */
    cursor?: DnsRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DnsRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DnsRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DnsRecords.
     */
    distinct?: DnsRecordScalarFieldEnum | DnsRecordScalarFieldEnum[]
  }

  /**
   * DnsRecord findMany
   */
  export type DnsRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * Filter, which DnsRecords to fetch.
     */
    where?: DnsRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DnsRecords to fetch.
     */
    orderBy?: DnsRecordOrderByWithRelationInput | DnsRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DnsRecords.
     */
    cursor?: DnsRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DnsRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DnsRecords.
     */
    skip?: number
    distinct?: DnsRecordScalarFieldEnum | DnsRecordScalarFieldEnum[]
  }

  /**
   * DnsRecord create
   */
  export type DnsRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a DnsRecord.
     */
    data: XOR<DnsRecordCreateInput, DnsRecordUncheckedCreateInput>
  }

  /**
   * DnsRecord createMany
   */
  export type DnsRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DnsRecords.
     */
    data: DnsRecordCreateManyInput | DnsRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DnsRecord createManyAndReturn
   */
  export type DnsRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * The data used to create many DnsRecords.
     */
    data: DnsRecordCreateManyInput | DnsRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DnsRecord update
   */
  export type DnsRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a DnsRecord.
     */
    data: XOR<DnsRecordUpdateInput, DnsRecordUncheckedUpdateInput>
    /**
     * Choose, which DnsRecord to update.
     */
    where: DnsRecordWhereUniqueInput
  }

  /**
   * DnsRecord updateMany
   */
  export type DnsRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DnsRecords.
     */
    data: XOR<DnsRecordUpdateManyMutationInput, DnsRecordUncheckedUpdateManyInput>
    /**
     * Filter which DnsRecords to update
     */
    where?: DnsRecordWhereInput
    /**
     * Limit how many DnsRecords to update.
     */
    limit?: number
  }

  /**
   * DnsRecord updateManyAndReturn
   */
  export type DnsRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * The data used to update DnsRecords.
     */
    data: XOR<DnsRecordUpdateManyMutationInput, DnsRecordUncheckedUpdateManyInput>
    /**
     * Filter which DnsRecords to update
     */
    where?: DnsRecordWhereInput
    /**
     * Limit how many DnsRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DnsRecord upsert
   */
  export type DnsRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the DnsRecord to update in case it exists.
     */
    where: DnsRecordWhereUniqueInput
    /**
     * In case the DnsRecord found by the `where` argument doesn't exist, create a new DnsRecord with this data.
     */
    create: XOR<DnsRecordCreateInput, DnsRecordUncheckedCreateInput>
    /**
     * In case the DnsRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DnsRecordUpdateInput, DnsRecordUncheckedUpdateInput>
  }

  /**
   * DnsRecord delete
   */
  export type DnsRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
    /**
     * Filter which DnsRecord to delete.
     */
    where: DnsRecordWhereUniqueInput
  }

  /**
   * DnsRecord deleteMany
   */
  export type DnsRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DnsRecords to delete
     */
    where?: DnsRecordWhereInput
    /**
     * Limit how many DnsRecords to delete.
     */
    limit?: number
  }

  /**
   * DnsRecord without action
   */
  export type DnsRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DnsRecord
     */
    select?: DnsRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DnsRecord
     */
    omit?: DnsRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DnsRecordInclude<ExtArgs> | null
  }


  /**
   * Model HostingPackage
   */

  export type AggregateHostingPackage = {
    _count: HostingPackageCountAggregateOutputType | null
    _avg: HostingPackageAvgAggregateOutputType | null
    _sum: HostingPackageSumAggregateOutputType | null
    _min: HostingPackageMinAggregateOutputType | null
    _max: HostingPackageMaxAggregateOutputType | null
  }

  export type HostingPackageAvgAggregateOutputType = {
    diskSpace: number | null
    bandwidth: number | null
    emailAccounts: number | null
    databases: number | null
    subdomains: number | null
    price: Decimal | null
  }

  export type HostingPackageSumAggregateOutputType = {
    diskSpace: number | null
    bandwidth: number | null
    emailAccounts: number | null
    databases: number | null
    subdomains: number | null
    price: Decimal | null
  }

  export type HostingPackageMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    diskSpace: number | null
    bandwidth: number | null
    emailAccounts: number | null
    databases: number | null
    subdomains: number | null
    price: Decimal | null
    billingCycle: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HostingPackageMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    diskSpace: number | null
    bandwidth: number | null
    emailAccounts: number | null
    databases: number | null
    subdomains: number | null
    price: Decimal | null
    billingCycle: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HostingPackageCountAggregateOutputType = {
    id: number
    name: number
    description: number
    diskSpace: number
    bandwidth: number
    emailAccounts: number
    databases: number
    subdomains: number
    price: number
    billingCycle: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HostingPackageAvgAggregateInputType = {
    diskSpace?: true
    bandwidth?: true
    emailAccounts?: true
    databases?: true
    subdomains?: true
    price?: true
  }

  export type HostingPackageSumAggregateInputType = {
    diskSpace?: true
    bandwidth?: true
    emailAccounts?: true
    databases?: true
    subdomains?: true
    price?: true
  }

  export type HostingPackageMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    diskSpace?: true
    bandwidth?: true
    emailAccounts?: true
    databases?: true
    subdomains?: true
    price?: true
    billingCycle?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HostingPackageMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    diskSpace?: true
    bandwidth?: true
    emailAccounts?: true
    databases?: true
    subdomains?: true
    price?: true
    billingCycle?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HostingPackageCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    diskSpace?: true
    bandwidth?: true
    emailAccounts?: true
    databases?: true
    subdomains?: true
    price?: true
    billingCycle?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HostingPackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostingPackage to aggregate.
     */
    where?: HostingPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingPackages to fetch.
     */
    orderBy?: HostingPackageOrderByWithRelationInput | HostingPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostingPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostingPackages
    **/
    _count?: true | HostingPackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostingPackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostingPackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostingPackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostingPackageMaxAggregateInputType
  }

  export type GetHostingPackageAggregateType<T extends HostingPackageAggregateArgs> = {
        [P in keyof T & keyof AggregateHostingPackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostingPackage[P]>
      : GetScalarType<T[P], AggregateHostingPackage[P]>
  }




  export type HostingPackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostingPackageWhereInput
    orderBy?: HostingPackageOrderByWithAggregationInput | HostingPackageOrderByWithAggregationInput[]
    by: HostingPackageScalarFieldEnum[] | HostingPackageScalarFieldEnum
    having?: HostingPackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostingPackageCountAggregateInputType | true
    _avg?: HostingPackageAvgAggregateInputType
    _sum?: HostingPackageSumAggregateInputType
    _min?: HostingPackageMinAggregateInputType
    _max?: HostingPackageMaxAggregateInputType
  }

  export type HostingPackageGroupByOutputType = {
    id: string
    name: string
    description: string | null
    diskSpace: number
    bandwidth: number
    emailAccounts: number
    databases: number
    subdomains: number
    price: Decimal
    billingCycle: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: HostingPackageCountAggregateOutputType | null
    _avg: HostingPackageAvgAggregateOutputType | null
    _sum: HostingPackageSumAggregateOutputType | null
    _min: HostingPackageMinAggregateOutputType | null
    _max: HostingPackageMaxAggregateOutputType | null
  }

  type GetHostingPackageGroupByPayload<T extends HostingPackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostingPackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostingPackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostingPackageGroupByOutputType[P]>
            : GetScalarType<T[P], HostingPackageGroupByOutputType[P]>
        }
      >
    >


  export type HostingPackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    diskSpace?: boolean
    bandwidth?: boolean
    emailAccounts?: boolean
    databases?: boolean
    subdomains?: boolean
    price?: boolean
    billingCycle?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccounts?: boolean | HostingPackage$hostingAccountsArgs<ExtArgs>
    _count?: boolean | HostingPackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hostingPackage"]>

  export type HostingPackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    diskSpace?: boolean
    bandwidth?: boolean
    emailAccounts?: boolean
    databases?: boolean
    subdomains?: boolean
    price?: boolean
    billingCycle?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hostingPackage"]>

  export type HostingPackageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    diskSpace?: boolean
    bandwidth?: boolean
    emailAccounts?: boolean
    databases?: boolean
    subdomains?: boolean
    price?: boolean
    billingCycle?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hostingPackage"]>

  export type HostingPackageSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    diskSpace?: boolean
    bandwidth?: boolean
    emailAccounts?: boolean
    databases?: boolean
    subdomains?: boolean
    price?: boolean
    billingCycle?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HostingPackageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "diskSpace" | "bandwidth" | "emailAccounts" | "databases" | "subdomains" | "price" | "billingCycle" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["hostingPackage"]>
  export type HostingPackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccounts?: boolean | HostingPackage$hostingAccountsArgs<ExtArgs>
    _count?: boolean | HostingPackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HostingPackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type HostingPackageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HostingPackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostingPackage"
    objects: {
      hostingAccounts: Prisma.$HostingAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      diskSpace: number
      bandwidth: number
      emailAccounts: number
      databases: number
      subdomains: number
      price: Prisma.Decimal
      billingCycle: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["hostingPackage"]>
    composites: {}
  }

  type HostingPackageGetPayload<S extends boolean | null | undefined | HostingPackageDefaultArgs> = $Result.GetResult<Prisma.$HostingPackagePayload, S>

  type HostingPackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HostingPackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HostingPackageCountAggregateInputType | true
    }

  export interface HostingPackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostingPackage'], meta: { name: 'HostingPackage' } }
    /**
     * Find zero or one HostingPackage that matches the filter.
     * @param {HostingPackageFindUniqueArgs} args - Arguments to find a HostingPackage
     * @example
     * // Get one HostingPackage
     * const hostingPackage = await prisma.hostingPackage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostingPackageFindUniqueArgs>(args: SelectSubset<T, HostingPackageFindUniqueArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one HostingPackage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HostingPackageFindUniqueOrThrowArgs} args - Arguments to find a HostingPackage
     * @example
     * // Get one HostingPackage
     * const hostingPackage = await prisma.hostingPackage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostingPackageFindUniqueOrThrowArgs>(args: SelectSubset<T, HostingPackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first HostingPackage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingPackageFindFirstArgs} args - Arguments to find a HostingPackage
     * @example
     * // Get one HostingPackage
     * const hostingPackage = await prisma.hostingPackage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostingPackageFindFirstArgs>(args?: SelectSubset<T, HostingPackageFindFirstArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first HostingPackage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingPackageFindFirstOrThrowArgs} args - Arguments to find a HostingPackage
     * @example
     * // Get one HostingPackage
     * const hostingPackage = await prisma.hostingPackage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostingPackageFindFirstOrThrowArgs>(args?: SelectSubset<T, HostingPackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more HostingPackages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingPackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostingPackages
     * const hostingPackages = await prisma.hostingPackage.findMany()
     * 
     * // Get first 10 HostingPackages
     * const hostingPackages = await prisma.hostingPackage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostingPackageWithIdOnly = await prisma.hostingPackage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostingPackageFindManyArgs>(args?: SelectSubset<T, HostingPackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a HostingPackage.
     * @param {HostingPackageCreateArgs} args - Arguments to create a HostingPackage.
     * @example
     * // Create one HostingPackage
     * const HostingPackage = await prisma.hostingPackage.create({
     *   data: {
     *     // ... data to create a HostingPackage
     *   }
     * })
     * 
     */
    create<T extends HostingPackageCreateArgs>(args: SelectSubset<T, HostingPackageCreateArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many HostingPackages.
     * @param {HostingPackageCreateManyArgs} args - Arguments to create many HostingPackages.
     * @example
     * // Create many HostingPackages
     * const hostingPackage = await prisma.hostingPackage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostingPackageCreateManyArgs>(args?: SelectSubset<T, HostingPackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HostingPackages and returns the data saved in the database.
     * @param {HostingPackageCreateManyAndReturnArgs} args - Arguments to create many HostingPackages.
     * @example
     * // Create many HostingPackages
     * const hostingPackage = await prisma.hostingPackage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HostingPackages and only return the `id`
     * const hostingPackageWithIdOnly = await prisma.hostingPackage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostingPackageCreateManyAndReturnArgs>(args?: SelectSubset<T, HostingPackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a HostingPackage.
     * @param {HostingPackageDeleteArgs} args - Arguments to delete one HostingPackage.
     * @example
     * // Delete one HostingPackage
     * const HostingPackage = await prisma.hostingPackage.delete({
     *   where: {
     *     // ... filter to delete one HostingPackage
     *   }
     * })
     * 
     */
    delete<T extends HostingPackageDeleteArgs>(args: SelectSubset<T, HostingPackageDeleteArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one HostingPackage.
     * @param {HostingPackageUpdateArgs} args - Arguments to update one HostingPackage.
     * @example
     * // Update one HostingPackage
     * const hostingPackage = await prisma.hostingPackage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostingPackageUpdateArgs>(args: SelectSubset<T, HostingPackageUpdateArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more HostingPackages.
     * @param {HostingPackageDeleteManyArgs} args - Arguments to filter HostingPackages to delete.
     * @example
     * // Delete a few HostingPackages
     * const { count } = await prisma.hostingPackage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostingPackageDeleteManyArgs>(args?: SelectSubset<T, HostingPackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostingPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingPackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostingPackages
     * const hostingPackage = await prisma.hostingPackage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostingPackageUpdateManyArgs>(args: SelectSubset<T, HostingPackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostingPackages and returns the data updated in the database.
     * @param {HostingPackageUpdateManyAndReturnArgs} args - Arguments to update many HostingPackages.
     * @example
     * // Update many HostingPackages
     * const hostingPackage = await prisma.hostingPackage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HostingPackages and only return the `id`
     * const hostingPackageWithIdOnly = await prisma.hostingPackage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HostingPackageUpdateManyAndReturnArgs>(args: SelectSubset<T, HostingPackageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one HostingPackage.
     * @param {HostingPackageUpsertArgs} args - Arguments to update or create a HostingPackage.
     * @example
     * // Update or create a HostingPackage
     * const hostingPackage = await prisma.hostingPackage.upsert({
     *   create: {
     *     // ... data to create a HostingPackage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostingPackage we want to update
     *   }
     * })
     */
    upsert<T extends HostingPackageUpsertArgs>(args: SelectSubset<T, HostingPackageUpsertArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of HostingPackages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingPackageCountArgs} args - Arguments to filter HostingPackages to count.
     * @example
     * // Count the number of HostingPackages
     * const count = await prisma.hostingPackage.count({
     *   where: {
     *     // ... the filter for the HostingPackages we want to count
     *   }
     * })
    **/
    count<T extends HostingPackageCountArgs>(
      args?: Subset<T, HostingPackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostingPackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostingPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingPackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostingPackageAggregateArgs>(args: Subset<T, HostingPackageAggregateArgs>): Prisma.PrismaPromise<GetHostingPackageAggregateType<T>>

    /**
     * Group by HostingPackage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingPackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostingPackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostingPackageGroupByArgs['orderBy'] }
        : { orderBy?: HostingPackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostingPackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostingPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostingPackage model
   */
  readonly fields: HostingPackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostingPackage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostingPackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hostingAccounts<T extends HostingPackage$hostingAccountsArgs<ExtArgs> = {}>(args?: Subset<T, HostingPackage$hostingAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HostingPackage model
   */ 
  interface HostingPackageFieldRefs {
    readonly id: FieldRef<"HostingPackage", 'String'>
    readonly name: FieldRef<"HostingPackage", 'String'>
    readonly description: FieldRef<"HostingPackage", 'String'>
    readonly diskSpace: FieldRef<"HostingPackage", 'Int'>
    readonly bandwidth: FieldRef<"HostingPackage", 'Int'>
    readonly emailAccounts: FieldRef<"HostingPackage", 'Int'>
    readonly databases: FieldRef<"HostingPackage", 'Int'>
    readonly subdomains: FieldRef<"HostingPackage", 'Int'>
    readonly price: FieldRef<"HostingPackage", 'Decimal'>
    readonly billingCycle: FieldRef<"HostingPackage", 'String'>
    readonly isActive: FieldRef<"HostingPackage", 'Boolean'>
    readonly createdAt: FieldRef<"HostingPackage", 'DateTime'>
    readonly updatedAt: FieldRef<"HostingPackage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HostingPackage findUnique
   */
  export type HostingPackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * Filter, which HostingPackage to fetch.
     */
    where: HostingPackageWhereUniqueInput
  }

  /**
   * HostingPackage findUniqueOrThrow
   */
  export type HostingPackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * Filter, which HostingPackage to fetch.
     */
    where: HostingPackageWhereUniqueInput
  }

  /**
   * HostingPackage findFirst
   */
  export type HostingPackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * Filter, which HostingPackage to fetch.
     */
    where?: HostingPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingPackages to fetch.
     */
    orderBy?: HostingPackageOrderByWithRelationInput | HostingPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostingPackages.
     */
    cursor?: HostingPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostingPackages.
     */
    distinct?: HostingPackageScalarFieldEnum | HostingPackageScalarFieldEnum[]
  }

  /**
   * HostingPackage findFirstOrThrow
   */
  export type HostingPackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * Filter, which HostingPackage to fetch.
     */
    where?: HostingPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingPackages to fetch.
     */
    orderBy?: HostingPackageOrderByWithRelationInput | HostingPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostingPackages.
     */
    cursor?: HostingPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingPackages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostingPackages.
     */
    distinct?: HostingPackageScalarFieldEnum | HostingPackageScalarFieldEnum[]
  }

  /**
   * HostingPackage findMany
   */
  export type HostingPackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * Filter, which HostingPackages to fetch.
     */
    where?: HostingPackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingPackages to fetch.
     */
    orderBy?: HostingPackageOrderByWithRelationInput | HostingPackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostingPackages.
     */
    cursor?: HostingPackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingPackages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingPackages.
     */
    skip?: number
    distinct?: HostingPackageScalarFieldEnum | HostingPackageScalarFieldEnum[]
  }

  /**
   * HostingPackage create
   */
  export type HostingPackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * The data needed to create a HostingPackage.
     */
    data: XOR<HostingPackageCreateInput, HostingPackageUncheckedCreateInput>
  }

  /**
   * HostingPackage createMany
   */
  export type HostingPackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostingPackages.
     */
    data: HostingPackageCreateManyInput | HostingPackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostingPackage createManyAndReturn
   */
  export type HostingPackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * The data used to create many HostingPackages.
     */
    data: HostingPackageCreateManyInput | HostingPackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostingPackage update
   */
  export type HostingPackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * The data needed to update a HostingPackage.
     */
    data: XOR<HostingPackageUpdateInput, HostingPackageUncheckedUpdateInput>
    /**
     * Choose, which HostingPackage to update.
     */
    where: HostingPackageWhereUniqueInput
  }

  /**
   * HostingPackage updateMany
   */
  export type HostingPackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostingPackages.
     */
    data: XOR<HostingPackageUpdateManyMutationInput, HostingPackageUncheckedUpdateManyInput>
    /**
     * Filter which HostingPackages to update
     */
    where?: HostingPackageWhereInput
    /**
     * Limit how many HostingPackages to update.
     */
    limit?: number
  }

  /**
   * HostingPackage updateManyAndReturn
   */
  export type HostingPackageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * The data used to update HostingPackages.
     */
    data: XOR<HostingPackageUpdateManyMutationInput, HostingPackageUncheckedUpdateManyInput>
    /**
     * Filter which HostingPackages to update
     */
    where?: HostingPackageWhereInput
    /**
     * Limit how many HostingPackages to update.
     */
    limit?: number
  }

  /**
   * HostingPackage upsert
   */
  export type HostingPackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * The filter to search for the HostingPackage to update in case it exists.
     */
    where: HostingPackageWhereUniqueInput
    /**
     * In case the HostingPackage found by the `where` argument doesn't exist, create a new HostingPackage with this data.
     */
    create: XOR<HostingPackageCreateInput, HostingPackageUncheckedCreateInput>
    /**
     * In case the HostingPackage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostingPackageUpdateInput, HostingPackageUncheckedUpdateInput>
  }

  /**
   * HostingPackage delete
   */
  export type HostingPackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
    /**
     * Filter which HostingPackage to delete.
     */
    where: HostingPackageWhereUniqueInput
  }

  /**
   * HostingPackage deleteMany
   */
  export type HostingPackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostingPackages to delete
     */
    where?: HostingPackageWhereInput
    /**
     * Limit how many HostingPackages to delete.
     */
    limit?: number
  }

  /**
   * HostingPackage.hostingAccounts
   */
  export type HostingPackage$hostingAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    where?: HostingAccountWhereInput
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    cursor?: HostingAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HostingAccountScalarFieldEnum | HostingAccountScalarFieldEnum[]
  }

  /**
   * HostingPackage without action
   */
  export type HostingPackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingPackage
     */
    select?: HostingPackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingPackage
     */
    omit?: HostingPackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingPackageInclude<ExtArgs> | null
  }


  /**
   * Model HostingAccount
   */

  export type AggregateHostingAccount = {
    _count: HostingAccountCountAggregateOutputType | null
    _avg: HostingAccountAvgAggregateOutputType | null
    _sum: HostingAccountSumAggregateOutputType | null
    _min: HostingAccountMinAggregateOutputType | null
    _max: HostingAccountMaxAggregateOutputType | null
  }

  export type HostingAccountAvgAggregateOutputType = {
    diskUsage: number | null
    bandwidthUsage: number | null
  }

  export type HostingAccountSumAggregateOutputType = {
    diskUsage: number | null
    bandwidthUsage: number | null
  }

  export type HostingAccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    packageId: string | null
    domainId: string | null
    username: string | null
    password: string | null
    serverIp: string | null
    status: $Enums.HostingStatus | null
    suspensionReason: string | null
    diskUsage: number | null
    bandwidthUsage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    serverId: string | null
  }

  export type HostingAccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    packageId: string | null
    domainId: string | null
    username: string | null
    password: string | null
    serverIp: string | null
    status: $Enums.HostingStatus | null
    suspensionReason: string | null
    diskUsage: number | null
    bandwidthUsage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    serverId: string | null
  }

  export type HostingAccountCountAggregateOutputType = {
    id: number
    userId: number
    packageId: number
    domainId: number
    username: number
    password: number
    serverIp: number
    status: number
    suspensionReason: number
    diskUsage: number
    bandwidthUsage: number
    createdAt: number
    updatedAt: number
    serverId: number
    _all: number
  }


  export type HostingAccountAvgAggregateInputType = {
    diskUsage?: true
    bandwidthUsage?: true
  }

  export type HostingAccountSumAggregateInputType = {
    diskUsage?: true
    bandwidthUsage?: true
  }

  export type HostingAccountMinAggregateInputType = {
    id?: true
    userId?: true
    packageId?: true
    domainId?: true
    username?: true
    password?: true
    serverIp?: true
    status?: true
    suspensionReason?: true
    diskUsage?: true
    bandwidthUsage?: true
    createdAt?: true
    updatedAt?: true
    serverId?: true
  }

  export type HostingAccountMaxAggregateInputType = {
    id?: true
    userId?: true
    packageId?: true
    domainId?: true
    username?: true
    password?: true
    serverIp?: true
    status?: true
    suspensionReason?: true
    diskUsage?: true
    bandwidthUsage?: true
    createdAt?: true
    updatedAt?: true
    serverId?: true
  }

  export type HostingAccountCountAggregateInputType = {
    id?: true
    userId?: true
    packageId?: true
    domainId?: true
    username?: true
    password?: true
    serverIp?: true
    status?: true
    suspensionReason?: true
    diskUsage?: true
    bandwidthUsage?: true
    createdAt?: true
    updatedAt?: true
    serverId?: true
    _all?: true
  }

  export type HostingAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostingAccount to aggregate.
     */
    where?: HostingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingAccounts to fetch.
     */
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HostingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HostingAccounts
    **/
    _count?: true | HostingAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HostingAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HostingAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HostingAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HostingAccountMaxAggregateInputType
  }

  export type GetHostingAccountAggregateType<T extends HostingAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateHostingAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHostingAccount[P]>
      : GetScalarType<T[P], AggregateHostingAccount[P]>
  }




  export type HostingAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HostingAccountWhereInput
    orderBy?: HostingAccountOrderByWithAggregationInput | HostingAccountOrderByWithAggregationInput[]
    by: HostingAccountScalarFieldEnum[] | HostingAccountScalarFieldEnum
    having?: HostingAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HostingAccountCountAggregateInputType | true
    _avg?: HostingAccountAvgAggregateInputType
    _sum?: HostingAccountSumAggregateInputType
    _min?: HostingAccountMinAggregateInputType
    _max?: HostingAccountMaxAggregateInputType
  }

  export type HostingAccountGroupByOutputType = {
    id: string
    userId: string
    packageId: string
    domainId: string | null
    username: string
    password: string
    serverIp: string
    status: $Enums.HostingStatus
    suspensionReason: string | null
    diskUsage: number
    bandwidthUsage: number
    createdAt: Date
    updatedAt: Date
    serverId: string
    _count: HostingAccountCountAggregateOutputType | null
    _avg: HostingAccountAvgAggregateOutputType | null
    _sum: HostingAccountSumAggregateOutputType | null
    _min: HostingAccountMinAggregateOutputType | null
    _max: HostingAccountMaxAggregateOutputType | null
  }

  type GetHostingAccountGroupByPayload<T extends HostingAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HostingAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HostingAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HostingAccountGroupByOutputType[P]>
            : GetScalarType<T[P], HostingAccountGroupByOutputType[P]>
        }
      >
    >


  export type HostingAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    packageId?: boolean
    domainId?: boolean
    username?: boolean
    password?: boolean
    serverIp?: boolean
    status?: boolean
    suspensionReason?: boolean
    diskUsage?: boolean
    bandwidthUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    package?: boolean | HostingPackageDefaultArgs<ExtArgs>
    domain?: boolean | HostingAccount$domainArgs<ExtArgs>
    server?: boolean | ServerDefaultArgs<ExtArgs>
    ftpAccounts?: boolean | HostingAccount$ftpAccountsArgs<ExtArgs>
    databases?: boolean | HostingAccount$databasesArgs<ExtArgs>
    emailAccounts?: boolean | HostingAccount$emailAccountsArgs<ExtArgs>
    _count?: boolean | HostingAccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hostingAccount"]>

  export type HostingAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    packageId?: boolean
    domainId?: boolean
    username?: boolean
    password?: boolean
    serverIp?: boolean
    status?: boolean
    suspensionReason?: boolean
    diskUsage?: boolean
    bandwidthUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    package?: boolean | HostingPackageDefaultArgs<ExtArgs>
    domain?: boolean | HostingAccount$domainArgs<ExtArgs>
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hostingAccount"]>

  export type HostingAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    packageId?: boolean
    domainId?: boolean
    username?: boolean
    password?: boolean
    serverIp?: boolean
    status?: boolean
    suspensionReason?: boolean
    diskUsage?: boolean
    bandwidthUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    package?: boolean | HostingPackageDefaultArgs<ExtArgs>
    domain?: boolean | HostingAccount$domainArgs<ExtArgs>
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hostingAccount"]>

  export type HostingAccountSelectScalar = {
    id?: boolean
    userId?: boolean
    packageId?: boolean
    domainId?: boolean
    username?: boolean
    password?: boolean
    serverIp?: boolean
    status?: boolean
    suspensionReason?: boolean
    diskUsage?: boolean
    bandwidthUsage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serverId?: boolean
  }

  export type HostingAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "packageId" | "domainId" | "username" | "password" | "serverIp" | "status" | "suspensionReason" | "diskUsage" | "bandwidthUsage" | "createdAt" | "updatedAt" | "serverId", ExtArgs["result"]["hostingAccount"]>
  export type HostingAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    package?: boolean | HostingPackageDefaultArgs<ExtArgs>
    domain?: boolean | HostingAccount$domainArgs<ExtArgs>
    server?: boolean | ServerDefaultArgs<ExtArgs>
    ftpAccounts?: boolean | HostingAccount$ftpAccountsArgs<ExtArgs>
    databases?: boolean | HostingAccount$databasesArgs<ExtArgs>
    emailAccounts?: boolean | HostingAccount$emailAccountsArgs<ExtArgs>
    _count?: boolean | HostingAccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HostingAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    package?: boolean | HostingPackageDefaultArgs<ExtArgs>
    domain?: boolean | HostingAccount$domainArgs<ExtArgs>
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }
  export type HostingAccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    package?: boolean | HostingPackageDefaultArgs<ExtArgs>
    domain?: boolean | HostingAccount$domainArgs<ExtArgs>
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }

  export type $HostingAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HostingAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      package: Prisma.$HostingPackagePayload<ExtArgs>
      domain: Prisma.$DomainPayload<ExtArgs> | null
      server: Prisma.$ServerPayload<ExtArgs>
      ftpAccounts: Prisma.$FTPAccountPayload<ExtArgs>[]
      databases: Prisma.$DatabasePayload<ExtArgs>[]
      emailAccounts: Prisma.$EmailAccountPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      packageId: string
      domainId: string | null
      username: string
      password: string
      serverIp: string
      status: $Enums.HostingStatus
      suspensionReason: string | null
      diskUsage: number
      bandwidthUsage: number
      createdAt: Date
      updatedAt: Date
      serverId: string
    }, ExtArgs["result"]["hostingAccount"]>
    composites: {}
  }

  type HostingAccountGetPayload<S extends boolean | null | undefined | HostingAccountDefaultArgs> = $Result.GetResult<Prisma.$HostingAccountPayload, S>

  type HostingAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HostingAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HostingAccountCountAggregateInputType | true
    }

  export interface HostingAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HostingAccount'], meta: { name: 'HostingAccount' } }
    /**
     * Find zero or one HostingAccount that matches the filter.
     * @param {HostingAccountFindUniqueArgs} args - Arguments to find a HostingAccount
     * @example
     * // Get one HostingAccount
     * const hostingAccount = await prisma.hostingAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HostingAccountFindUniqueArgs>(args: SelectSubset<T, HostingAccountFindUniqueArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one HostingAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HostingAccountFindUniqueOrThrowArgs} args - Arguments to find a HostingAccount
     * @example
     * // Get one HostingAccount
     * const hostingAccount = await prisma.hostingAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HostingAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, HostingAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first HostingAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingAccountFindFirstArgs} args - Arguments to find a HostingAccount
     * @example
     * // Get one HostingAccount
     * const hostingAccount = await prisma.hostingAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HostingAccountFindFirstArgs>(args?: SelectSubset<T, HostingAccountFindFirstArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first HostingAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingAccountFindFirstOrThrowArgs} args - Arguments to find a HostingAccount
     * @example
     * // Get one HostingAccount
     * const hostingAccount = await prisma.hostingAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HostingAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, HostingAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more HostingAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HostingAccounts
     * const hostingAccounts = await prisma.hostingAccount.findMany()
     * 
     * // Get first 10 HostingAccounts
     * const hostingAccounts = await prisma.hostingAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hostingAccountWithIdOnly = await prisma.hostingAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HostingAccountFindManyArgs>(args?: SelectSubset<T, HostingAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a HostingAccount.
     * @param {HostingAccountCreateArgs} args - Arguments to create a HostingAccount.
     * @example
     * // Create one HostingAccount
     * const HostingAccount = await prisma.hostingAccount.create({
     *   data: {
     *     // ... data to create a HostingAccount
     *   }
     * })
     * 
     */
    create<T extends HostingAccountCreateArgs>(args: SelectSubset<T, HostingAccountCreateArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many HostingAccounts.
     * @param {HostingAccountCreateManyArgs} args - Arguments to create many HostingAccounts.
     * @example
     * // Create many HostingAccounts
     * const hostingAccount = await prisma.hostingAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HostingAccountCreateManyArgs>(args?: SelectSubset<T, HostingAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HostingAccounts and returns the data saved in the database.
     * @param {HostingAccountCreateManyAndReturnArgs} args - Arguments to create many HostingAccounts.
     * @example
     * // Create many HostingAccounts
     * const hostingAccount = await prisma.hostingAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HostingAccounts and only return the `id`
     * const hostingAccountWithIdOnly = await prisma.hostingAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HostingAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, HostingAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a HostingAccount.
     * @param {HostingAccountDeleteArgs} args - Arguments to delete one HostingAccount.
     * @example
     * // Delete one HostingAccount
     * const HostingAccount = await prisma.hostingAccount.delete({
     *   where: {
     *     // ... filter to delete one HostingAccount
     *   }
     * })
     * 
     */
    delete<T extends HostingAccountDeleteArgs>(args: SelectSubset<T, HostingAccountDeleteArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one HostingAccount.
     * @param {HostingAccountUpdateArgs} args - Arguments to update one HostingAccount.
     * @example
     * // Update one HostingAccount
     * const hostingAccount = await prisma.hostingAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HostingAccountUpdateArgs>(args: SelectSubset<T, HostingAccountUpdateArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more HostingAccounts.
     * @param {HostingAccountDeleteManyArgs} args - Arguments to filter HostingAccounts to delete.
     * @example
     * // Delete a few HostingAccounts
     * const { count } = await prisma.hostingAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HostingAccountDeleteManyArgs>(args?: SelectSubset<T, HostingAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostingAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HostingAccounts
     * const hostingAccount = await prisma.hostingAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HostingAccountUpdateManyArgs>(args: SelectSubset<T, HostingAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HostingAccounts and returns the data updated in the database.
     * @param {HostingAccountUpdateManyAndReturnArgs} args - Arguments to update many HostingAccounts.
     * @example
     * // Update many HostingAccounts
     * const hostingAccount = await prisma.hostingAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HostingAccounts and only return the `id`
     * const hostingAccountWithIdOnly = await prisma.hostingAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HostingAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, HostingAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one HostingAccount.
     * @param {HostingAccountUpsertArgs} args - Arguments to update or create a HostingAccount.
     * @example
     * // Update or create a HostingAccount
     * const hostingAccount = await prisma.hostingAccount.upsert({
     *   create: {
     *     // ... data to create a HostingAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HostingAccount we want to update
     *   }
     * })
     */
    upsert<T extends HostingAccountUpsertArgs>(args: SelectSubset<T, HostingAccountUpsertArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of HostingAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingAccountCountArgs} args - Arguments to filter HostingAccounts to count.
     * @example
     * // Count the number of HostingAccounts
     * const count = await prisma.hostingAccount.count({
     *   where: {
     *     // ... the filter for the HostingAccounts we want to count
     *   }
     * })
    **/
    count<T extends HostingAccountCountArgs>(
      args?: Subset<T, HostingAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HostingAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HostingAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HostingAccountAggregateArgs>(args: Subset<T, HostingAccountAggregateArgs>): Prisma.PrismaPromise<GetHostingAccountAggregateType<T>>

    /**
     * Group by HostingAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HostingAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HostingAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HostingAccountGroupByArgs['orderBy'] }
        : { orderBy?: HostingAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HostingAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHostingAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HostingAccount model
   */
  readonly fields: HostingAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HostingAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HostingAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    package<T extends HostingPackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostingPackageDefaultArgs<ExtArgs>>): Prisma__HostingPackageClient<$Result.GetResult<Prisma.$HostingPackagePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    domain<T extends HostingAccount$domainArgs<ExtArgs> = {}>(args?: Subset<T, HostingAccount$domainArgs<ExtArgs>>): Prisma__DomainClient<$Result.GetResult<Prisma.$DomainPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    server<T extends ServerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServerDefaultArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    ftpAccounts<T extends HostingAccount$ftpAccountsArgs<ExtArgs> = {}>(args?: Subset<T, HostingAccount$ftpAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    databases<T extends HostingAccount$databasesArgs<ExtArgs> = {}>(args?: Subset<T, HostingAccount$databasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    emailAccounts<T extends HostingAccount$emailAccountsArgs<ExtArgs> = {}>(args?: Subset<T, HostingAccount$emailAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HostingAccount model
   */ 
  interface HostingAccountFieldRefs {
    readonly id: FieldRef<"HostingAccount", 'String'>
    readonly userId: FieldRef<"HostingAccount", 'String'>
    readonly packageId: FieldRef<"HostingAccount", 'String'>
    readonly domainId: FieldRef<"HostingAccount", 'String'>
    readonly username: FieldRef<"HostingAccount", 'String'>
    readonly password: FieldRef<"HostingAccount", 'String'>
    readonly serverIp: FieldRef<"HostingAccount", 'String'>
    readonly status: FieldRef<"HostingAccount", 'HostingStatus'>
    readonly suspensionReason: FieldRef<"HostingAccount", 'String'>
    readonly diskUsage: FieldRef<"HostingAccount", 'Int'>
    readonly bandwidthUsage: FieldRef<"HostingAccount", 'Int'>
    readonly createdAt: FieldRef<"HostingAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"HostingAccount", 'DateTime'>
    readonly serverId: FieldRef<"HostingAccount", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HostingAccount findUnique
   */
  export type HostingAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * Filter, which HostingAccount to fetch.
     */
    where: HostingAccountWhereUniqueInput
  }

  /**
   * HostingAccount findUniqueOrThrow
   */
  export type HostingAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * Filter, which HostingAccount to fetch.
     */
    where: HostingAccountWhereUniqueInput
  }

  /**
   * HostingAccount findFirst
   */
  export type HostingAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * Filter, which HostingAccount to fetch.
     */
    where?: HostingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingAccounts to fetch.
     */
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostingAccounts.
     */
    cursor?: HostingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostingAccounts.
     */
    distinct?: HostingAccountScalarFieldEnum | HostingAccountScalarFieldEnum[]
  }

  /**
   * HostingAccount findFirstOrThrow
   */
  export type HostingAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * Filter, which HostingAccount to fetch.
     */
    where?: HostingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingAccounts to fetch.
     */
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HostingAccounts.
     */
    cursor?: HostingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HostingAccounts.
     */
    distinct?: HostingAccountScalarFieldEnum | HostingAccountScalarFieldEnum[]
  }

  /**
   * HostingAccount findMany
   */
  export type HostingAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * Filter, which HostingAccounts to fetch.
     */
    where?: HostingAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HostingAccounts to fetch.
     */
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HostingAccounts.
     */
    cursor?: HostingAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HostingAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HostingAccounts.
     */
    skip?: number
    distinct?: HostingAccountScalarFieldEnum | HostingAccountScalarFieldEnum[]
  }

  /**
   * HostingAccount create
   */
  export type HostingAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a HostingAccount.
     */
    data: XOR<HostingAccountCreateInput, HostingAccountUncheckedCreateInput>
  }

  /**
   * HostingAccount createMany
   */
  export type HostingAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HostingAccounts.
     */
    data: HostingAccountCreateManyInput | HostingAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HostingAccount createManyAndReturn
   */
  export type HostingAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * The data used to create many HostingAccounts.
     */
    data: HostingAccountCreateManyInput | HostingAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HostingAccount update
   */
  export type HostingAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a HostingAccount.
     */
    data: XOR<HostingAccountUpdateInput, HostingAccountUncheckedUpdateInput>
    /**
     * Choose, which HostingAccount to update.
     */
    where: HostingAccountWhereUniqueInput
  }

  /**
   * HostingAccount updateMany
   */
  export type HostingAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HostingAccounts.
     */
    data: XOR<HostingAccountUpdateManyMutationInput, HostingAccountUncheckedUpdateManyInput>
    /**
     * Filter which HostingAccounts to update
     */
    where?: HostingAccountWhereInput
    /**
     * Limit how many HostingAccounts to update.
     */
    limit?: number
  }

  /**
   * HostingAccount updateManyAndReturn
   */
  export type HostingAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * The data used to update HostingAccounts.
     */
    data: XOR<HostingAccountUpdateManyMutationInput, HostingAccountUncheckedUpdateManyInput>
    /**
     * Filter which HostingAccounts to update
     */
    where?: HostingAccountWhereInput
    /**
     * Limit how many HostingAccounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HostingAccount upsert
   */
  export type HostingAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the HostingAccount to update in case it exists.
     */
    where: HostingAccountWhereUniqueInput
    /**
     * In case the HostingAccount found by the `where` argument doesn't exist, create a new HostingAccount with this data.
     */
    create: XOR<HostingAccountCreateInput, HostingAccountUncheckedCreateInput>
    /**
     * In case the HostingAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HostingAccountUpdateInput, HostingAccountUncheckedUpdateInput>
  }

  /**
   * HostingAccount delete
   */
  export type HostingAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    /**
     * Filter which HostingAccount to delete.
     */
    where: HostingAccountWhereUniqueInput
  }

  /**
   * HostingAccount deleteMany
   */
  export type HostingAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HostingAccounts to delete
     */
    where?: HostingAccountWhereInput
    /**
     * Limit how many HostingAccounts to delete.
     */
    limit?: number
  }

  /**
   * HostingAccount.domain
   */
  export type HostingAccount$domainArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Domain
     */
    select?: DomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Domain
     */
    omit?: DomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DomainInclude<ExtArgs> | null
    where?: DomainWhereInput
  }

  /**
   * HostingAccount.ftpAccounts
   */
  export type HostingAccount$ftpAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    where?: FTPAccountWhereInput
    orderBy?: FTPAccountOrderByWithRelationInput | FTPAccountOrderByWithRelationInput[]
    cursor?: FTPAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FTPAccountScalarFieldEnum | FTPAccountScalarFieldEnum[]
  }

  /**
   * HostingAccount.databases
   */
  export type HostingAccount$databasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    where?: DatabaseWhereInput
    orderBy?: DatabaseOrderByWithRelationInput | DatabaseOrderByWithRelationInput[]
    cursor?: DatabaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DatabaseScalarFieldEnum | DatabaseScalarFieldEnum[]
  }

  /**
   * HostingAccount.emailAccounts
   */
  export type HostingAccount$emailAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    where?: EmailAccountWhereInput
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    cursor?: EmailAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailAccountScalarFieldEnum | EmailAccountScalarFieldEnum[]
  }

  /**
   * HostingAccount without action
   */
  export type HostingAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
  }


  /**
   * Model Server
   */

  export type AggregateServer = {
    _count: ServerCountAggregateOutputType | null
    _avg: ServerAvgAggregateOutputType | null
    _sum: ServerSumAggregateOutputType | null
    _min: ServerMinAggregateOutputType | null
    _max: ServerMaxAggregateOutputType | null
  }

  export type ServerAvgAggregateOutputType = {
    totalDiskSpace: number | null
    usedDiskSpace: number | null
    totalBandwidth: number | null
    usedBandwidth: number | null
    cpuCores: number | null
    ram: number | null
  }

  export type ServerSumAggregateOutputType = {
    totalDiskSpace: number | null
    usedDiskSpace: number | null
    totalBandwidth: number | null
    usedBandwidth: number | null
    cpuCores: number | null
    ram: number | null
  }

  export type ServerMinAggregateOutputType = {
    id: string | null
    name: string | null
    ipAddress: string | null
    type: $Enums.ServerType | null
    location: string | null
    status: $Enums.ServerStatus | null
    operatingSystem: string | null
    totalDiskSpace: number | null
    usedDiskSpace: number | null
    totalBandwidth: number | null
    usedBandwidth: number | null
    cpuCores: number | null
    ram: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    ipAddress: string | null
    type: $Enums.ServerType | null
    location: string | null
    status: $Enums.ServerStatus | null
    operatingSystem: string | null
    totalDiskSpace: number | null
    usedDiskSpace: number | null
    totalBandwidth: number | null
    usedBandwidth: number | null
    cpuCores: number | null
    ram: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServerCountAggregateOutputType = {
    id: number
    name: number
    ipAddress: number
    type: number
    location: number
    status: number
    operatingSystem: number
    totalDiskSpace: number
    usedDiskSpace: number
    totalBandwidth: number
    usedBandwidth: number
    cpuCores: number
    ram: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServerAvgAggregateInputType = {
    totalDiskSpace?: true
    usedDiskSpace?: true
    totalBandwidth?: true
    usedBandwidth?: true
    cpuCores?: true
    ram?: true
  }

  export type ServerSumAggregateInputType = {
    totalDiskSpace?: true
    usedDiskSpace?: true
    totalBandwidth?: true
    usedBandwidth?: true
    cpuCores?: true
    ram?: true
  }

  export type ServerMinAggregateInputType = {
    id?: true
    name?: true
    ipAddress?: true
    type?: true
    location?: true
    status?: true
    operatingSystem?: true
    totalDiskSpace?: true
    usedDiskSpace?: true
    totalBandwidth?: true
    usedBandwidth?: true
    cpuCores?: true
    ram?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServerMaxAggregateInputType = {
    id?: true
    name?: true
    ipAddress?: true
    type?: true
    location?: true
    status?: true
    operatingSystem?: true
    totalDiskSpace?: true
    usedDiskSpace?: true
    totalBandwidth?: true
    usedBandwidth?: true
    cpuCores?: true
    ram?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServerCountAggregateInputType = {
    id?: true
    name?: true
    ipAddress?: true
    type?: true
    location?: true
    status?: true
    operatingSystem?: true
    totalDiskSpace?: true
    usedDiskSpace?: true
    totalBandwidth?: true
    usedBandwidth?: true
    cpuCores?: true
    ram?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Server to aggregate.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Servers
    **/
    _count?: true | ServerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServerMaxAggregateInputType
  }

  export type GetServerAggregateType<T extends ServerAggregateArgs> = {
        [P in keyof T & keyof AggregateServer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServer[P]>
      : GetScalarType<T[P], AggregateServer[P]>
  }




  export type ServerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServerWhereInput
    orderBy?: ServerOrderByWithAggregationInput | ServerOrderByWithAggregationInput[]
    by: ServerScalarFieldEnum[] | ServerScalarFieldEnum
    having?: ServerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServerCountAggregateInputType | true
    _avg?: ServerAvgAggregateInputType
    _sum?: ServerSumAggregateInputType
    _min?: ServerMinAggregateInputType
    _max?: ServerMaxAggregateInputType
  }

  export type ServerGroupByOutputType = {
    id: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace: number
    totalBandwidth: number
    usedBandwidth: number
    cpuCores: number
    ram: number
    createdAt: Date
    updatedAt: Date
    _count: ServerCountAggregateOutputType | null
    _avg: ServerAvgAggregateOutputType | null
    _sum: ServerSumAggregateOutputType | null
    _min: ServerMinAggregateOutputType | null
    _max: ServerMaxAggregateOutputType | null
  }

  type GetServerGroupByPayload<T extends ServerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServerGroupByOutputType[P]>
            : GetScalarType<T[P], ServerGroupByOutputType[P]>
        }
      >
    >


  export type ServerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ipAddress?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    operatingSystem?: boolean
    totalDiskSpace?: boolean
    usedDiskSpace?: boolean
    totalBandwidth?: boolean
    usedBandwidth?: boolean
    cpuCores?: boolean
    ram?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccounts?: boolean | Server$hostingAccountsArgs<ExtArgs>
    maintenanceLogs?: boolean | Server$maintenanceLogsArgs<ExtArgs>
    _count?: boolean | ServerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["server"]>

  export type ServerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ipAddress?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    operatingSystem?: boolean
    totalDiskSpace?: boolean
    usedDiskSpace?: boolean
    totalBandwidth?: boolean
    usedBandwidth?: boolean
    cpuCores?: boolean
    ram?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["server"]>

  export type ServerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    ipAddress?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    operatingSystem?: boolean
    totalDiskSpace?: boolean
    usedDiskSpace?: boolean
    totalBandwidth?: boolean
    usedBandwidth?: boolean
    cpuCores?: boolean
    ram?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["server"]>

  export type ServerSelectScalar = {
    id?: boolean
    name?: boolean
    ipAddress?: boolean
    type?: boolean
    location?: boolean
    status?: boolean
    operatingSystem?: boolean
    totalDiskSpace?: boolean
    usedDiskSpace?: boolean
    totalBandwidth?: boolean
    usedBandwidth?: boolean
    cpuCores?: boolean
    ram?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "ipAddress" | "type" | "location" | "status" | "operatingSystem" | "totalDiskSpace" | "usedDiskSpace" | "totalBandwidth" | "usedBandwidth" | "cpuCores" | "ram" | "createdAt" | "updatedAt", ExtArgs["result"]["server"]>
  export type ServerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccounts?: boolean | Server$hostingAccountsArgs<ExtArgs>
    maintenanceLogs?: boolean | Server$maintenanceLogsArgs<ExtArgs>
    _count?: boolean | ServerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ServerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ServerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Server"
    objects: {
      hostingAccounts: Prisma.$HostingAccountPayload<ExtArgs>[]
      maintenanceLogs: Prisma.$MaintenanceLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      ipAddress: string
      type: $Enums.ServerType
      location: string
      status: $Enums.ServerStatus
      operatingSystem: string
      totalDiskSpace: number
      usedDiskSpace: number
      totalBandwidth: number
      usedBandwidth: number
      cpuCores: number
      ram: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["server"]>
    composites: {}
  }

  type ServerGetPayload<S extends boolean | null | undefined | ServerDefaultArgs> = $Result.GetResult<Prisma.$ServerPayload, S>

  type ServerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServerCountAggregateInputType | true
    }

  export interface ServerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Server'], meta: { name: 'Server' } }
    /**
     * Find zero or one Server that matches the filter.
     * @param {ServerFindUniqueArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServerFindUniqueArgs>(args: SelectSubset<T, ServerFindUniqueArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Server that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServerFindUniqueOrThrowArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServerFindUniqueOrThrowArgs>(args: SelectSubset<T, ServerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Server that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerFindFirstArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServerFindFirstArgs>(args?: SelectSubset<T, ServerFindFirstArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Server that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerFindFirstOrThrowArgs} args - Arguments to find a Server
     * @example
     * // Get one Server
     * const server = await prisma.server.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServerFindFirstOrThrowArgs>(args?: SelectSubset<T, ServerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Servers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Servers
     * const servers = await prisma.server.findMany()
     * 
     * // Get first 10 Servers
     * const servers = await prisma.server.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serverWithIdOnly = await prisma.server.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServerFindManyArgs>(args?: SelectSubset<T, ServerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Server.
     * @param {ServerCreateArgs} args - Arguments to create a Server.
     * @example
     * // Create one Server
     * const Server = await prisma.server.create({
     *   data: {
     *     // ... data to create a Server
     *   }
     * })
     * 
     */
    create<T extends ServerCreateArgs>(args: SelectSubset<T, ServerCreateArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Servers.
     * @param {ServerCreateManyArgs} args - Arguments to create many Servers.
     * @example
     * // Create many Servers
     * const server = await prisma.server.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServerCreateManyArgs>(args?: SelectSubset<T, ServerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Servers and returns the data saved in the database.
     * @param {ServerCreateManyAndReturnArgs} args - Arguments to create many Servers.
     * @example
     * // Create many Servers
     * const server = await prisma.server.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Servers and only return the `id`
     * const serverWithIdOnly = await prisma.server.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServerCreateManyAndReturnArgs>(args?: SelectSubset<T, ServerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Server.
     * @param {ServerDeleteArgs} args - Arguments to delete one Server.
     * @example
     * // Delete one Server
     * const Server = await prisma.server.delete({
     *   where: {
     *     // ... filter to delete one Server
     *   }
     * })
     * 
     */
    delete<T extends ServerDeleteArgs>(args: SelectSubset<T, ServerDeleteArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Server.
     * @param {ServerUpdateArgs} args - Arguments to update one Server.
     * @example
     * // Update one Server
     * const server = await prisma.server.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServerUpdateArgs>(args: SelectSubset<T, ServerUpdateArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Servers.
     * @param {ServerDeleteManyArgs} args - Arguments to filter Servers to delete.
     * @example
     * // Delete a few Servers
     * const { count } = await prisma.server.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServerDeleteManyArgs>(args?: SelectSubset<T, ServerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Servers
     * const server = await prisma.server.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServerUpdateManyArgs>(args: SelectSubset<T, ServerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Servers and returns the data updated in the database.
     * @param {ServerUpdateManyAndReturnArgs} args - Arguments to update many Servers.
     * @example
     * // Update many Servers
     * const server = await prisma.server.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Servers and only return the `id`
     * const serverWithIdOnly = await prisma.server.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServerUpdateManyAndReturnArgs>(args: SelectSubset<T, ServerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Server.
     * @param {ServerUpsertArgs} args - Arguments to update or create a Server.
     * @example
     * // Update or create a Server
     * const server = await prisma.server.upsert({
     *   create: {
     *     // ... data to create a Server
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Server we want to update
     *   }
     * })
     */
    upsert<T extends ServerUpsertArgs>(args: SelectSubset<T, ServerUpsertArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Servers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerCountArgs} args - Arguments to filter Servers to count.
     * @example
     * // Count the number of Servers
     * const count = await prisma.server.count({
     *   where: {
     *     // ... the filter for the Servers we want to count
     *   }
     * })
    **/
    count<T extends ServerCountArgs>(
      args?: Subset<T, ServerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Server.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServerAggregateArgs>(args: Subset<T, ServerAggregateArgs>): Prisma.PrismaPromise<GetServerAggregateType<T>>

    /**
     * Group by Server.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServerGroupByArgs['orderBy'] }
        : { orderBy?: ServerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Server model
   */
  readonly fields: ServerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Server.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hostingAccounts<T extends Server$hostingAccountsArgs<ExtArgs> = {}>(args?: Subset<T, Server$hostingAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    maintenanceLogs<T extends Server$maintenanceLogsArgs<ExtArgs> = {}>(args?: Subset<T, Server$maintenanceLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Server model
   */ 
  interface ServerFieldRefs {
    readonly id: FieldRef<"Server", 'String'>
    readonly name: FieldRef<"Server", 'String'>
    readonly ipAddress: FieldRef<"Server", 'String'>
    readonly type: FieldRef<"Server", 'ServerType'>
    readonly location: FieldRef<"Server", 'String'>
    readonly status: FieldRef<"Server", 'ServerStatus'>
    readonly operatingSystem: FieldRef<"Server", 'String'>
    readonly totalDiskSpace: FieldRef<"Server", 'Int'>
    readonly usedDiskSpace: FieldRef<"Server", 'Int'>
    readonly totalBandwidth: FieldRef<"Server", 'Int'>
    readonly usedBandwidth: FieldRef<"Server", 'Int'>
    readonly cpuCores: FieldRef<"Server", 'Int'>
    readonly ram: FieldRef<"Server", 'Int'>
    readonly createdAt: FieldRef<"Server", 'DateTime'>
    readonly updatedAt: FieldRef<"Server", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Server findUnique
   */
  export type ServerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server findUniqueOrThrow
   */
  export type ServerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server findFirst
   */
  export type ServerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servers.
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servers.
     */
    distinct?: ServerScalarFieldEnum | ServerScalarFieldEnum[]
  }

  /**
   * Server findFirstOrThrow
   */
  export type ServerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * Filter, which Server to fetch.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Servers.
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Servers.
     */
    distinct?: ServerScalarFieldEnum | ServerScalarFieldEnum[]
  }

  /**
   * Server findMany
   */
  export type ServerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * Filter, which Servers to fetch.
     */
    where?: ServerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Servers to fetch.
     */
    orderBy?: ServerOrderByWithRelationInput | ServerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Servers.
     */
    cursor?: ServerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Servers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Servers.
     */
    skip?: number
    distinct?: ServerScalarFieldEnum | ServerScalarFieldEnum[]
  }

  /**
   * Server create
   */
  export type ServerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * The data needed to create a Server.
     */
    data: XOR<ServerCreateInput, ServerUncheckedCreateInput>
  }

  /**
   * Server createMany
   */
  export type ServerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Servers.
     */
    data: ServerCreateManyInput | ServerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Server createManyAndReturn
   */
  export type ServerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * The data used to create many Servers.
     */
    data: ServerCreateManyInput | ServerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Server update
   */
  export type ServerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * The data needed to update a Server.
     */
    data: XOR<ServerUpdateInput, ServerUncheckedUpdateInput>
    /**
     * Choose, which Server to update.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server updateMany
   */
  export type ServerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Servers.
     */
    data: XOR<ServerUpdateManyMutationInput, ServerUncheckedUpdateManyInput>
    /**
     * Filter which Servers to update
     */
    where?: ServerWhereInput
    /**
     * Limit how many Servers to update.
     */
    limit?: number
  }

  /**
   * Server updateManyAndReturn
   */
  export type ServerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * The data used to update Servers.
     */
    data: XOR<ServerUpdateManyMutationInput, ServerUncheckedUpdateManyInput>
    /**
     * Filter which Servers to update
     */
    where?: ServerWhereInput
    /**
     * Limit how many Servers to update.
     */
    limit?: number
  }

  /**
   * Server upsert
   */
  export type ServerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * The filter to search for the Server to update in case it exists.
     */
    where: ServerWhereUniqueInput
    /**
     * In case the Server found by the `where` argument doesn't exist, create a new Server with this data.
     */
    create: XOR<ServerCreateInput, ServerUncheckedCreateInput>
    /**
     * In case the Server was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServerUpdateInput, ServerUncheckedUpdateInput>
  }

  /**
   * Server delete
   */
  export type ServerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
    /**
     * Filter which Server to delete.
     */
    where: ServerWhereUniqueInput
  }

  /**
   * Server deleteMany
   */
  export type ServerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Servers to delete
     */
    where?: ServerWhereInput
    /**
     * Limit how many Servers to delete.
     */
    limit?: number
  }

  /**
   * Server.hostingAccounts
   */
  export type Server$hostingAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HostingAccount
     */
    select?: HostingAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HostingAccount
     */
    omit?: HostingAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HostingAccountInclude<ExtArgs> | null
    where?: HostingAccountWhereInput
    orderBy?: HostingAccountOrderByWithRelationInput | HostingAccountOrderByWithRelationInput[]
    cursor?: HostingAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HostingAccountScalarFieldEnum | HostingAccountScalarFieldEnum[]
  }

  /**
   * Server.maintenanceLogs
   */
  export type Server$maintenanceLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    where?: MaintenanceLogWhereInput
    orderBy?: MaintenanceLogOrderByWithRelationInput | MaintenanceLogOrderByWithRelationInput[]
    cursor?: MaintenanceLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaintenanceLogScalarFieldEnum | MaintenanceLogScalarFieldEnum[]
  }

  /**
   * Server without action
   */
  export type ServerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Server
     */
    select?: ServerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Server
     */
    omit?: ServerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServerInclude<ExtArgs> | null
  }


  /**
   * Model FTPAccount
   */

  export type AggregateFTPAccount = {
    _count: FTPAccountCountAggregateOutputType | null
    _min: FTPAccountMinAggregateOutputType | null
    _max: FTPAccountMaxAggregateOutputType | null
  }

  export type FTPAccountMinAggregateOutputType = {
    id: string | null
    hostingAccountId: string | null
    username: string | null
    password: string | null
    directory: string | null
    permissions: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FTPAccountMaxAggregateOutputType = {
    id: string | null
    hostingAccountId: string | null
    username: string | null
    password: string | null
    directory: string | null
    permissions: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FTPAccountCountAggregateOutputType = {
    id: number
    hostingAccountId: number
    username: number
    password: number
    directory: number
    permissions: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FTPAccountMinAggregateInputType = {
    id?: true
    hostingAccountId?: true
    username?: true
    password?: true
    directory?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FTPAccountMaxAggregateInputType = {
    id?: true
    hostingAccountId?: true
    username?: true
    password?: true
    directory?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FTPAccountCountAggregateInputType = {
    id?: true
    hostingAccountId?: true
    username?: true
    password?: true
    directory?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FTPAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FTPAccount to aggregate.
     */
    where?: FTPAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FTPAccounts to fetch.
     */
    orderBy?: FTPAccountOrderByWithRelationInput | FTPAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FTPAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FTPAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FTPAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FTPAccounts
    **/
    _count?: true | FTPAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FTPAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FTPAccountMaxAggregateInputType
  }

  export type GetFTPAccountAggregateType<T extends FTPAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateFTPAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFTPAccount[P]>
      : GetScalarType<T[P], AggregateFTPAccount[P]>
  }




  export type FTPAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FTPAccountWhereInput
    orderBy?: FTPAccountOrderByWithAggregationInput | FTPAccountOrderByWithAggregationInput[]
    by: FTPAccountScalarFieldEnum[] | FTPAccountScalarFieldEnum
    having?: FTPAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FTPAccountCountAggregateInputType | true
    _min?: FTPAccountMinAggregateInputType
    _max?: FTPAccountMaxAggregateInputType
  }

  export type FTPAccountGroupByOutputType = {
    id: string
    hostingAccountId: string
    username: string
    password: string
    directory: string
    permissions: string
    createdAt: Date
    updatedAt: Date
    _count: FTPAccountCountAggregateOutputType | null
    _min: FTPAccountMinAggregateOutputType | null
    _max: FTPAccountMaxAggregateOutputType | null
  }

  type GetFTPAccountGroupByPayload<T extends FTPAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FTPAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FTPAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FTPAccountGroupByOutputType[P]>
            : GetScalarType<T[P], FTPAccountGroupByOutputType[P]>
        }
      >
    >


  export type FTPAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    username?: boolean
    password?: boolean
    directory?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fTPAccount"]>

  export type FTPAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    username?: boolean
    password?: boolean
    directory?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fTPAccount"]>

  export type FTPAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    username?: boolean
    password?: boolean
    directory?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fTPAccount"]>

  export type FTPAccountSelectScalar = {
    id?: boolean
    hostingAccountId?: boolean
    username?: boolean
    password?: boolean
    directory?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FTPAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hostingAccountId" | "username" | "password" | "directory" | "permissions" | "createdAt" | "updatedAt", ExtArgs["result"]["fTPAccount"]>
  export type FTPAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }
  export type FTPAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }
  export type FTPAccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }

  export type $FTPAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FTPAccount"
    objects: {
      hostingAccount: Prisma.$HostingAccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hostingAccountId: string
      username: string
      password: string
      directory: string
      permissions: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fTPAccount"]>
    composites: {}
  }

  type FTPAccountGetPayload<S extends boolean | null | undefined | FTPAccountDefaultArgs> = $Result.GetResult<Prisma.$FTPAccountPayload, S>

  type FTPAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FTPAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FTPAccountCountAggregateInputType | true
    }

  export interface FTPAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FTPAccount'], meta: { name: 'FTPAccount' } }
    /**
     * Find zero or one FTPAccount that matches the filter.
     * @param {FTPAccountFindUniqueArgs} args - Arguments to find a FTPAccount
     * @example
     * // Get one FTPAccount
     * const fTPAccount = await prisma.fTPAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FTPAccountFindUniqueArgs>(args: SelectSubset<T, FTPAccountFindUniqueArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one FTPAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FTPAccountFindUniqueOrThrowArgs} args - Arguments to find a FTPAccount
     * @example
     * // Get one FTPAccount
     * const fTPAccount = await prisma.fTPAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FTPAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, FTPAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first FTPAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FTPAccountFindFirstArgs} args - Arguments to find a FTPAccount
     * @example
     * // Get one FTPAccount
     * const fTPAccount = await prisma.fTPAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FTPAccountFindFirstArgs>(args?: SelectSubset<T, FTPAccountFindFirstArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first FTPAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FTPAccountFindFirstOrThrowArgs} args - Arguments to find a FTPAccount
     * @example
     * // Get one FTPAccount
     * const fTPAccount = await prisma.fTPAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FTPAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, FTPAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more FTPAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FTPAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FTPAccounts
     * const fTPAccounts = await prisma.fTPAccount.findMany()
     * 
     * // Get first 10 FTPAccounts
     * const fTPAccounts = await prisma.fTPAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fTPAccountWithIdOnly = await prisma.fTPAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FTPAccountFindManyArgs>(args?: SelectSubset<T, FTPAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a FTPAccount.
     * @param {FTPAccountCreateArgs} args - Arguments to create a FTPAccount.
     * @example
     * // Create one FTPAccount
     * const FTPAccount = await prisma.fTPAccount.create({
     *   data: {
     *     // ... data to create a FTPAccount
     *   }
     * })
     * 
     */
    create<T extends FTPAccountCreateArgs>(args: SelectSubset<T, FTPAccountCreateArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many FTPAccounts.
     * @param {FTPAccountCreateManyArgs} args - Arguments to create many FTPAccounts.
     * @example
     * // Create many FTPAccounts
     * const fTPAccount = await prisma.fTPAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FTPAccountCreateManyArgs>(args?: SelectSubset<T, FTPAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FTPAccounts and returns the data saved in the database.
     * @param {FTPAccountCreateManyAndReturnArgs} args - Arguments to create many FTPAccounts.
     * @example
     * // Create many FTPAccounts
     * const fTPAccount = await prisma.fTPAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FTPAccounts and only return the `id`
     * const fTPAccountWithIdOnly = await prisma.fTPAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FTPAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, FTPAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a FTPAccount.
     * @param {FTPAccountDeleteArgs} args - Arguments to delete one FTPAccount.
     * @example
     * // Delete one FTPAccount
     * const FTPAccount = await prisma.fTPAccount.delete({
     *   where: {
     *     // ... filter to delete one FTPAccount
     *   }
     * })
     * 
     */
    delete<T extends FTPAccountDeleteArgs>(args: SelectSubset<T, FTPAccountDeleteArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one FTPAccount.
     * @param {FTPAccountUpdateArgs} args - Arguments to update one FTPAccount.
     * @example
     * // Update one FTPAccount
     * const fTPAccount = await prisma.fTPAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FTPAccountUpdateArgs>(args: SelectSubset<T, FTPAccountUpdateArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more FTPAccounts.
     * @param {FTPAccountDeleteManyArgs} args - Arguments to filter FTPAccounts to delete.
     * @example
     * // Delete a few FTPAccounts
     * const { count } = await prisma.fTPAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FTPAccountDeleteManyArgs>(args?: SelectSubset<T, FTPAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FTPAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FTPAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FTPAccounts
     * const fTPAccount = await prisma.fTPAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FTPAccountUpdateManyArgs>(args: SelectSubset<T, FTPAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FTPAccounts and returns the data updated in the database.
     * @param {FTPAccountUpdateManyAndReturnArgs} args - Arguments to update many FTPAccounts.
     * @example
     * // Update many FTPAccounts
     * const fTPAccount = await prisma.fTPAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FTPAccounts and only return the `id`
     * const fTPAccountWithIdOnly = await prisma.fTPAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FTPAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, FTPAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one FTPAccount.
     * @param {FTPAccountUpsertArgs} args - Arguments to update or create a FTPAccount.
     * @example
     * // Update or create a FTPAccount
     * const fTPAccount = await prisma.fTPAccount.upsert({
     *   create: {
     *     // ... data to create a FTPAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FTPAccount we want to update
     *   }
     * })
     */
    upsert<T extends FTPAccountUpsertArgs>(args: SelectSubset<T, FTPAccountUpsertArgs<ExtArgs>>): Prisma__FTPAccountClient<$Result.GetResult<Prisma.$FTPAccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of FTPAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FTPAccountCountArgs} args - Arguments to filter FTPAccounts to count.
     * @example
     * // Count the number of FTPAccounts
     * const count = await prisma.fTPAccount.count({
     *   where: {
     *     // ... the filter for the FTPAccounts we want to count
     *   }
     * })
    **/
    count<T extends FTPAccountCountArgs>(
      args?: Subset<T, FTPAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FTPAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FTPAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FTPAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FTPAccountAggregateArgs>(args: Subset<T, FTPAccountAggregateArgs>): Prisma.PrismaPromise<GetFTPAccountAggregateType<T>>

    /**
     * Group by FTPAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FTPAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FTPAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FTPAccountGroupByArgs['orderBy'] }
        : { orderBy?: FTPAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FTPAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFTPAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FTPAccount model
   */
  readonly fields: FTPAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FTPAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FTPAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hostingAccount<T extends HostingAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostingAccountDefaultArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FTPAccount model
   */ 
  interface FTPAccountFieldRefs {
    readonly id: FieldRef<"FTPAccount", 'String'>
    readonly hostingAccountId: FieldRef<"FTPAccount", 'String'>
    readonly username: FieldRef<"FTPAccount", 'String'>
    readonly password: FieldRef<"FTPAccount", 'String'>
    readonly directory: FieldRef<"FTPAccount", 'String'>
    readonly permissions: FieldRef<"FTPAccount", 'String'>
    readonly createdAt: FieldRef<"FTPAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"FTPAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FTPAccount findUnique
   */
  export type FTPAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * Filter, which FTPAccount to fetch.
     */
    where: FTPAccountWhereUniqueInput
  }

  /**
   * FTPAccount findUniqueOrThrow
   */
  export type FTPAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * Filter, which FTPAccount to fetch.
     */
    where: FTPAccountWhereUniqueInput
  }

  /**
   * FTPAccount findFirst
   */
  export type FTPAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * Filter, which FTPAccount to fetch.
     */
    where?: FTPAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FTPAccounts to fetch.
     */
    orderBy?: FTPAccountOrderByWithRelationInput | FTPAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FTPAccounts.
     */
    cursor?: FTPAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FTPAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FTPAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FTPAccounts.
     */
    distinct?: FTPAccountScalarFieldEnum | FTPAccountScalarFieldEnum[]
  }

  /**
   * FTPAccount findFirstOrThrow
   */
  export type FTPAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * Filter, which FTPAccount to fetch.
     */
    where?: FTPAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FTPAccounts to fetch.
     */
    orderBy?: FTPAccountOrderByWithRelationInput | FTPAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FTPAccounts.
     */
    cursor?: FTPAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FTPAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FTPAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FTPAccounts.
     */
    distinct?: FTPAccountScalarFieldEnum | FTPAccountScalarFieldEnum[]
  }

  /**
   * FTPAccount findMany
   */
  export type FTPAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * Filter, which FTPAccounts to fetch.
     */
    where?: FTPAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FTPAccounts to fetch.
     */
    orderBy?: FTPAccountOrderByWithRelationInput | FTPAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FTPAccounts.
     */
    cursor?: FTPAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FTPAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FTPAccounts.
     */
    skip?: number
    distinct?: FTPAccountScalarFieldEnum | FTPAccountScalarFieldEnum[]
  }

  /**
   * FTPAccount create
   */
  export type FTPAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a FTPAccount.
     */
    data: XOR<FTPAccountCreateInput, FTPAccountUncheckedCreateInput>
  }

  /**
   * FTPAccount createMany
   */
  export type FTPAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FTPAccounts.
     */
    data: FTPAccountCreateManyInput | FTPAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FTPAccount createManyAndReturn
   */
  export type FTPAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * The data used to create many FTPAccounts.
     */
    data: FTPAccountCreateManyInput | FTPAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FTPAccount update
   */
  export type FTPAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a FTPAccount.
     */
    data: XOR<FTPAccountUpdateInput, FTPAccountUncheckedUpdateInput>
    /**
     * Choose, which FTPAccount to update.
     */
    where: FTPAccountWhereUniqueInput
  }

  /**
   * FTPAccount updateMany
   */
  export type FTPAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FTPAccounts.
     */
    data: XOR<FTPAccountUpdateManyMutationInput, FTPAccountUncheckedUpdateManyInput>
    /**
     * Filter which FTPAccounts to update
     */
    where?: FTPAccountWhereInput
    /**
     * Limit how many FTPAccounts to update.
     */
    limit?: number
  }

  /**
   * FTPAccount updateManyAndReturn
   */
  export type FTPAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * The data used to update FTPAccounts.
     */
    data: XOR<FTPAccountUpdateManyMutationInput, FTPAccountUncheckedUpdateManyInput>
    /**
     * Filter which FTPAccounts to update
     */
    where?: FTPAccountWhereInput
    /**
     * Limit how many FTPAccounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FTPAccount upsert
   */
  export type FTPAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the FTPAccount to update in case it exists.
     */
    where: FTPAccountWhereUniqueInput
    /**
     * In case the FTPAccount found by the `where` argument doesn't exist, create a new FTPAccount with this data.
     */
    create: XOR<FTPAccountCreateInput, FTPAccountUncheckedCreateInput>
    /**
     * In case the FTPAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FTPAccountUpdateInput, FTPAccountUncheckedUpdateInput>
  }

  /**
   * FTPAccount delete
   */
  export type FTPAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
    /**
     * Filter which FTPAccount to delete.
     */
    where: FTPAccountWhereUniqueInput
  }

  /**
   * FTPAccount deleteMany
   */
  export type FTPAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FTPAccounts to delete
     */
    where?: FTPAccountWhereInput
    /**
     * Limit how many FTPAccounts to delete.
     */
    limit?: number
  }

  /**
   * FTPAccount without action
   */
  export type FTPAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FTPAccount
     */
    select?: FTPAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FTPAccount
     */
    omit?: FTPAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FTPAccountInclude<ExtArgs> | null
  }


  /**
   * Model Database
   */

  export type AggregateDatabase = {
    _count: DatabaseCountAggregateOutputType | null
    _avg: DatabaseAvgAggregateOutputType | null
    _sum: DatabaseSumAggregateOutputType | null
    _min: DatabaseMinAggregateOutputType | null
    _max: DatabaseMaxAggregateOutputType | null
  }

  export type DatabaseAvgAggregateOutputType = {
    size: number | null
  }

  export type DatabaseSumAggregateOutputType = {
    size: number | null
  }

  export type DatabaseMinAggregateOutputType = {
    id: string | null
    hostingAccountId: string | null
    name: string | null
    username: string | null
    password: string | null
    type: $Enums.DatabaseType | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DatabaseMaxAggregateOutputType = {
    id: string | null
    hostingAccountId: string | null
    name: string | null
    username: string | null
    password: string | null
    type: $Enums.DatabaseType | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DatabaseCountAggregateOutputType = {
    id: number
    hostingAccountId: number
    name: number
    username: number
    password: number
    type: number
    size: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DatabaseAvgAggregateInputType = {
    size?: true
  }

  export type DatabaseSumAggregateInputType = {
    size?: true
  }

  export type DatabaseMinAggregateInputType = {
    id?: true
    hostingAccountId?: true
    name?: true
    username?: true
    password?: true
    type?: true
    size?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DatabaseMaxAggregateInputType = {
    id?: true
    hostingAccountId?: true
    name?: true
    username?: true
    password?: true
    type?: true
    size?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DatabaseCountAggregateInputType = {
    id?: true
    hostingAccountId?: true
    name?: true
    username?: true
    password?: true
    type?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DatabaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Database to aggregate.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: DatabaseOrderByWithRelationInput | DatabaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Databases
    **/
    _count?: true | DatabaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DatabaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DatabaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DatabaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DatabaseMaxAggregateInputType
  }

  export type GetDatabaseAggregateType<T extends DatabaseAggregateArgs> = {
        [P in keyof T & keyof AggregateDatabase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDatabase[P]>
      : GetScalarType<T[P], AggregateDatabase[P]>
  }




  export type DatabaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DatabaseWhereInput
    orderBy?: DatabaseOrderByWithAggregationInput | DatabaseOrderByWithAggregationInput[]
    by: DatabaseScalarFieldEnum[] | DatabaseScalarFieldEnum
    having?: DatabaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DatabaseCountAggregateInputType | true
    _avg?: DatabaseAvgAggregateInputType
    _sum?: DatabaseSumAggregateInputType
    _min?: DatabaseMinAggregateInputType
    _max?: DatabaseMaxAggregateInputType
  }

  export type DatabaseGroupByOutputType = {
    id: string
    hostingAccountId: string
    name: string
    username: string
    password: string
    type: $Enums.DatabaseType
    size: number
    createdAt: Date
    updatedAt: Date
    _count: DatabaseCountAggregateOutputType | null
    _avg: DatabaseAvgAggregateOutputType | null
    _sum: DatabaseSumAggregateOutputType | null
    _min: DatabaseMinAggregateOutputType | null
    _max: DatabaseMaxAggregateOutputType | null
  }

  type GetDatabaseGroupByPayload<T extends DatabaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DatabaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DatabaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DatabaseGroupByOutputType[P]>
            : GetScalarType<T[P], DatabaseGroupByOutputType[P]>
        }
      >
    >


  export type DatabaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["database"]>

  export type DatabaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["database"]>

  export type DatabaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["database"]>

  export type DatabaseSelectScalar = {
    id?: boolean
    hostingAccountId?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    type?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DatabaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hostingAccountId" | "name" | "username" | "password" | "type" | "size" | "createdAt" | "updatedAt", ExtArgs["result"]["database"]>
  export type DatabaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }
  export type DatabaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }
  export type DatabaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }

  export type $DatabasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Database"
    objects: {
      hostingAccount: Prisma.$HostingAccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hostingAccountId: string
      name: string
      username: string
      password: string
      type: $Enums.DatabaseType
      size: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["database"]>
    composites: {}
  }

  type DatabaseGetPayload<S extends boolean | null | undefined | DatabaseDefaultArgs> = $Result.GetResult<Prisma.$DatabasePayload, S>

  type DatabaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DatabaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DatabaseCountAggregateInputType | true
    }

  export interface DatabaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Database'], meta: { name: 'Database' } }
    /**
     * Find zero or one Database that matches the filter.
     * @param {DatabaseFindUniqueArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DatabaseFindUniqueArgs>(args: SelectSubset<T, DatabaseFindUniqueArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Database that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DatabaseFindUniqueOrThrowArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DatabaseFindUniqueOrThrowArgs>(args: SelectSubset<T, DatabaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Database that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseFindFirstArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DatabaseFindFirstArgs>(args?: SelectSubset<T, DatabaseFindFirstArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Database that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseFindFirstOrThrowArgs} args - Arguments to find a Database
     * @example
     * // Get one Database
     * const database = await prisma.database.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DatabaseFindFirstOrThrowArgs>(args?: SelectSubset<T, DatabaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Databases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Databases
     * const databases = await prisma.database.findMany()
     * 
     * // Get first 10 Databases
     * const databases = await prisma.database.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const databaseWithIdOnly = await prisma.database.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DatabaseFindManyArgs>(args?: SelectSubset<T, DatabaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Database.
     * @param {DatabaseCreateArgs} args - Arguments to create a Database.
     * @example
     * // Create one Database
     * const Database = await prisma.database.create({
     *   data: {
     *     // ... data to create a Database
     *   }
     * })
     * 
     */
    create<T extends DatabaseCreateArgs>(args: SelectSubset<T, DatabaseCreateArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Databases.
     * @param {DatabaseCreateManyArgs} args - Arguments to create many Databases.
     * @example
     * // Create many Databases
     * const database = await prisma.database.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DatabaseCreateManyArgs>(args?: SelectSubset<T, DatabaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Databases and returns the data saved in the database.
     * @param {DatabaseCreateManyAndReturnArgs} args - Arguments to create many Databases.
     * @example
     * // Create many Databases
     * const database = await prisma.database.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Databases and only return the `id`
     * const databaseWithIdOnly = await prisma.database.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DatabaseCreateManyAndReturnArgs>(args?: SelectSubset<T, DatabaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Database.
     * @param {DatabaseDeleteArgs} args - Arguments to delete one Database.
     * @example
     * // Delete one Database
     * const Database = await prisma.database.delete({
     *   where: {
     *     // ... filter to delete one Database
     *   }
     * })
     * 
     */
    delete<T extends DatabaseDeleteArgs>(args: SelectSubset<T, DatabaseDeleteArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Database.
     * @param {DatabaseUpdateArgs} args - Arguments to update one Database.
     * @example
     * // Update one Database
     * const database = await prisma.database.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DatabaseUpdateArgs>(args: SelectSubset<T, DatabaseUpdateArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Databases.
     * @param {DatabaseDeleteManyArgs} args - Arguments to filter Databases to delete.
     * @example
     * // Delete a few Databases
     * const { count } = await prisma.database.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DatabaseDeleteManyArgs>(args?: SelectSubset<T, DatabaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Databases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Databases
     * const database = await prisma.database.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DatabaseUpdateManyArgs>(args: SelectSubset<T, DatabaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Databases and returns the data updated in the database.
     * @param {DatabaseUpdateManyAndReturnArgs} args - Arguments to update many Databases.
     * @example
     * // Update many Databases
     * const database = await prisma.database.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Databases and only return the `id`
     * const databaseWithIdOnly = await prisma.database.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DatabaseUpdateManyAndReturnArgs>(args: SelectSubset<T, DatabaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Database.
     * @param {DatabaseUpsertArgs} args - Arguments to update or create a Database.
     * @example
     * // Update or create a Database
     * const database = await prisma.database.upsert({
     *   create: {
     *     // ... data to create a Database
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Database we want to update
     *   }
     * })
     */
    upsert<T extends DatabaseUpsertArgs>(args: SelectSubset<T, DatabaseUpsertArgs<ExtArgs>>): Prisma__DatabaseClient<$Result.GetResult<Prisma.$DatabasePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Databases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseCountArgs} args - Arguments to filter Databases to count.
     * @example
     * // Count the number of Databases
     * const count = await prisma.database.count({
     *   where: {
     *     // ... the filter for the Databases we want to count
     *   }
     * })
    **/
    count<T extends DatabaseCountArgs>(
      args?: Subset<T, DatabaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DatabaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Database.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DatabaseAggregateArgs>(args: Subset<T, DatabaseAggregateArgs>): Prisma.PrismaPromise<GetDatabaseAggregateType<T>>

    /**
     * Group by Database.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatabaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DatabaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DatabaseGroupByArgs['orderBy'] }
        : { orderBy?: DatabaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DatabaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDatabaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Database model
   */
  readonly fields: DatabaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Database.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DatabaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hostingAccount<T extends HostingAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostingAccountDefaultArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Database model
   */ 
  interface DatabaseFieldRefs {
    readonly id: FieldRef<"Database", 'String'>
    readonly hostingAccountId: FieldRef<"Database", 'String'>
    readonly name: FieldRef<"Database", 'String'>
    readonly username: FieldRef<"Database", 'String'>
    readonly password: FieldRef<"Database", 'String'>
    readonly type: FieldRef<"Database", 'DatabaseType'>
    readonly size: FieldRef<"Database", 'Int'>
    readonly createdAt: FieldRef<"Database", 'DateTime'>
    readonly updatedAt: FieldRef<"Database", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Database findUnique
   */
  export type DatabaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * Filter, which Database to fetch.
     */
    where: DatabaseWhereUniqueInput
  }

  /**
   * Database findUniqueOrThrow
   */
  export type DatabaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * Filter, which Database to fetch.
     */
    where: DatabaseWhereUniqueInput
  }

  /**
   * Database findFirst
   */
  export type DatabaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * Filter, which Database to fetch.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: DatabaseOrderByWithRelationInput | DatabaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Databases.
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Databases.
     */
    distinct?: DatabaseScalarFieldEnum | DatabaseScalarFieldEnum[]
  }

  /**
   * Database findFirstOrThrow
   */
  export type DatabaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * Filter, which Database to fetch.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: DatabaseOrderByWithRelationInput | DatabaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Databases.
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Databases.
     */
    distinct?: DatabaseScalarFieldEnum | DatabaseScalarFieldEnum[]
  }

  /**
   * Database findMany
   */
  export type DatabaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * Filter, which Databases to fetch.
     */
    where?: DatabaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Databases to fetch.
     */
    orderBy?: DatabaseOrderByWithRelationInput | DatabaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Databases.
     */
    cursor?: DatabaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Databases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Databases.
     */
    skip?: number
    distinct?: DatabaseScalarFieldEnum | DatabaseScalarFieldEnum[]
  }

  /**
   * Database create
   */
  export type DatabaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Database.
     */
    data: XOR<DatabaseCreateInput, DatabaseUncheckedCreateInput>
  }

  /**
   * Database createMany
   */
  export type DatabaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Databases.
     */
    data: DatabaseCreateManyInput | DatabaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Database createManyAndReturn
   */
  export type DatabaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * The data used to create many Databases.
     */
    data: DatabaseCreateManyInput | DatabaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Database update
   */
  export type DatabaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Database.
     */
    data: XOR<DatabaseUpdateInput, DatabaseUncheckedUpdateInput>
    /**
     * Choose, which Database to update.
     */
    where: DatabaseWhereUniqueInput
  }

  /**
   * Database updateMany
   */
  export type DatabaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Databases.
     */
    data: XOR<DatabaseUpdateManyMutationInput, DatabaseUncheckedUpdateManyInput>
    /**
     * Filter which Databases to update
     */
    where?: DatabaseWhereInput
    /**
     * Limit how many Databases to update.
     */
    limit?: number
  }

  /**
   * Database updateManyAndReturn
   */
  export type DatabaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * The data used to update Databases.
     */
    data: XOR<DatabaseUpdateManyMutationInput, DatabaseUncheckedUpdateManyInput>
    /**
     * Filter which Databases to update
     */
    where?: DatabaseWhereInput
    /**
     * Limit how many Databases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Database upsert
   */
  export type DatabaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Database to update in case it exists.
     */
    where: DatabaseWhereUniqueInput
    /**
     * In case the Database found by the `where` argument doesn't exist, create a new Database with this data.
     */
    create: XOR<DatabaseCreateInput, DatabaseUncheckedCreateInput>
    /**
     * In case the Database was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DatabaseUpdateInput, DatabaseUncheckedUpdateInput>
  }

  /**
   * Database delete
   */
  export type DatabaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
    /**
     * Filter which Database to delete.
     */
    where: DatabaseWhereUniqueInput
  }

  /**
   * Database deleteMany
   */
  export type DatabaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Databases to delete
     */
    where?: DatabaseWhereInput
    /**
     * Limit how many Databases to delete.
     */
    limit?: number
  }

  /**
   * Database without action
   */
  export type DatabaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Database
     */
    select?: DatabaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Database
     */
    omit?: DatabaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatabaseInclude<ExtArgs> | null
  }


  /**
   * Model EmailAccount
   */

  export type AggregateEmailAccount = {
    _count: EmailAccountCountAggregateOutputType | null
    _avg: EmailAccountAvgAggregateOutputType | null
    _sum: EmailAccountSumAggregateOutputType | null
    _min: EmailAccountMinAggregateOutputType | null
    _max: EmailAccountMaxAggregateOutputType | null
  }

  export type EmailAccountAvgAggregateOutputType = {
    quotaSize: number | null
    usedQuota: number | null
  }

  export type EmailAccountSumAggregateOutputType = {
    quotaSize: number | null
    usedQuota: number | null
  }

  export type EmailAccountMinAggregateOutputType = {
    id: string | null
    hostingAccountId: string | null
    email: string | null
    password: string | null
    forwardTo: string | null
    quotaSize: number | null
    usedQuota: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailAccountMaxAggregateOutputType = {
    id: string | null
    hostingAccountId: string | null
    email: string | null
    password: string | null
    forwardTo: string | null
    quotaSize: number | null
    usedQuota: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailAccountCountAggregateOutputType = {
    id: number
    hostingAccountId: number
    email: number
    password: number
    forwardTo: number
    quotaSize: number
    usedQuota: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailAccountAvgAggregateInputType = {
    quotaSize?: true
    usedQuota?: true
  }

  export type EmailAccountSumAggregateInputType = {
    quotaSize?: true
    usedQuota?: true
  }

  export type EmailAccountMinAggregateInputType = {
    id?: true
    hostingAccountId?: true
    email?: true
    password?: true
    forwardTo?: true
    quotaSize?: true
    usedQuota?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailAccountMaxAggregateInputType = {
    id?: true
    hostingAccountId?: true
    email?: true
    password?: true
    forwardTo?: true
    quotaSize?: true
    usedQuota?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailAccountCountAggregateInputType = {
    id?: true
    hostingAccountId?: true
    email?: true
    password?: true
    forwardTo?: true
    quotaSize?: true
    usedQuota?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailAccount to aggregate.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailAccounts
    **/
    _count?: true | EmailAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailAccountMaxAggregateInputType
  }

  export type GetEmailAccountAggregateType<T extends EmailAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailAccount[P]>
      : GetScalarType<T[P], AggregateEmailAccount[P]>
  }




  export type EmailAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailAccountWhereInput
    orderBy?: EmailAccountOrderByWithAggregationInput | EmailAccountOrderByWithAggregationInput[]
    by: EmailAccountScalarFieldEnum[] | EmailAccountScalarFieldEnum
    having?: EmailAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailAccountCountAggregateInputType | true
    _avg?: EmailAccountAvgAggregateInputType
    _sum?: EmailAccountSumAggregateInputType
    _min?: EmailAccountMinAggregateInputType
    _max?: EmailAccountMaxAggregateInputType
  }

  export type EmailAccountGroupByOutputType = {
    id: string
    hostingAccountId: string
    email: string
    password: string
    forwardTo: string | null
    quotaSize: number
    usedQuota: number
    createdAt: Date
    updatedAt: Date
    _count: EmailAccountCountAggregateOutputType | null
    _avg: EmailAccountAvgAggregateOutputType | null
    _sum: EmailAccountSumAggregateOutputType | null
    _min: EmailAccountMinAggregateOutputType | null
    _max: EmailAccountMaxAggregateOutputType | null
  }

  type GetEmailAccountGroupByPayload<T extends EmailAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailAccountGroupByOutputType[P]>
            : GetScalarType<T[P], EmailAccountGroupByOutputType[P]>
        }
      >
    >


  export type EmailAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    email?: boolean
    password?: boolean
    forwardTo?: boolean
    quotaSize?: boolean
    usedQuota?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailAccount"]>

  export type EmailAccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    email?: boolean
    password?: boolean
    forwardTo?: boolean
    quotaSize?: boolean
    usedQuota?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailAccount"]>

  export type EmailAccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hostingAccountId?: boolean
    email?: boolean
    password?: boolean
    forwardTo?: boolean
    quotaSize?: boolean
    usedQuota?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailAccount"]>

  export type EmailAccountSelectScalar = {
    id?: boolean
    hostingAccountId?: boolean
    email?: boolean
    password?: boolean
    forwardTo?: boolean
    quotaSize?: boolean
    usedQuota?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hostingAccountId" | "email" | "password" | "forwardTo" | "quotaSize" | "usedQuota" | "createdAt" | "updatedAt", ExtArgs["result"]["emailAccount"]>
  export type EmailAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }
  export type EmailAccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }
  export type EmailAccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hostingAccount?: boolean | HostingAccountDefaultArgs<ExtArgs>
  }

  export type $EmailAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailAccount"
    objects: {
      hostingAccount: Prisma.$HostingAccountPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hostingAccountId: string
      email: string
      password: string
      forwardTo: string | null
      quotaSize: number
      usedQuota: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailAccount"]>
    composites: {}
  }

  type EmailAccountGetPayload<S extends boolean | null | undefined | EmailAccountDefaultArgs> = $Result.GetResult<Prisma.$EmailAccountPayload, S>

  type EmailAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailAccountCountAggregateInputType | true
    }

  export interface EmailAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailAccount'], meta: { name: 'EmailAccount' } }
    /**
     * Find zero or one EmailAccount that matches the filter.
     * @param {EmailAccountFindUniqueArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailAccountFindUniqueArgs>(args: SelectSubset<T, EmailAccountFindUniqueArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one EmailAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailAccountFindUniqueOrThrowArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first EmailAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountFindFirstArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailAccountFindFirstArgs>(args?: SelectSubset<T, EmailAccountFindFirstArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first EmailAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountFindFirstOrThrowArgs} args - Arguments to find a EmailAccount
     * @example
     * // Get one EmailAccount
     * const emailAccount = await prisma.emailAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more EmailAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailAccounts
     * const emailAccounts = await prisma.emailAccount.findMany()
     * 
     * // Get first 10 EmailAccounts
     * const emailAccounts = await prisma.emailAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailAccountWithIdOnly = await prisma.emailAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailAccountFindManyArgs>(args?: SelectSubset<T, EmailAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a EmailAccount.
     * @param {EmailAccountCreateArgs} args - Arguments to create a EmailAccount.
     * @example
     * // Create one EmailAccount
     * const EmailAccount = await prisma.emailAccount.create({
     *   data: {
     *     // ... data to create a EmailAccount
     *   }
     * })
     * 
     */
    create<T extends EmailAccountCreateArgs>(args: SelectSubset<T, EmailAccountCreateArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many EmailAccounts.
     * @param {EmailAccountCreateManyArgs} args - Arguments to create many EmailAccounts.
     * @example
     * // Create many EmailAccounts
     * const emailAccount = await prisma.emailAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailAccountCreateManyArgs>(args?: SelectSubset<T, EmailAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailAccounts and returns the data saved in the database.
     * @param {EmailAccountCreateManyAndReturnArgs} args - Arguments to create many EmailAccounts.
     * @example
     * // Create many EmailAccounts
     * const emailAccount = await prisma.emailAccount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailAccounts and only return the `id`
     * const emailAccountWithIdOnly = await prisma.emailAccount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailAccountCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailAccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a EmailAccount.
     * @param {EmailAccountDeleteArgs} args - Arguments to delete one EmailAccount.
     * @example
     * // Delete one EmailAccount
     * const EmailAccount = await prisma.emailAccount.delete({
     *   where: {
     *     // ... filter to delete one EmailAccount
     *   }
     * })
     * 
     */
    delete<T extends EmailAccountDeleteArgs>(args: SelectSubset<T, EmailAccountDeleteArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one EmailAccount.
     * @param {EmailAccountUpdateArgs} args - Arguments to update one EmailAccount.
     * @example
     * // Update one EmailAccount
     * const emailAccount = await prisma.emailAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailAccountUpdateArgs>(args: SelectSubset<T, EmailAccountUpdateArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more EmailAccounts.
     * @param {EmailAccountDeleteManyArgs} args - Arguments to filter EmailAccounts to delete.
     * @example
     * // Delete a few EmailAccounts
     * const { count } = await prisma.emailAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailAccountDeleteManyArgs>(args?: SelectSubset<T, EmailAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailAccounts
     * const emailAccount = await prisma.emailAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailAccountUpdateManyArgs>(args: SelectSubset<T, EmailAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailAccounts and returns the data updated in the database.
     * @param {EmailAccountUpdateManyAndReturnArgs} args - Arguments to update many EmailAccounts.
     * @example
     * // Update many EmailAccounts
     * const emailAccount = await prisma.emailAccount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EmailAccounts and only return the `id`
     * const emailAccountWithIdOnly = await prisma.emailAccount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EmailAccountUpdateManyAndReturnArgs>(args: SelectSubset<T, EmailAccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one EmailAccount.
     * @param {EmailAccountUpsertArgs} args - Arguments to update or create a EmailAccount.
     * @example
     * // Update or create a EmailAccount
     * const emailAccount = await prisma.emailAccount.upsert({
     *   create: {
     *     // ... data to create a EmailAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailAccount we want to update
     *   }
     * })
     */
    upsert<T extends EmailAccountUpsertArgs>(args: SelectSubset<T, EmailAccountUpsertArgs<ExtArgs>>): Prisma__EmailAccountClient<$Result.GetResult<Prisma.$EmailAccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of EmailAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountCountArgs} args - Arguments to filter EmailAccounts to count.
     * @example
     * // Count the number of EmailAccounts
     * const count = await prisma.emailAccount.count({
     *   where: {
     *     // ... the filter for the EmailAccounts we want to count
     *   }
     * })
    **/
    count<T extends EmailAccountCountArgs>(
      args?: Subset<T, EmailAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailAccountAggregateArgs>(args: Subset<T, EmailAccountAggregateArgs>): Prisma.PrismaPromise<GetEmailAccountAggregateType<T>>

    /**
     * Group by EmailAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailAccountGroupByArgs['orderBy'] }
        : { orderBy?: EmailAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailAccount model
   */
  readonly fields: EmailAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hostingAccount<T extends HostingAccountDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HostingAccountDefaultArgs<ExtArgs>>): Prisma__HostingAccountClient<$Result.GetResult<Prisma.$HostingAccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailAccount model
   */ 
  interface EmailAccountFieldRefs {
    readonly id: FieldRef<"EmailAccount", 'String'>
    readonly hostingAccountId: FieldRef<"EmailAccount", 'String'>
    readonly email: FieldRef<"EmailAccount", 'String'>
    readonly password: FieldRef<"EmailAccount", 'String'>
    readonly forwardTo: FieldRef<"EmailAccount", 'String'>
    readonly quotaSize: FieldRef<"EmailAccount", 'Int'>
    readonly usedQuota: FieldRef<"EmailAccount", 'Int'>
    readonly createdAt: FieldRef<"EmailAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailAccount findUnique
   */
  export type EmailAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount findUniqueOrThrow
   */
  export type EmailAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount findFirst
   */
  export type EmailAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailAccounts.
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailAccounts.
     */
    distinct?: EmailAccountScalarFieldEnum | EmailAccountScalarFieldEnum[]
  }

  /**
   * EmailAccount findFirstOrThrow
   */
  export type EmailAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * Filter, which EmailAccount to fetch.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailAccounts.
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailAccounts.
     */
    distinct?: EmailAccountScalarFieldEnum | EmailAccountScalarFieldEnum[]
  }

  /**
   * EmailAccount findMany
   */
  export type EmailAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * Filter, which EmailAccounts to fetch.
     */
    where?: EmailAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailAccounts to fetch.
     */
    orderBy?: EmailAccountOrderByWithRelationInput | EmailAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailAccounts.
     */
    cursor?: EmailAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailAccounts.
     */
    skip?: number
    distinct?: EmailAccountScalarFieldEnum | EmailAccountScalarFieldEnum[]
  }

  /**
   * EmailAccount create
   */
  export type EmailAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailAccount.
     */
    data: XOR<EmailAccountCreateInput, EmailAccountUncheckedCreateInput>
  }

  /**
   * EmailAccount createMany
   */
  export type EmailAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailAccounts.
     */
    data: EmailAccountCreateManyInput | EmailAccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailAccount createManyAndReturn
   */
  export type EmailAccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * The data used to create many EmailAccounts.
     */
    data: EmailAccountCreateManyInput | EmailAccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailAccount update
   */
  export type EmailAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailAccount.
     */
    data: XOR<EmailAccountUpdateInput, EmailAccountUncheckedUpdateInput>
    /**
     * Choose, which EmailAccount to update.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount updateMany
   */
  export type EmailAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailAccounts.
     */
    data: XOR<EmailAccountUpdateManyMutationInput, EmailAccountUncheckedUpdateManyInput>
    /**
     * Filter which EmailAccounts to update
     */
    where?: EmailAccountWhereInput
    /**
     * Limit how many EmailAccounts to update.
     */
    limit?: number
  }

  /**
   * EmailAccount updateManyAndReturn
   */
  export type EmailAccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * The data used to update EmailAccounts.
     */
    data: XOR<EmailAccountUpdateManyMutationInput, EmailAccountUncheckedUpdateManyInput>
    /**
     * Filter which EmailAccounts to update
     */
    where?: EmailAccountWhereInput
    /**
     * Limit how many EmailAccounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailAccount upsert
   */
  export type EmailAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailAccount to update in case it exists.
     */
    where: EmailAccountWhereUniqueInput
    /**
     * In case the EmailAccount found by the `where` argument doesn't exist, create a new EmailAccount with this data.
     */
    create: XOR<EmailAccountCreateInput, EmailAccountUncheckedCreateInput>
    /**
     * In case the EmailAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailAccountUpdateInput, EmailAccountUncheckedUpdateInput>
  }

  /**
   * EmailAccount delete
   */
  export type EmailAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
    /**
     * Filter which EmailAccount to delete.
     */
    where: EmailAccountWhereUniqueInput
  }

  /**
   * EmailAccount deleteMany
   */
  export type EmailAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailAccounts to delete
     */
    where?: EmailAccountWhereInput
    /**
     * Limit how many EmailAccounts to delete.
     */
    limit?: number
  }

  /**
   * EmailAccount without action
   */
  export type EmailAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailAccount
     */
    select?: EmailAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailAccount
     */
    omit?: EmailAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailAccountInclude<ExtArgs> | null
  }


  /**
   * Model MaintenanceLog
   */

  export type AggregateMaintenanceLog = {
    _count: MaintenanceLogCountAggregateOutputType | null
    _min: MaintenanceLogMinAggregateOutputType | null
    _max: MaintenanceLogMaxAggregateOutputType | null
  }

  export type MaintenanceLogMinAggregateOutputType = {
    id: string | null
    serverId: string | null
    type: $Enums.MaintenanceType | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    status: $Enums.MaintenanceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaintenanceLogMaxAggregateOutputType = {
    id: string | null
    serverId: string | null
    type: $Enums.MaintenanceType | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    status: $Enums.MaintenanceStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MaintenanceLogCountAggregateOutputType = {
    id: number
    serverId: number
    type: number
    description: number
    startTime: number
    endTime: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MaintenanceLogMinAggregateInputType = {
    id?: true
    serverId?: true
    type?: true
    description?: true
    startTime?: true
    endTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaintenanceLogMaxAggregateInputType = {
    id?: true
    serverId?: true
    type?: true
    description?: true
    startTime?: true
    endTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MaintenanceLogCountAggregateInputType = {
    id?: true
    serverId?: true
    type?: true
    description?: true
    startTime?: true
    endTime?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MaintenanceLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceLog to aggregate.
     */
    where?: MaintenanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceLogs to fetch.
     */
    orderBy?: MaintenanceLogOrderByWithRelationInput | MaintenanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MaintenanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MaintenanceLogs
    **/
    _count?: true | MaintenanceLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaintenanceLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaintenanceLogMaxAggregateInputType
  }

  export type GetMaintenanceLogAggregateType<T extends MaintenanceLogAggregateArgs> = {
        [P in keyof T & keyof AggregateMaintenanceLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaintenanceLog[P]>
      : GetScalarType<T[P], AggregateMaintenanceLog[P]>
  }




  export type MaintenanceLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MaintenanceLogWhereInput
    orderBy?: MaintenanceLogOrderByWithAggregationInput | MaintenanceLogOrderByWithAggregationInput[]
    by: MaintenanceLogScalarFieldEnum[] | MaintenanceLogScalarFieldEnum
    having?: MaintenanceLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaintenanceLogCountAggregateInputType | true
    _min?: MaintenanceLogMinAggregateInputType
    _max?: MaintenanceLogMaxAggregateInputType
  }

  export type MaintenanceLogGroupByOutputType = {
    id: string
    serverId: string
    type: $Enums.MaintenanceType
    description: string
    startTime: Date
    endTime: Date | null
    status: $Enums.MaintenanceStatus
    createdAt: Date
    updatedAt: Date
    _count: MaintenanceLogCountAggregateOutputType | null
    _min: MaintenanceLogMinAggregateOutputType | null
    _max: MaintenanceLogMaxAggregateOutputType | null
  }

  type GetMaintenanceLogGroupByPayload<T extends MaintenanceLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaintenanceLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaintenanceLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaintenanceLogGroupByOutputType[P]>
            : GetScalarType<T[P], MaintenanceLogGroupByOutputType[P]>
        }
      >
    >


  export type MaintenanceLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    type?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceLog"]>

  export type MaintenanceLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    type?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceLog"]>

  export type MaintenanceLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serverId?: boolean
    type?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["maintenanceLog"]>

  export type MaintenanceLogSelectScalar = {
    id?: boolean
    serverId?: boolean
    type?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MaintenanceLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serverId" | "type" | "description" | "startTime" | "endTime" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["maintenanceLog"]>
  export type MaintenanceLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }
  export type MaintenanceLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }
  export type MaintenanceLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    server?: boolean | ServerDefaultArgs<ExtArgs>
  }

  export type $MaintenanceLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MaintenanceLog"
    objects: {
      server: Prisma.$ServerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serverId: string
      type: $Enums.MaintenanceType
      description: string
      startTime: Date
      endTime: Date | null
      status: $Enums.MaintenanceStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["maintenanceLog"]>
    composites: {}
  }

  type MaintenanceLogGetPayload<S extends boolean | null | undefined | MaintenanceLogDefaultArgs> = $Result.GetResult<Prisma.$MaintenanceLogPayload, S>

  type MaintenanceLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MaintenanceLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaintenanceLogCountAggregateInputType | true
    }

  export interface MaintenanceLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MaintenanceLog'], meta: { name: 'MaintenanceLog' } }
    /**
     * Find zero or one MaintenanceLog that matches the filter.
     * @param {MaintenanceLogFindUniqueArgs} args - Arguments to find a MaintenanceLog
     * @example
     * // Get one MaintenanceLog
     * const maintenanceLog = await prisma.maintenanceLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MaintenanceLogFindUniqueArgs>(args: SelectSubset<T, MaintenanceLogFindUniqueArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one MaintenanceLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MaintenanceLogFindUniqueOrThrowArgs} args - Arguments to find a MaintenanceLog
     * @example
     * // Get one MaintenanceLog
     * const maintenanceLog = await prisma.maintenanceLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MaintenanceLogFindUniqueOrThrowArgs>(args: SelectSubset<T, MaintenanceLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first MaintenanceLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceLogFindFirstArgs} args - Arguments to find a MaintenanceLog
     * @example
     * // Get one MaintenanceLog
     * const maintenanceLog = await prisma.maintenanceLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MaintenanceLogFindFirstArgs>(args?: SelectSubset<T, MaintenanceLogFindFirstArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first MaintenanceLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceLogFindFirstOrThrowArgs} args - Arguments to find a MaintenanceLog
     * @example
     * // Get one MaintenanceLog
     * const maintenanceLog = await prisma.maintenanceLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MaintenanceLogFindFirstOrThrowArgs>(args?: SelectSubset<T, MaintenanceLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more MaintenanceLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MaintenanceLogs
     * const maintenanceLogs = await prisma.maintenanceLog.findMany()
     * 
     * // Get first 10 MaintenanceLogs
     * const maintenanceLogs = await prisma.maintenanceLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const maintenanceLogWithIdOnly = await prisma.maintenanceLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MaintenanceLogFindManyArgs>(args?: SelectSubset<T, MaintenanceLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a MaintenanceLog.
     * @param {MaintenanceLogCreateArgs} args - Arguments to create a MaintenanceLog.
     * @example
     * // Create one MaintenanceLog
     * const MaintenanceLog = await prisma.maintenanceLog.create({
     *   data: {
     *     // ... data to create a MaintenanceLog
     *   }
     * })
     * 
     */
    create<T extends MaintenanceLogCreateArgs>(args: SelectSubset<T, MaintenanceLogCreateArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many MaintenanceLogs.
     * @param {MaintenanceLogCreateManyArgs} args - Arguments to create many MaintenanceLogs.
     * @example
     * // Create many MaintenanceLogs
     * const maintenanceLog = await prisma.maintenanceLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MaintenanceLogCreateManyArgs>(args?: SelectSubset<T, MaintenanceLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MaintenanceLogs and returns the data saved in the database.
     * @param {MaintenanceLogCreateManyAndReturnArgs} args - Arguments to create many MaintenanceLogs.
     * @example
     * // Create many MaintenanceLogs
     * const maintenanceLog = await prisma.maintenanceLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MaintenanceLogs and only return the `id`
     * const maintenanceLogWithIdOnly = await prisma.maintenanceLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MaintenanceLogCreateManyAndReturnArgs>(args?: SelectSubset<T, MaintenanceLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a MaintenanceLog.
     * @param {MaintenanceLogDeleteArgs} args - Arguments to delete one MaintenanceLog.
     * @example
     * // Delete one MaintenanceLog
     * const MaintenanceLog = await prisma.maintenanceLog.delete({
     *   where: {
     *     // ... filter to delete one MaintenanceLog
     *   }
     * })
     * 
     */
    delete<T extends MaintenanceLogDeleteArgs>(args: SelectSubset<T, MaintenanceLogDeleteArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one MaintenanceLog.
     * @param {MaintenanceLogUpdateArgs} args - Arguments to update one MaintenanceLog.
     * @example
     * // Update one MaintenanceLog
     * const maintenanceLog = await prisma.maintenanceLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MaintenanceLogUpdateArgs>(args: SelectSubset<T, MaintenanceLogUpdateArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more MaintenanceLogs.
     * @param {MaintenanceLogDeleteManyArgs} args - Arguments to filter MaintenanceLogs to delete.
     * @example
     * // Delete a few MaintenanceLogs
     * const { count } = await prisma.maintenanceLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MaintenanceLogDeleteManyArgs>(args?: SelectSubset<T, MaintenanceLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MaintenanceLogs
     * const maintenanceLog = await prisma.maintenanceLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MaintenanceLogUpdateManyArgs>(args: SelectSubset<T, MaintenanceLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MaintenanceLogs and returns the data updated in the database.
     * @param {MaintenanceLogUpdateManyAndReturnArgs} args - Arguments to update many MaintenanceLogs.
     * @example
     * // Update many MaintenanceLogs
     * const maintenanceLog = await prisma.maintenanceLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MaintenanceLogs and only return the `id`
     * const maintenanceLogWithIdOnly = await prisma.maintenanceLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MaintenanceLogUpdateManyAndReturnArgs>(args: SelectSubset<T, MaintenanceLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one MaintenanceLog.
     * @param {MaintenanceLogUpsertArgs} args - Arguments to update or create a MaintenanceLog.
     * @example
     * // Update or create a MaintenanceLog
     * const maintenanceLog = await prisma.maintenanceLog.upsert({
     *   create: {
     *     // ... data to create a MaintenanceLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MaintenanceLog we want to update
     *   }
     * })
     */
    upsert<T extends MaintenanceLogUpsertArgs>(args: SelectSubset<T, MaintenanceLogUpsertArgs<ExtArgs>>): Prisma__MaintenanceLogClient<$Result.GetResult<Prisma.$MaintenanceLogPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of MaintenanceLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceLogCountArgs} args - Arguments to filter MaintenanceLogs to count.
     * @example
     * // Count the number of MaintenanceLogs
     * const count = await prisma.maintenanceLog.count({
     *   where: {
     *     // ... the filter for the MaintenanceLogs we want to count
     *   }
     * })
    **/
    count<T extends MaintenanceLogCountArgs>(
      args?: Subset<T, MaintenanceLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaintenanceLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MaintenanceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaintenanceLogAggregateArgs>(args: Subset<T, MaintenanceLogAggregateArgs>): Prisma.PrismaPromise<GetMaintenanceLogAggregateType<T>>

    /**
     * Group by MaintenanceLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaintenanceLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MaintenanceLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MaintenanceLogGroupByArgs['orderBy'] }
        : { orderBy?: MaintenanceLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MaintenanceLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaintenanceLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MaintenanceLog model
   */
  readonly fields: MaintenanceLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MaintenanceLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MaintenanceLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    server<T extends ServerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServerDefaultArgs<ExtArgs>>): Prisma__ServerClient<$Result.GetResult<Prisma.$ServerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MaintenanceLog model
   */ 
  interface MaintenanceLogFieldRefs {
    readonly id: FieldRef<"MaintenanceLog", 'String'>
    readonly serverId: FieldRef<"MaintenanceLog", 'String'>
    readonly type: FieldRef<"MaintenanceLog", 'MaintenanceType'>
    readonly description: FieldRef<"MaintenanceLog", 'String'>
    readonly startTime: FieldRef<"MaintenanceLog", 'DateTime'>
    readonly endTime: FieldRef<"MaintenanceLog", 'DateTime'>
    readonly status: FieldRef<"MaintenanceLog", 'MaintenanceStatus'>
    readonly createdAt: FieldRef<"MaintenanceLog", 'DateTime'>
    readonly updatedAt: FieldRef<"MaintenanceLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MaintenanceLog findUnique
   */
  export type MaintenanceLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceLog to fetch.
     */
    where: MaintenanceLogWhereUniqueInput
  }

  /**
   * MaintenanceLog findUniqueOrThrow
   */
  export type MaintenanceLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceLog to fetch.
     */
    where: MaintenanceLogWhereUniqueInput
  }

  /**
   * MaintenanceLog findFirst
   */
  export type MaintenanceLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceLog to fetch.
     */
    where?: MaintenanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceLogs to fetch.
     */
    orderBy?: MaintenanceLogOrderByWithRelationInput | MaintenanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceLogs.
     */
    cursor?: MaintenanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceLogs.
     */
    distinct?: MaintenanceLogScalarFieldEnum | MaintenanceLogScalarFieldEnum[]
  }

  /**
   * MaintenanceLog findFirstOrThrow
   */
  export type MaintenanceLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceLog to fetch.
     */
    where?: MaintenanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceLogs to fetch.
     */
    orderBy?: MaintenanceLogOrderByWithRelationInput | MaintenanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MaintenanceLogs.
     */
    cursor?: MaintenanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MaintenanceLogs.
     */
    distinct?: MaintenanceLogScalarFieldEnum | MaintenanceLogScalarFieldEnum[]
  }

  /**
   * MaintenanceLog findMany
   */
  export type MaintenanceLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * Filter, which MaintenanceLogs to fetch.
     */
    where?: MaintenanceLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MaintenanceLogs to fetch.
     */
    orderBy?: MaintenanceLogOrderByWithRelationInput | MaintenanceLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MaintenanceLogs.
     */
    cursor?: MaintenanceLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MaintenanceLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MaintenanceLogs.
     */
    skip?: number
    distinct?: MaintenanceLogScalarFieldEnum | MaintenanceLogScalarFieldEnum[]
  }

  /**
   * MaintenanceLog create
   */
  export type MaintenanceLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * The data needed to create a MaintenanceLog.
     */
    data: XOR<MaintenanceLogCreateInput, MaintenanceLogUncheckedCreateInput>
  }

  /**
   * MaintenanceLog createMany
   */
  export type MaintenanceLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MaintenanceLogs.
     */
    data: MaintenanceLogCreateManyInput | MaintenanceLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MaintenanceLog createManyAndReturn
   */
  export type MaintenanceLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * The data used to create many MaintenanceLogs.
     */
    data: MaintenanceLogCreateManyInput | MaintenanceLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceLog update
   */
  export type MaintenanceLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * The data needed to update a MaintenanceLog.
     */
    data: XOR<MaintenanceLogUpdateInput, MaintenanceLogUncheckedUpdateInput>
    /**
     * Choose, which MaintenanceLog to update.
     */
    where: MaintenanceLogWhereUniqueInput
  }

  /**
   * MaintenanceLog updateMany
   */
  export type MaintenanceLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MaintenanceLogs.
     */
    data: XOR<MaintenanceLogUpdateManyMutationInput, MaintenanceLogUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceLogs to update
     */
    where?: MaintenanceLogWhereInput
    /**
     * Limit how many MaintenanceLogs to update.
     */
    limit?: number
  }

  /**
   * MaintenanceLog updateManyAndReturn
   */
  export type MaintenanceLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * The data used to update MaintenanceLogs.
     */
    data: XOR<MaintenanceLogUpdateManyMutationInput, MaintenanceLogUncheckedUpdateManyInput>
    /**
     * Filter which MaintenanceLogs to update
     */
    where?: MaintenanceLogWhereInput
    /**
     * Limit how many MaintenanceLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MaintenanceLog upsert
   */
  export type MaintenanceLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * The filter to search for the MaintenanceLog to update in case it exists.
     */
    where: MaintenanceLogWhereUniqueInput
    /**
     * In case the MaintenanceLog found by the `where` argument doesn't exist, create a new MaintenanceLog with this data.
     */
    create: XOR<MaintenanceLogCreateInput, MaintenanceLogUncheckedCreateInput>
    /**
     * In case the MaintenanceLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MaintenanceLogUpdateInput, MaintenanceLogUncheckedUpdateInput>
  }

  /**
   * MaintenanceLog delete
   */
  export type MaintenanceLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
    /**
     * Filter which MaintenanceLog to delete.
     */
    where: MaintenanceLogWhereUniqueInput
  }

  /**
   * MaintenanceLog deleteMany
   */
  export type MaintenanceLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MaintenanceLogs to delete
     */
    where?: MaintenanceLogWhereInput
    /**
     * Limit how many MaintenanceLogs to delete.
     */
    limit?: number
  }

  /**
   * MaintenanceLog without action
   */
  export type MaintenanceLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MaintenanceLog
     */
    select?: MaintenanceLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MaintenanceLog
     */
    omit?: MaintenanceLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MaintenanceLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    emailVerified: 'emailVerified',
    role: 'role',
    provider: 'provider',
    providerId: 'providerId',
    loginAttempts: 'loginAttempts',
    lockoutUntil: 'lockoutUntil',
    lastLoginAt: 'lastLoginAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmailVerificationScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt'
  };

  export type EmailVerificationScalarFieldEnum = (typeof EmailVerificationScalarFieldEnum)[keyof typeof EmailVerificationScalarFieldEnum]


  export const PasswordResetScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt'
  };

  export type PasswordResetScalarFieldEnum = (typeof PasswordResetScalarFieldEnum)[keyof typeof PasswordResetScalarFieldEnum]


  export const DomainScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    registrar: 'registrar',
    registrationDate: 'registrationDate',
    expiryDate: 'expiryDate',
    autoRenew: 'autoRenew',
    status: 'status',
    privacyProtection: 'privacyProtection',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DomainScalarFieldEnum = (typeof DomainScalarFieldEnum)[keyof typeof DomainScalarFieldEnum]


  export const NameserverScalarFieldEnum: {
    id: 'id',
    hostname: 'hostname',
    domainId: 'domainId',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NameserverScalarFieldEnum = (typeof NameserverScalarFieldEnum)[keyof typeof NameserverScalarFieldEnum]


  export const DnsRecordScalarFieldEnum: {
    id: 'id',
    domainId: 'domainId',
    type: 'type',
    name: 'name',
    content: 'content',
    ttl: 'ttl',
    priority: 'priority',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DnsRecordScalarFieldEnum = (typeof DnsRecordScalarFieldEnum)[keyof typeof DnsRecordScalarFieldEnum]


  export const HostingPackageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    diskSpace: 'diskSpace',
    bandwidth: 'bandwidth',
    emailAccounts: 'emailAccounts',
    databases: 'databases',
    subdomains: 'subdomains',
    price: 'price',
    billingCycle: 'billingCycle',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HostingPackageScalarFieldEnum = (typeof HostingPackageScalarFieldEnum)[keyof typeof HostingPackageScalarFieldEnum]


  export const HostingAccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    packageId: 'packageId',
    domainId: 'domainId',
    username: 'username',
    password: 'password',
    serverIp: 'serverIp',
    status: 'status',
    suspensionReason: 'suspensionReason',
    diskUsage: 'diskUsage',
    bandwidthUsage: 'bandwidthUsage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    serverId: 'serverId'
  };

  export type HostingAccountScalarFieldEnum = (typeof HostingAccountScalarFieldEnum)[keyof typeof HostingAccountScalarFieldEnum]


  export const ServerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ipAddress: 'ipAddress',
    type: 'type',
    location: 'location',
    status: 'status',
    operatingSystem: 'operatingSystem',
    totalDiskSpace: 'totalDiskSpace',
    usedDiskSpace: 'usedDiskSpace',
    totalBandwidth: 'totalBandwidth',
    usedBandwidth: 'usedBandwidth',
    cpuCores: 'cpuCores',
    ram: 'ram',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServerScalarFieldEnum = (typeof ServerScalarFieldEnum)[keyof typeof ServerScalarFieldEnum]


  export const FTPAccountScalarFieldEnum: {
    id: 'id',
    hostingAccountId: 'hostingAccountId',
    username: 'username',
    password: 'password',
    directory: 'directory',
    permissions: 'permissions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FTPAccountScalarFieldEnum = (typeof FTPAccountScalarFieldEnum)[keyof typeof FTPAccountScalarFieldEnum]


  export const DatabaseScalarFieldEnum: {
    id: 'id',
    hostingAccountId: 'hostingAccountId',
    name: 'name',
    username: 'username',
    password: 'password',
    type: 'type',
    size: 'size',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DatabaseScalarFieldEnum = (typeof DatabaseScalarFieldEnum)[keyof typeof DatabaseScalarFieldEnum]


  export const EmailAccountScalarFieldEnum: {
    id: 'id',
    hostingAccountId: 'hostingAccountId',
    email: 'email',
    password: 'password',
    forwardTo: 'forwardTo',
    quotaSize: 'quotaSize',
    usedQuota: 'usedQuota',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailAccountScalarFieldEnum = (typeof EmailAccountScalarFieldEnum)[keyof typeof EmailAccountScalarFieldEnum]


  export const MaintenanceLogScalarFieldEnum: {
    id: 'id',
    serverId: 'serverId',
    type: 'type',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MaintenanceLogScalarFieldEnum = (typeof MaintenanceLogScalarFieldEnum)[keyof typeof MaintenanceLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Provider'
   */
  export type EnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider'>
    


  /**
   * Reference to a field of type 'Provider[]'
   */
  export type ListEnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'DomainStatus'
   */
  export type EnumDomainStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DomainStatus'>
    


  /**
   * Reference to a field of type 'DomainStatus[]'
   */
  export type ListEnumDomainStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DomainStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'HostingStatus'
   */
  export type EnumHostingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HostingStatus'>
    


  /**
   * Reference to a field of type 'HostingStatus[]'
   */
  export type ListEnumHostingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'HostingStatus[]'>
    


  /**
   * Reference to a field of type 'ServerType'
   */
  export type EnumServerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServerType'>
    


  /**
   * Reference to a field of type 'ServerType[]'
   */
  export type ListEnumServerTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServerType[]'>
    


  /**
   * Reference to a field of type 'ServerStatus'
   */
  export type EnumServerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServerStatus'>
    


  /**
   * Reference to a field of type 'ServerStatus[]'
   */
  export type ListEnumServerStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServerStatus[]'>
    


  /**
   * Reference to a field of type 'DatabaseType'
   */
  export type EnumDatabaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DatabaseType'>
    


  /**
   * Reference to a field of type 'DatabaseType[]'
   */
  export type ListEnumDatabaseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DatabaseType[]'>
    


  /**
   * Reference to a field of type 'MaintenanceType'
   */
  export type EnumMaintenanceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceType'>
    


  /**
   * Reference to a field of type 'MaintenanceType[]'
   */
  export type ListEnumMaintenanceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceType[]'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus'
   */
  export type EnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus'>
    


  /**
   * Reference to a field of type 'MaintenanceStatus[]'
   */
  export type ListEnumMaintenanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaintenanceStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    provider?: EnumProviderNullableFilter<"User"> | $Enums.Provider | null
    providerId?: StringNullableFilter<"User"> | string | null
    loginAttempts?: IntFilter<"User"> | number
    lockoutUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    emailVerifications?: EmailVerificationListRelationFilter
    passwordResets?: PasswordResetListRelationFilter
    domains?: DomainListRelationFilter
    HostingAccount?: HostingAccountListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    loginAttempts?: SortOrder
    lockoutUntil?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    emailVerifications?: EmailVerificationOrderByRelationAggregateInput
    passwordResets?: PasswordResetOrderByRelationAggregateInput
    domains?: DomainOrderByRelationAggregateInput
    HostingAccount?: HostingAccountOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    role?: EnumRoleFilter<"User"> | $Enums.Role
    provider?: EnumProviderNullableFilter<"User"> | $Enums.Provider | null
    providerId?: StringNullableFilter<"User"> | string | null
    loginAttempts?: IntFilter<"User"> | number
    lockoutUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    emailVerifications?: EmailVerificationListRelationFilter
    passwordResets?: PasswordResetListRelationFilter
    domains?: DomainListRelationFilter
    HostingAccount?: HostingAccountListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    provider?: SortOrderInput | SortOrder
    providerId?: SortOrderInput | SortOrder
    loginAttempts?: SortOrder
    lockoutUntil?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    provider?: EnumProviderNullableWithAggregatesFilter<"User"> | $Enums.Provider | null
    providerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    loginAttempts?: IntWithAggregatesFilter<"User"> | number
    lockoutUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type EmailVerificationWhereInput = {
    AND?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    OR?: EmailVerificationWhereInput[]
    NOT?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    id?: StringFilter<"EmailVerification"> | string
    token?: StringFilter<"EmailVerification"> | string
    userId?: StringFilter<"EmailVerification"> | string
    expires?: DateTimeFilter<"EmailVerification"> | Date | string
    createdAt?: DateTimeFilter<"EmailVerification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type EmailVerificationOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EmailVerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    OR?: EmailVerificationWhereInput[]
    NOT?: EmailVerificationWhereInput | EmailVerificationWhereInput[]
    userId?: StringFilter<"EmailVerification"> | string
    expires?: DateTimeFilter<"EmailVerification"> | Date | string
    createdAt?: DateTimeFilter<"EmailVerification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type EmailVerificationOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    _count?: EmailVerificationCountOrderByAggregateInput
    _max?: EmailVerificationMaxOrderByAggregateInput
    _min?: EmailVerificationMinOrderByAggregateInput
  }

  export type EmailVerificationScalarWhereWithAggregatesInput = {
    AND?: EmailVerificationScalarWhereWithAggregatesInput | EmailVerificationScalarWhereWithAggregatesInput[]
    OR?: EmailVerificationScalarWhereWithAggregatesInput[]
    NOT?: EmailVerificationScalarWhereWithAggregatesInput | EmailVerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailVerification"> | string
    token?: StringWithAggregatesFilter<"EmailVerification"> | string
    userId?: StringWithAggregatesFilter<"EmailVerification"> | string
    expires?: DateTimeWithAggregatesFilter<"EmailVerification"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"EmailVerification"> | Date | string
  }

  export type PasswordResetWhereInput = {
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    id?: StringFilter<"PasswordReset"> | string
    token?: StringFilter<"PasswordReset"> | string
    userId?: StringFilter<"PasswordReset"> | string
    expires?: DateTimeFilter<"PasswordReset"> | Date | string
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PasswordResetOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordResetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: PasswordResetWhereInput | PasswordResetWhereInput[]
    OR?: PasswordResetWhereInput[]
    NOT?: PasswordResetWhereInput | PasswordResetWhereInput[]
    userId?: StringFilter<"PasswordReset"> | string
    expires?: DateTimeFilter<"PasswordReset"> | Date | string
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type PasswordResetOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    _count?: PasswordResetCountOrderByAggregateInput
    _max?: PasswordResetMaxOrderByAggregateInput
    _min?: PasswordResetMinOrderByAggregateInput
  }

  export type PasswordResetScalarWhereWithAggregatesInput = {
    AND?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    OR?: PasswordResetScalarWhereWithAggregatesInput[]
    NOT?: PasswordResetScalarWhereWithAggregatesInput | PasswordResetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordReset"> | string
    token?: StringWithAggregatesFilter<"PasswordReset"> | string
    userId?: StringWithAggregatesFilter<"PasswordReset"> | string
    expires?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordReset"> | Date | string
  }

  export type DomainWhereInput = {
    AND?: DomainWhereInput | DomainWhereInput[]
    OR?: DomainWhereInput[]
    NOT?: DomainWhereInput | DomainWhereInput[]
    id?: StringFilter<"Domain"> | string
    name?: StringFilter<"Domain"> | string
    userId?: StringFilter<"Domain"> | string
    registrar?: StringNullableFilter<"Domain"> | string | null
    registrationDate?: DateTimeFilter<"Domain"> | Date | string
    expiryDate?: DateTimeFilter<"Domain"> | Date | string
    autoRenew?: BoolFilter<"Domain"> | boolean
    status?: EnumDomainStatusFilter<"Domain"> | $Enums.DomainStatus
    privacyProtection?: BoolFilter<"Domain"> | boolean
    createdAt?: DateTimeFilter<"Domain"> | Date | string
    updatedAt?: DateTimeFilter<"Domain"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    nameservers?: NameserverListRelationFilter
    dnsRecords?: DnsRecordListRelationFilter
    HostingAccount?: HostingAccountListRelationFilter
  }

  export type DomainOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    registrar?: SortOrderInput | SortOrder
    registrationDate?: SortOrder
    expiryDate?: SortOrder
    autoRenew?: SortOrder
    status?: SortOrder
    privacyProtection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    nameservers?: NameserverOrderByRelationAggregateInput
    dnsRecords?: DnsRecordOrderByRelationAggregateInput
    HostingAccount?: HostingAccountOrderByRelationAggregateInput
  }

  export type DomainWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: DomainWhereInput | DomainWhereInput[]
    OR?: DomainWhereInput[]
    NOT?: DomainWhereInput | DomainWhereInput[]
    userId?: StringFilter<"Domain"> | string
    registrar?: StringNullableFilter<"Domain"> | string | null
    registrationDate?: DateTimeFilter<"Domain"> | Date | string
    expiryDate?: DateTimeFilter<"Domain"> | Date | string
    autoRenew?: BoolFilter<"Domain"> | boolean
    status?: EnumDomainStatusFilter<"Domain"> | $Enums.DomainStatus
    privacyProtection?: BoolFilter<"Domain"> | boolean
    createdAt?: DateTimeFilter<"Domain"> | Date | string
    updatedAt?: DateTimeFilter<"Domain"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    nameservers?: NameserverListRelationFilter
    dnsRecords?: DnsRecordListRelationFilter
    HostingAccount?: HostingAccountListRelationFilter
  }, "id" | "name">

  export type DomainOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    registrar?: SortOrderInput | SortOrder
    registrationDate?: SortOrder
    expiryDate?: SortOrder
    autoRenew?: SortOrder
    status?: SortOrder
    privacyProtection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DomainCountOrderByAggregateInput
    _max?: DomainMaxOrderByAggregateInput
    _min?: DomainMinOrderByAggregateInput
  }

  export type DomainScalarWhereWithAggregatesInput = {
    AND?: DomainScalarWhereWithAggregatesInput | DomainScalarWhereWithAggregatesInput[]
    OR?: DomainScalarWhereWithAggregatesInput[]
    NOT?: DomainScalarWhereWithAggregatesInput | DomainScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Domain"> | string
    name?: StringWithAggregatesFilter<"Domain"> | string
    userId?: StringWithAggregatesFilter<"Domain"> | string
    registrar?: StringNullableWithAggregatesFilter<"Domain"> | string | null
    registrationDate?: DateTimeWithAggregatesFilter<"Domain"> | Date | string
    expiryDate?: DateTimeWithAggregatesFilter<"Domain"> | Date | string
    autoRenew?: BoolWithAggregatesFilter<"Domain"> | boolean
    status?: EnumDomainStatusWithAggregatesFilter<"Domain"> | $Enums.DomainStatus
    privacyProtection?: BoolWithAggregatesFilter<"Domain"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Domain"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Domain"> | Date | string
  }

  export type NameserverWhereInput = {
    AND?: NameserverWhereInput | NameserverWhereInput[]
    OR?: NameserverWhereInput[]
    NOT?: NameserverWhereInput | NameserverWhereInput[]
    id?: StringFilter<"Nameserver"> | string
    hostname?: StringFilter<"Nameserver"> | string
    domainId?: StringFilter<"Nameserver"> | string
    order?: IntFilter<"Nameserver"> | number
    createdAt?: DateTimeFilter<"Nameserver"> | Date | string
    updatedAt?: DateTimeFilter<"Nameserver"> | Date | string
    domain?: XOR<DomainScalarRelationFilter, DomainWhereInput>
  }

  export type NameserverOrderByWithRelationInput = {
    id?: SortOrder
    hostname?: SortOrder
    domainId?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    domain?: DomainOrderByWithRelationInput
  }

  export type NameserverWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NameserverWhereInput | NameserverWhereInput[]
    OR?: NameserverWhereInput[]
    NOT?: NameserverWhereInput | NameserverWhereInput[]
    hostname?: StringFilter<"Nameserver"> | string
    domainId?: StringFilter<"Nameserver"> | string
    order?: IntFilter<"Nameserver"> | number
    createdAt?: DateTimeFilter<"Nameserver"> | Date | string
    updatedAt?: DateTimeFilter<"Nameserver"> | Date | string
    domain?: XOR<DomainScalarRelationFilter, DomainWhereInput>
  }, "id">

  export type NameserverOrderByWithAggregationInput = {
    id?: SortOrder
    hostname?: SortOrder
    domainId?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NameserverCountOrderByAggregateInput
    _avg?: NameserverAvgOrderByAggregateInput
    _max?: NameserverMaxOrderByAggregateInput
    _min?: NameserverMinOrderByAggregateInput
    _sum?: NameserverSumOrderByAggregateInput
  }

  export type NameserverScalarWhereWithAggregatesInput = {
    AND?: NameserverScalarWhereWithAggregatesInput | NameserverScalarWhereWithAggregatesInput[]
    OR?: NameserverScalarWhereWithAggregatesInput[]
    NOT?: NameserverScalarWhereWithAggregatesInput | NameserverScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Nameserver"> | string
    hostname?: StringWithAggregatesFilter<"Nameserver"> | string
    domainId?: StringWithAggregatesFilter<"Nameserver"> | string
    order?: IntWithAggregatesFilter<"Nameserver"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Nameserver"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Nameserver"> | Date | string
  }

  export type DnsRecordWhereInput = {
    AND?: DnsRecordWhereInput | DnsRecordWhereInput[]
    OR?: DnsRecordWhereInput[]
    NOT?: DnsRecordWhereInput | DnsRecordWhereInput[]
    id?: StringFilter<"DnsRecord"> | string
    domainId?: StringFilter<"DnsRecord"> | string
    type?: StringFilter<"DnsRecord"> | string
    name?: StringFilter<"DnsRecord"> | string
    content?: StringFilter<"DnsRecord"> | string
    ttl?: IntFilter<"DnsRecord"> | number
    priority?: IntNullableFilter<"DnsRecord"> | number | null
    createdAt?: DateTimeFilter<"DnsRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DnsRecord"> | Date | string
    domain?: XOR<DomainScalarRelationFilter, DomainWhereInput>
  }

  export type DnsRecordOrderByWithRelationInput = {
    id?: SortOrder
    domainId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    content?: SortOrder
    ttl?: SortOrder
    priority?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    domain?: DomainOrderByWithRelationInput
  }

  export type DnsRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DnsRecordWhereInput | DnsRecordWhereInput[]
    OR?: DnsRecordWhereInput[]
    NOT?: DnsRecordWhereInput | DnsRecordWhereInput[]
    domainId?: StringFilter<"DnsRecord"> | string
    type?: StringFilter<"DnsRecord"> | string
    name?: StringFilter<"DnsRecord"> | string
    content?: StringFilter<"DnsRecord"> | string
    ttl?: IntFilter<"DnsRecord"> | number
    priority?: IntNullableFilter<"DnsRecord"> | number | null
    createdAt?: DateTimeFilter<"DnsRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DnsRecord"> | Date | string
    domain?: XOR<DomainScalarRelationFilter, DomainWhereInput>
  }, "id">

  export type DnsRecordOrderByWithAggregationInput = {
    id?: SortOrder
    domainId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    content?: SortOrder
    ttl?: SortOrder
    priority?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DnsRecordCountOrderByAggregateInput
    _avg?: DnsRecordAvgOrderByAggregateInput
    _max?: DnsRecordMaxOrderByAggregateInput
    _min?: DnsRecordMinOrderByAggregateInput
    _sum?: DnsRecordSumOrderByAggregateInput
  }

  export type DnsRecordScalarWhereWithAggregatesInput = {
    AND?: DnsRecordScalarWhereWithAggregatesInput | DnsRecordScalarWhereWithAggregatesInput[]
    OR?: DnsRecordScalarWhereWithAggregatesInput[]
    NOT?: DnsRecordScalarWhereWithAggregatesInput | DnsRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DnsRecord"> | string
    domainId?: StringWithAggregatesFilter<"DnsRecord"> | string
    type?: StringWithAggregatesFilter<"DnsRecord"> | string
    name?: StringWithAggregatesFilter<"DnsRecord"> | string
    content?: StringWithAggregatesFilter<"DnsRecord"> | string
    ttl?: IntWithAggregatesFilter<"DnsRecord"> | number
    priority?: IntNullableWithAggregatesFilter<"DnsRecord"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"DnsRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DnsRecord"> | Date | string
  }

  export type HostingPackageWhereInput = {
    AND?: HostingPackageWhereInput | HostingPackageWhereInput[]
    OR?: HostingPackageWhereInput[]
    NOT?: HostingPackageWhereInput | HostingPackageWhereInput[]
    id?: StringFilter<"HostingPackage"> | string
    name?: StringFilter<"HostingPackage"> | string
    description?: StringNullableFilter<"HostingPackage"> | string | null
    diskSpace?: IntFilter<"HostingPackage"> | number
    bandwidth?: IntFilter<"HostingPackage"> | number
    emailAccounts?: IntFilter<"HostingPackage"> | number
    databases?: IntFilter<"HostingPackage"> | number
    subdomains?: IntFilter<"HostingPackage"> | number
    price?: DecimalFilter<"HostingPackage"> | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFilter<"HostingPackage"> | string
    isActive?: BoolFilter<"HostingPackage"> | boolean
    createdAt?: DateTimeFilter<"HostingPackage"> | Date | string
    updatedAt?: DateTimeFilter<"HostingPackage"> | Date | string
    hostingAccounts?: HostingAccountListRelationFilter
  }

  export type HostingPackageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    diskSpace?: SortOrder
    bandwidth?: SortOrder
    emailAccounts?: SortOrder
    databases?: SortOrder
    subdomains?: SortOrder
    price?: SortOrder
    billingCycle?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostingAccounts?: HostingAccountOrderByRelationAggregateInput
  }

  export type HostingPackageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HostingPackageWhereInput | HostingPackageWhereInput[]
    OR?: HostingPackageWhereInput[]
    NOT?: HostingPackageWhereInput | HostingPackageWhereInput[]
    name?: StringFilter<"HostingPackage"> | string
    description?: StringNullableFilter<"HostingPackage"> | string | null
    diskSpace?: IntFilter<"HostingPackage"> | number
    bandwidth?: IntFilter<"HostingPackage"> | number
    emailAccounts?: IntFilter<"HostingPackage"> | number
    databases?: IntFilter<"HostingPackage"> | number
    subdomains?: IntFilter<"HostingPackage"> | number
    price?: DecimalFilter<"HostingPackage"> | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFilter<"HostingPackage"> | string
    isActive?: BoolFilter<"HostingPackage"> | boolean
    createdAt?: DateTimeFilter<"HostingPackage"> | Date | string
    updatedAt?: DateTimeFilter<"HostingPackage"> | Date | string
    hostingAccounts?: HostingAccountListRelationFilter
  }, "id">

  export type HostingPackageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    diskSpace?: SortOrder
    bandwidth?: SortOrder
    emailAccounts?: SortOrder
    databases?: SortOrder
    subdomains?: SortOrder
    price?: SortOrder
    billingCycle?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HostingPackageCountOrderByAggregateInput
    _avg?: HostingPackageAvgOrderByAggregateInput
    _max?: HostingPackageMaxOrderByAggregateInput
    _min?: HostingPackageMinOrderByAggregateInput
    _sum?: HostingPackageSumOrderByAggregateInput
  }

  export type HostingPackageScalarWhereWithAggregatesInput = {
    AND?: HostingPackageScalarWhereWithAggregatesInput | HostingPackageScalarWhereWithAggregatesInput[]
    OR?: HostingPackageScalarWhereWithAggregatesInput[]
    NOT?: HostingPackageScalarWhereWithAggregatesInput | HostingPackageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HostingPackage"> | string
    name?: StringWithAggregatesFilter<"HostingPackage"> | string
    description?: StringNullableWithAggregatesFilter<"HostingPackage"> | string | null
    diskSpace?: IntWithAggregatesFilter<"HostingPackage"> | number
    bandwidth?: IntWithAggregatesFilter<"HostingPackage"> | number
    emailAccounts?: IntWithAggregatesFilter<"HostingPackage"> | number
    databases?: IntWithAggregatesFilter<"HostingPackage"> | number
    subdomains?: IntWithAggregatesFilter<"HostingPackage"> | number
    price?: DecimalWithAggregatesFilter<"HostingPackage"> | Decimal | DecimalJsLike | number | string
    billingCycle?: StringWithAggregatesFilter<"HostingPackage"> | string
    isActive?: BoolWithAggregatesFilter<"HostingPackage"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"HostingPackage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HostingPackage"> | Date | string
  }

  export type HostingAccountWhereInput = {
    AND?: HostingAccountWhereInput | HostingAccountWhereInput[]
    OR?: HostingAccountWhereInput[]
    NOT?: HostingAccountWhereInput | HostingAccountWhereInput[]
    id?: StringFilter<"HostingAccount"> | string
    userId?: StringFilter<"HostingAccount"> | string
    packageId?: StringFilter<"HostingAccount"> | string
    domainId?: StringNullableFilter<"HostingAccount"> | string | null
    username?: StringFilter<"HostingAccount"> | string
    password?: StringFilter<"HostingAccount"> | string
    serverIp?: StringFilter<"HostingAccount"> | string
    status?: EnumHostingStatusFilter<"HostingAccount"> | $Enums.HostingStatus
    suspensionReason?: StringNullableFilter<"HostingAccount"> | string | null
    diskUsage?: IntFilter<"HostingAccount"> | number
    bandwidthUsage?: IntFilter<"HostingAccount"> | number
    createdAt?: DateTimeFilter<"HostingAccount"> | Date | string
    updatedAt?: DateTimeFilter<"HostingAccount"> | Date | string
    serverId?: StringFilter<"HostingAccount"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    package?: XOR<HostingPackageScalarRelationFilter, HostingPackageWhereInput>
    domain?: XOR<DomainNullableScalarRelationFilter, DomainWhereInput> | null
    server?: XOR<ServerScalarRelationFilter, ServerWhereInput>
    ftpAccounts?: FTPAccountListRelationFilter
    databases?: DatabaseListRelationFilter
    emailAccounts?: EmailAccountListRelationFilter
  }

  export type HostingAccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    packageId?: SortOrder
    domainId?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    serverIp?: SortOrder
    status?: SortOrder
    suspensionReason?: SortOrderInput | SortOrder
    diskUsage?: SortOrder
    bandwidthUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serverId?: SortOrder
    user?: UserOrderByWithRelationInput
    package?: HostingPackageOrderByWithRelationInput
    domain?: DomainOrderByWithRelationInput
    server?: ServerOrderByWithRelationInput
    ftpAccounts?: FTPAccountOrderByRelationAggregateInput
    databases?: DatabaseOrderByRelationAggregateInput
    emailAccounts?: EmailAccountOrderByRelationAggregateInput
  }

  export type HostingAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: HostingAccountWhereInput | HostingAccountWhereInput[]
    OR?: HostingAccountWhereInput[]
    NOT?: HostingAccountWhereInput | HostingAccountWhereInput[]
    userId?: StringFilter<"HostingAccount"> | string
    packageId?: StringFilter<"HostingAccount"> | string
    domainId?: StringNullableFilter<"HostingAccount"> | string | null
    password?: StringFilter<"HostingAccount"> | string
    serverIp?: StringFilter<"HostingAccount"> | string
    status?: EnumHostingStatusFilter<"HostingAccount"> | $Enums.HostingStatus
    suspensionReason?: StringNullableFilter<"HostingAccount"> | string | null
    diskUsage?: IntFilter<"HostingAccount"> | number
    bandwidthUsage?: IntFilter<"HostingAccount"> | number
    createdAt?: DateTimeFilter<"HostingAccount"> | Date | string
    updatedAt?: DateTimeFilter<"HostingAccount"> | Date | string
    serverId?: StringFilter<"HostingAccount"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    package?: XOR<HostingPackageScalarRelationFilter, HostingPackageWhereInput>
    domain?: XOR<DomainNullableScalarRelationFilter, DomainWhereInput> | null
    server?: XOR<ServerScalarRelationFilter, ServerWhereInput>
    ftpAccounts?: FTPAccountListRelationFilter
    databases?: DatabaseListRelationFilter
    emailAccounts?: EmailAccountListRelationFilter
  }, "id" | "username">

  export type HostingAccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    packageId?: SortOrder
    domainId?: SortOrderInput | SortOrder
    username?: SortOrder
    password?: SortOrder
    serverIp?: SortOrder
    status?: SortOrder
    suspensionReason?: SortOrderInput | SortOrder
    diskUsage?: SortOrder
    bandwidthUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serverId?: SortOrder
    _count?: HostingAccountCountOrderByAggregateInput
    _avg?: HostingAccountAvgOrderByAggregateInput
    _max?: HostingAccountMaxOrderByAggregateInput
    _min?: HostingAccountMinOrderByAggregateInput
    _sum?: HostingAccountSumOrderByAggregateInput
  }

  export type HostingAccountScalarWhereWithAggregatesInput = {
    AND?: HostingAccountScalarWhereWithAggregatesInput | HostingAccountScalarWhereWithAggregatesInput[]
    OR?: HostingAccountScalarWhereWithAggregatesInput[]
    NOT?: HostingAccountScalarWhereWithAggregatesInput | HostingAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HostingAccount"> | string
    userId?: StringWithAggregatesFilter<"HostingAccount"> | string
    packageId?: StringWithAggregatesFilter<"HostingAccount"> | string
    domainId?: StringNullableWithAggregatesFilter<"HostingAccount"> | string | null
    username?: StringWithAggregatesFilter<"HostingAccount"> | string
    password?: StringWithAggregatesFilter<"HostingAccount"> | string
    serverIp?: StringWithAggregatesFilter<"HostingAccount"> | string
    status?: EnumHostingStatusWithAggregatesFilter<"HostingAccount"> | $Enums.HostingStatus
    suspensionReason?: StringNullableWithAggregatesFilter<"HostingAccount"> | string | null
    diskUsage?: IntWithAggregatesFilter<"HostingAccount"> | number
    bandwidthUsage?: IntWithAggregatesFilter<"HostingAccount"> | number
    createdAt?: DateTimeWithAggregatesFilter<"HostingAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HostingAccount"> | Date | string
    serverId?: StringWithAggregatesFilter<"HostingAccount"> | string
  }

  export type ServerWhereInput = {
    AND?: ServerWhereInput | ServerWhereInput[]
    OR?: ServerWhereInput[]
    NOT?: ServerWhereInput | ServerWhereInput[]
    id?: StringFilter<"Server"> | string
    name?: StringFilter<"Server"> | string
    ipAddress?: StringFilter<"Server"> | string
    type?: EnumServerTypeFilter<"Server"> | $Enums.ServerType
    location?: StringFilter<"Server"> | string
    status?: EnumServerStatusFilter<"Server"> | $Enums.ServerStatus
    operatingSystem?: StringFilter<"Server"> | string
    totalDiskSpace?: IntFilter<"Server"> | number
    usedDiskSpace?: IntFilter<"Server"> | number
    totalBandwidth?: IntFilter<"Server"> | number
    usedBandwidth?: IntFilter<"Server"> | number
    cpuCores?: IntFilter<"Server"> | number
    ram?: IntFilter<"Server"> | number
    createdAt?: DateTimeFilter<"Server"> | Date | string
    updatedAt?: DateTimeFilter<"Server"> | Date | string
    hostingAccounts?: HostingAccountListRelationFilter
    maintenanceLogs?: MaintenanceLogListRelationFilter
  }

  export type ServerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    ipAddress?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    operatingSystem?: SortOrder
    totalDiskSpace?: SortOrder
    usedDiskSpace?: SortOrder
    totalBandwidth?: SortOrder
    usedBandwidth?: SortOrder
    cpuCores?: SortOrder
    ram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostingAccounts?: HostingAccountOrderByRelationAggregateInput
    maintenanceLogs?: MaintenanceLogOrderByRelationAggregateInput
  }

  export type ServerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServerWhereInput | ServerWhereInput[]
    OR?: ServerWhereInput[]
    NOT?: ServerWhereInput | ServerWhereInput[]
    name?: StringFilter<"Server"> | string
    ipAddress?: StringFilter<"Server"> | string
    type?: EnumServerTypeFilter<"Server"> | $Enums.ServerType
    location?: StringFilter<"Server"> | string
    status?: EnumServerStatusFilter<"Server"> | $Enums.ServerStatus
    operatingSystem?: StringFilter<"Server"> | string
    totalDiskSpace?: IntFilter<"Server"> | number
    usedDiskSpace?: IntFilter<"Server"> | number
    totalBandwidth?: IntFilter<"Server"> | number
    usedBandwidth?: IntFilter<"Server"> | number
    cpuCores?: IntFilter<"Server"> | number
    ram?: IntFilter<"Server"> | number
    createdAt?: DateTimeFilter<"Server"> | Date | string
    updatedAt?: DateTimeFilter<"Server"> | Date | string
    hostingAccounts?: HostingAccountListRelationFilter
    maintenanceLogs?: MaintenanceLogListRelationFilter
  }, "id">

  export type ServerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ipAddress?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    operatingSystem?: SortOrder
    totalDiskSpace?: SortOrder
    usedDiskSpace?: SortOrder
    totalBandwidth?: SortOrder
    usedBandwidth?: SortOrder
    cpuCores?: SortOrder
    ram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServerCountOrderByAggregateInput
    _avg?: ServerAvgOrderByAggregateInput
    _max?: ServerMaxOrderByAggregateInput
    _min?: ServerMinOrderByAggregateInput
    _sum?: ServerSumOrderByAggregateInput
  }

  export type ServerScalarWhereWithAggregatesInput = {
    AND?: ServerScalarWhereWithAggregatesInput | ServerScalarWhereWithAggregatesInput[]
    OR?: ServerScalarWhereWithAggregatesInput[]
    NOT?: ServerScalarWhereWithAggregatesInput | ServerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Server"> | string
    name?: StringWithAggregatesFilter<"Server"> | string
    ipAddress?: StringWithAggregatesFilter<"Server"> | string
    type?: EnumServerTypeWithAggregatesFilter<"Server"> | $Enums.ServerType
    location?: StringWithAggregatesFilter<"Server"> | string
    status?: EnumServerStatusWithAggregatesFilter<"Server"> | $Enums.ServerStatus
    operatingSystem?: StringWithAggregatesFilter<"Server"> | string
    totalDiskSpace?: IntWithAggregatesFilter<"Server"> | number
    usedDiskSpace?: IntWithAggregatesFilter<"Server"> | number
    totalBandwidth?: IntWithAggregatesFilter<"Server"> | number
    usedBandwidth?: IntWithAggregatesFilter<"Server"> | number
    cpuCores?: IntWithAggregatesFilter<"Server"> | number
    ram?: IntWithAggregatesFilter<"Server"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Server"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Server"> | Date | string
  }

  export type FTPAccountWhereInput = {
    AND?: FTPAccountWhereInput | FTPAccountWhereInput[]
    OR?: FTPAccountWhereInput[]
    NOT?: FTPAccountWhereInput | FTPAccountWhereInput[]
    id?: StringFilter<"FTPAccount"> | string
    hostingAccountId?: StringFilter<"FTPAccount"> | string
    username?: StringFilter<"FTPAccount"> | string
    password?: StringFilter<"FTPAccount"> | string
    directory?: StringFilter<"FTPAccount"> | string
    permissions?: StringFilter<"FTPAccount"> | string
    createdAt?: DateTimeFilter<"FTPAccount"> | Date | string
    updatedAt?: DateTimeFilter<"FTPAccount"> | Date | string
    hostingAccount?: XOR<HostingAccountScalarRelationFilter, HostingAccountWhereInput>
  }

  export type FTPAccountOrderByWithRelationInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    directory?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostingAccount?: HostingAccountOrderByWithRelationInput
  }

  export type FTPAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: FTPAccountWhereInput | FTPAccountWhereInput[]
    OR?: FTPAccountWhereInput[]
    NOT?: FTPAccountWhereInput | FTPAccountWhereInput[]
    hostingAccountId?: StringFilter<"FTPAccount"> | string
    password?: StringFilter<"FTPAccount"> | string
    directory?: StringFilter<"FTPAccount"> | string
    permissions?: StringFilter<"FTPAccount"> | string
    createdAt?: DateTimeFilter<"FTPAccount"> | Date | string
    updatedAt?: DateTimeFilter<"FTPAccount"> | Date | string
    hostingAccount?: XOR<HostingAccountScalarRelationFilter, HostingAccountWhereInput>
  }, "id" | "username">

  export type FTPAccountOrderByWithAggregationInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    directory?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FTPAccountCountOrderByAggregateInput
    _max?: FTPAccountMaxOrderByAggregateInput
    _min?: FTPAccountMinOrderByAggregateInput
  }

  export type FTPAccountScalarWhereWithAggregatesInput = {
    AND?: FTPAccountScalarWhereWithAggregatesInput | FTPAccountScalarWhereWithAggregatesInput[]
    OR?: FTPAccountScalarWhereWithAggregatesInput[]
    NOT?: FTPAccountScalarWhereWithAggregatesInput | FTPAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FTPAccount"> | string
    hostingAccountId?: StringWithAggregatesFilter<"FTPAccount"> | string
    username?: StringWithAggregatesFilter<"FTPAccount"> | string
    password?: StringWithAggregatesFilter<"FTPAccount"> | string
    directory?: StringWithAggregatesFilter<"FTPAccount"> | string
    permissions?: StringWithAggregatesFilter<"FTPAccount"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FTPAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FTPAccount"> | Date | string
  }

  export type DatabaseWhereInput = {
    AND?: DatabaseWhereInput | DatabaseWhereInput[]
    OR?: DatabaseWhereInput[]
    NOT?: DatabaseWhereInput | DatabaseWhereInput[]
    id?: StringFilter<"Database"> | string
    hostingAccountId?: StringFilter<"Database"> | string
    name?: StringFilter<"Database"> | string
    username?: StringFilter<"Database"> | string
    password?: StringFilter<"Database"> | string
    type?: EnumDatabaseTypeFilter<"Database"> | $Enums.DatabaseType
    size?: IntFilter<"Database"> | number
    createdAt?: DateTimeFilter<"Database"> | Date | string
    updatedAt?: DateTimeFilter<"Database"> | Date | string
    hostingAccount?: XOR<HostingAccountScalarRelationFilter, HostingAccountWhereInput>
  }

  export type DatabaseOrderByWithRelationInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostingAccount?: HostingAccountOrderByWithRelationInput
  }

  export type DatabaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DatabaseWhereInput | DatabaseWhereInput[]
    OR?: DatabaseWhereInput[]
    NOT?: DatabaseWhereInput | DatabaseWhereInput[]
    hostingAccountId?: StringFilter<"Database"> | string
    name?: StringFilter<"Database"> | string
    username?: StringFilter<"Database"> | string
    password?: StringFilter<"Database"> | string
    type?: EnumDatabaseTypeFilter<"Database"> | $Enums.DatabaseType
    size?: IntFilter<"Database"> | number
    createdAt?: DateTimeFilter<"Database"> | Date | string
    updatedAt?: DateTimeFilter<"Database"> | Date | string
    hostingAccount?: XOR<HostingAccountScalarRelationFilter, HostingAccountWhereInput>
  }, "id">

  export type DatabaseOrderByWithAggregationInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DatabaseCountOrderByAggregateInput
    _avg?: DatabaseAvgOrderByAggregateInput
    _max?: DatabaseMaxOrderByAggregateInput
    _min?: DatabaseMinOrderByAggregateInput
    _sum?: DatabaseSumOrderByAggregateInput
  }

  export type DatabaseScalarWhereWithAggregatesInput = {
    AND?: DatabaseScalarWhereWithAggregatesInput | DatabaseScalarWhereWithAggregatesInput[]
    OR?: DatabaseScalarWhereWithAggregatesInput[]
    NOT?: DatabaseScalarWhereWithAggregatesInput | DatabaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Database"> | string
    hostingAccountId?: StringWithAggregatesFilter<"Database"> | string
    name?: StringWithAggregatesFilter<"Database"> | string
    username?: StringWithAggregatesFilter<"Database"> | string
    password?: StringWithAggregatesFilter<"Database"> | string
    type?: EnumDatabaseTypeWithAggregatesFilter<"Database"> | $Enums.DatabaseType
    size?: IntWithAggregatesFilter<"Database"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Database"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Database"> | Date | string
  }

  export type EmailAccountWhereInput = {
    AND?: EmailAccountWhereInput | EmailAccountWhereInput[]
    OR?: EmailAccountWhereInput[]
    NOT?: EmailAccountWhereInput | EmailAccountWhereInput[]
    id?: StringFilter<"EmailAccount"> | string
    hostingAccountId?: StringFilter<"EmailAccount"> | string
    email?: StringFilter<"EmailAccount"> | string
    password?: StringFilter<"EmailAccount"> | string
    forwardTo?: StringNullableFilter<"EmailAccount"> | string | null
    quotaSize?: IntFilter<"EmailAccount"> | number
    usedQuota?: IntFilter<"EmailAccount"> | number
    createdAt?: DateTimeFilter<"EmailAccount"> | Date | string
    updatedAt?: DateTimeFilter<"EmailAccount"> | Date | string
    hostingAccount?: XOR<HostingAccountScalarRelationFilter, HostingAccountWhereInput>
  }

  export type EmailAccountOrderByWithRelationInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    forwardTo?: SortOrderInput | SortOrder
    quotaSize?: SortOrder
    usedQuota?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hostingAccount?: HostingAccountOrderByWithRelationInput
  }

  export type EmailAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: EmailAccountWhereInput | EmailAccountWhereInput[]
    OR?: EmailAccountWhereInput[]
    NOT?: EmailAccountWhereInput | EmailAccountWhereInput[]
    hostingAccountId?: StringFilter<"EmailAccount"> | string
    password?: StringFilter<"EmailAccount"> | string
    forwardTo?: StringNullableFilter<"EmailAccount"> | string | null
    quotaSize?: IntFilter<"EmailAccount"> | number
    usedQuota?: IntFilter<"EmailAccount"> | number
    createdAt?: DateTimeFilter<"EmailAccount"> | Date | string
    updatedAt?: DateTimeFilter<"EmailAccount"> | Date | string
    hostingAccount?: XOR<HostingAccountScalarRelationFilter, HostingAccountWhereInput>
  }, "id" | "email">

  export type EmailAccountOrderByWithAggregationInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    forwardTo?: SortOrderInput | SortOrder
    quotaSize?: SortOrder
    usedQuota?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailAccountCountOrderByAggregateInput
    _avg?: EmailAccountAvgOrderByAggregateInput
    _max?: EmailAccountMaxOrderByAggregateInput
    _min?: EmailAccountMinOrderByAggregateInput
    _sum?: EmailAccountSumOrderByAggregateInput
  }

  export type EmailAccountScalarWhereWithAggregatesInput = {
    AND?: EmailAccountScalarWhereWithAggregatesInput | EmailAccountScalarWhereWithAggregatesInput[]
    OR?: EmailAccountScalarWhereWithAggregatesInput[]
    NOT?: EmailAccountScalarWhereWithAggregatesInput | EmailAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailAccount"> | string
    hostingAccountId?: StringWithAggregatesFilter<"EmailAccount"> | string
    email?: StringWithAggregatesFilter<"EmailAccount"> | string
    password?: StringWithAggregatesFilter<"EmailAccount"> | string
    forwardTo?: StringNullableWithAggregatesFilter<"EmailAccount"> | string | null
    quotaSize?: IntWithAggregatesFilter<"EmailAccount"> | number
    usedQuota?: IntWithAggregatesFilter<"EmailAccount"> | number
    createdAt?: DateTimeWithAggregatesFilter<"EmailAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailAccount"> | Date | string
  }

  export type MaintenanceLogWhereInput = {
    AND?: MaintenanceLogWhereInput | MaintenanceLogWhereInput[]
    OR?: MaintenanceLogWhereInput[]
    NOT?: MaintenanceLogWhereInput | MaintenanceLogWhereInput[]
    id?: StringFilter<"MaintenanceLog"> | string
    serverId?: StringFilter<"MaintenanceLog"> | string
    type?: EnumMaintenanceTypeFilter<"MaintenanceLog"> | $Enums.MaintenanceType
    description?: StringFilter<"MaintenanceLog"> | string
    startTime?: DateTimeFilter<"MaintenanceLog"> | Date | string
    endTime?: DateTimeNullableFilter<"MaintenanceLog"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceLog"> | $Enums.MaintenanceStatus
    createdAt?: DateTimeFilter<"MaintenanceLog"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceLog"> | Date | string
    server?: XOR<ServerScalarRelationFilter, ServerWhereInput>
  }

  export type MaintenanceLogOrderByWithRelationInput = {
    id?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    server?: ServerOrderByWithRelationInput
  }

  export type MaintenanceLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MaintenanceLogWhereInput | MaintenanceLogWhereInput[]
    OR?: MaintenanceLogWhereInput[]
    NOT?: MaintenanceLogWhereInput | MaintenanceLogWhereInput[]
    serverId?: StringFilter<"MaintenanceLog"> | string
    type?: EnumMaintenanceTypeFilter<"MaintenanceLog"> | $Enums.MaintenanceType
    description?: StringFilter<"MaintenanceLog"> | string
    startTime?: DateTimeFilter<"MaintenanceLog"> | Date | string
    endTime?: DateTimeNullableFilter<"MaintenanceLog"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceLog"> | $Enums.MaintenanceStatus
    createdAt?: DateTimeFilter<"MaintenanceLog"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceLog"> | Date | string
    server?: XOR<ServerScalarRelationFilter, ServerWhereInput>
  }, "id">

  export type MaintenanceLogOrderByWithAggregationInput = {
    id?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MaintenanceLogCountOrderByAggregateInput
    _max?: MaintenanceLogMaxOrderByAggregateInput
    _min?: MaintenanceLogMinOrderByAggregateInput
  }

  export type MaintenanceLogScalarWhereWithAggregatesInput = {
    AND?: MaintenanceLogScalarWhereWithAggregatesInput | MaintenanceLogScalarWhereWithAggregatesInput[]
    OR?: MaintenanceLogScalarWhereWithAggregatesInput[]
    NOT?: MaintenanceLogScalarWhereWithAggregatesInput | MaintenanceLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MaintenanceLog"> | string
    serverId?: StringWithAggregatesFilter<"MaintenanceLog"> | string
    type?: EnumMaintenanceTypeWithAggregatesFilter<"MaintenanceLog"> | $Enums.MaintenanceType
    description?: StringWithAggregatesFilter<"MaintenanceLog"> | string
    startTime?: DateTimeWithAggregatesFilter<"MaintenanceLog"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"MaintenanceLog"> | Date | string | null
    status?: EnumMaintenanceStatusWithAggregatesFilter<"MaintenanceLog"> | $Enums.MaintenanceStatus
    createdAt?: DateTimeWithAggregatesFilter<"MaintenanceLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MaintenanceLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationCreateNestedManyWithoutUserInput
    passwordResets?: PasswordResetCreateNestedManyWithoutUserInput
    domains?: DomainCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    domains?: DomainUncheckedCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUpdateManyWithoutUserNestedInput
    passwordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    domains?: DomainUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    domains?: DomainUncheckedUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationCreateInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutEmailVerificationsInput
  }

  export type EmailVerificationUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type EmailVerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmailVerificationsNestedInput
  }

  export type EmailVerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationCreateManyInput = {
    id?: string
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type EmailVerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPasswordResetsInput
  }

  export type PasswordResetUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPasswordResetsNestedInput
  }

  export type PasswordResetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetCreateManyInput = {
    id?: string
    token: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainCreateInput = {
    id?: string
    name: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDomainsInput
    nameservers?: NameserverCreateNestedManyWithoutDomainInput
    dnsRecords?: DnsRecordCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutDomainInput
  }

  export type DomainUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    nameservers?: NameserverUncheckedCreateNestedManyWithoutDomainInput
    dnsRecords?: DnsRecordUncheckedCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutDomainInput
  }

  export type DomainUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDomainsNestedInput
    nameservers?: NameserverUpdateManyWithoutDomainNestedInput
    dnsRecords?: DnsRecordUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutDomainNestedInput
  }

  export type DomainUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nameservers?: NameserverUncheckedUpdateManyWithoutDomainNestedInput
    dnsRecords?: DnsRecordUncheckedUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type DomainCreateManyInput = {
    id?: string
    name: string
    userId: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DomainUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameserverCreateInput = {
    id?: string
    hostname: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    domain: DomainCreateNestedOneWithoutNameserversInput
  }

  export type NameserverUncheckedCreateInput = {
    id?: string
    hostname: string
    domainId: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NameserverUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostname?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: DomainUpdateOneRequiredWithoutNameserversNestedInput
  }

  export type NameserverUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostname?: StringFieldUpdateOperationsInput | string
    domainId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameserverCreateManyInput = {
    id?: string
    hostname: string
    domainId: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NameserverUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostname?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameserverUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostname?: StringFieldUpdateOperationsInput | string
    domainId?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DnsRecordCreateInput = {
    id?: string
    type: string
    name: string
    content: string
    ttl?: number
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    domain: DomainCreateNestedOneWithoutDnsRecordsInput
  }

  export type DnsRecordUncheckedCreateInput = {
    id?: string
    domainId: string
    type: string
    name: string
    content: string
    ttl?: number
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DnsRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ttl?: IntFieldUpdateOperationsInput | number
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: DomainUpdateOneRequiredWithoutDnsRecordsNestedInput
  }

  export type DnsRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    domainId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ttl?: IntFieldUpdateOperationsInput | number
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DnsRecordCreateManyInput = {
    id?: string
    domainId: string
    type: string
    name: string
    content: string
    ttl?: number
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DnsRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ttl?: IntFieldUpdateOperationsInput | number
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DnsRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    domainId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ttl?: IntFieldUpdateOperationsInput | number
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingPackageCreateInput = {
    id?: string
    name: string
    description?: string | null
    diskSpace: number
    bandwidth: number
    emailAccounts: number
    databases: number
    subdomains: number
    price: Decimal | DecimalJsLike | number | string
    billingCycle: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccounts?: HostingAccountCreateNestedManyWithoutPackageInput
  }

  export type HostingPackageUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    diskSpace: number
    bandwidth: number
    emailAccounts: number
    databases: number
    subdomains: number
    price: Decimal | DecimalJsLike | number | string
    billingCycle: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccounts?: HostingAccountUncheckedCreateNestedManyWithoutPackageInput
  }

  export type HostingPackageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diskSpace?: IntFieldUpdateOperationsInput | number
    bandwidth?: IntFieldUpdateOperationsInput | number
    emailAccounts?: IntFieldUpdateOperationsInput | number
    databases?: IntFieldUpdateOperationsInput | number
    subdomains?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccounts?: HostingAccountUpdateManyWithoutPackageNestedInput
  }

  export type HostingPackageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diskSpace?: IntFieldUpdateOperationsInput | number
    bandwidth?: IntFieldUpdateOperationsInput | number
    emailAccounts?: IntFieldUpdateOperationsInput | number
    databases?: IntFieldUpdateOperationsInput | number
    subdomains?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccounts?: HostingAccountUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type HostingPackageCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    diskSpace: number
    bandwidth: number
    emailAccounts: number
    databases: number
    subdomains: number
    price: Decimal | DecimalJsLike | number | string
    billingCycle: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HostingPackageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diskSpace?: IntFieldUpdateOperationsInput | number
    bandwidth?: IntFieldUpdateOperationsInput | number
    emailAccounts?: IntFieldUpdateOperationsInput | number
    databases?: IntFieldUpdateOperationsInput | number
    subdomains?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingPackageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diskSpace?: IntFieldUpdateOperationsInput | number
    bandwidth?: IntFieldUpdateOperationsInput | number
    emailAccounts?: IntFieldUpdateOperationsInput | number
    databases?: IntFieldUpdateOperationsInput | number
    subdomains?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingAccountCreateInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHostingAccountInput
    package: HostingPackageCreateNestedOneWithoutHostingAccountsInput
    domain?: DomainCreateNestedOneWithoutHostingAccountInput
    server: ServerCreateNestedOneWithoutHostingAccountsInput
    ftpAccounts?: FTPAccountCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateInput = {
    id?: string
    userId: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
    ftpAccounts?: FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostingAccountNestedInput
    package?: HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput
    domain?: DomainUpdateOneWithoutHostingAccountNestedInput
    server?: ServerUpdateOneRequiredWithoutHostingAccountsNestedInput
    ftpAccounts?: FTPAccountUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
    ftpAccounts?: FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountCreateManyInput = {
    id?: string
    userId: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
  }

  export type HostingAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type ServerCreateInput = {
    id?: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status?: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace?: number
    totalBandwidth: number
    usedBandwidth?: number
    cpuCores: number
    ram: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccounts?: HostingAccountCreateNestedManyWithoutServerInput
    maintenanceLogs?: MaintenanceLogCreateNestedManyWithoutServerInput
  }

  export type ServerUncheckedCreateInput = {
    id?: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status?: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace?: number
    totalBandwidth: number
    usedBandwidth?: number
    cpuCores: number
    ram: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccounts?: HostingAccountUncheckedCreateNestedManyWithoutServerInput
    maintenanceLogs?: MaintenanceLogUncheckedCreateNestedManyWithoutServerInput
  }

  export type ServerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccounts?: HostingAccountUpdateManyWithoutServerNestedInput
    maintenanceLogs?: MaintenanceLogUpdateManyWithoutServerNestedInput
  }

  export type ServerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccounts?: HostingAccountUncheckedUpdateManyWithoutServerNestedInput
    maintenanceLogs?: MaintenanceLogUncheckedUpdateManyWithoutServerNestedInput
  }

  export type ServerCreateManyInput = {
    id?: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status?: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace?: number
    totalBandwidth: number
    usedBandwidth?: number
    cpuCores: number
    ram: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FTPAccountCreateInput = {
    id?: string
    username: string
    password: string
    directory?: string
    permissions?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccount: HostingAccountCreateNestedOneWithoutFtpAccountsInput
  }

  export type FTPAccountUncheckedCreateInput = {
    id?: string
    hostingAccountId: string
    username: string
    password: string
    directory?: string
    permissions?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FTPAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    directory?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccount?: HostingAccountUpdateOneRequiredWithoutFtpAccountsNestedInput
  }

  export type FTPAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostingAccountId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    directory?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FTPAccountCreateManyInput = {
    id?: string
    hostingAccountId: string
    username: string
    password: string
    directory?: string
    permissions?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FTPAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    directory?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FTPAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostingAccountId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    directory?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseCreateInput = {
    id?: string
    name: string
    username: string
    password: string
    type?: $Enums.DatabaseType
    size?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccount: HostingAccountCreateNestedOneWithoutDatabasesInput
  }

  export type DatabaseUncheckedCreateInput = {
    id?: string
    hostingAccountId: string
    name: string
    username: string
    password: string
    type?: $Enums.DatabaseType
    size?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatabaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumDatabaseTypeFieldUpdateOperationsInput | $Enums.DatabaseType
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccount?: HostingAccountUpdateOneRequiredWithoutDatabasesNestedInput
  }

  export type DatabaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostingAccountId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumDatabaseTypeFieldUpdateOperationsInput | $Enums.DatabaseType
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseCreateManyInput = {
    id?: string
    hostingAccountId: string
    name: string
    username: string
    password: string
    type?: $Enums.DatabaseType
    size?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatabaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumDatabaseTypeFieldUpdateOperationsInput | $Enums.DatabaseType
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostingAccountId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumDatabaseTypeFieldUpdateOperationsInput | $Enums.DatabaseType
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailAccountCreateInput = {
    id?: string
    email: string
    password: string
    forwardTo?: string | null
    quotaSize?: number
    usedQuota?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccount: HostingAccountCreateNestedOneWithoutEmailAccountsInput
  }

  export type EmailAccountUncheckedCreateInput = {
    id?: string
    hostingAccountId: string
    email: string
    password: string
    forwardTo?: string | null
    quotaSize?: number
    usedQuota?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailAccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    forwardTo?: NullableStringFieldUpdateOperationsInput | string | null
    quotaSize?: IntFieldUpdateOperationsInput | number
    usedQuota?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccount?: HostingAccountUpdateOneRequiredWithoutEmailAccountsNestedInput
  }

  export type EmailAccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostingAccountId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    forwardTo?: NullableStringFieldUpdateOperationsInput | string | null
    quotaSize?: IntFieldUpdateOperationsInput | number
    usedQuota?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailAccountCreateManyInput = {
    id?: string
    hostingAccountId: string
    email: string
    password: string
    forwardTo?: string | null
    quotaSize?: number
    usedQuota?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailAccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    forwardTo?: NullableStringFieldUpdateOperationsInput | string | null
    quotaSize?: IntFieldUpdateOperationsInput | number
    usedQuota?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailAccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostingAccountId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    forwardTo?: NullableStringFieldUpdateOperationsInput | string | null
    quotaSize?: IntFieldUpdateOperationsInput | number
    usedQuota?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceLogCreateInput = {
    id?: string
    type: $Enums.MaintenanceType
    description: string
    startTime: Date | string
    endTime?: Date | string | null
    status?: $Enums.MaintenanceStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    server: ServerCreateNestedOneWithoutMaintenanceLogsInput
  }

  export type MaintenanceLogUncheckedCreateInput = {
    id?: string
    serverId: string
    type: $Enums.MaintenanceType
    description: string
    startTime: Date | string
    endTime?: Date | string | null
    status?: $Enums.MaintenanceStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMaintenanceTypeFieldUpdateOperationsInput | $Enums.MaintenanceType
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    server?: ServerUpdateOneRequiredWithoutMaintenanceLogsNestedInput
  }

  export type MaintenanceLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    type?: EnumMaintenanceTypeFieldUpdateOperationsInput | $Enums.MaintenanceType
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceLogCreateManyInput = {
    id?: string
    serverId: string
    type: $Enums.MaintenanceType
    description: string
    startTime: Date | string
    endTime?: Date | string | null
    status?: $Enums.MaintenanceStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMaintenanceTypeFieldUpdateOperationsInput | $Enums.MaintenanceType
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serverId?: StringFieldUpdateOperationsInput | string
    type?: EnumMaintenanceTypeFieldUpdateOperationsInput | $Enums.MaintenanceType
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type EnumProviderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProviderNullableFilter<$PrismaModel> | $Enums.Provider | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EmailVerificationListRelationFilter = {
    every?: EmailVerificationWhereInput
    some?: EmailVerificationWhereInput
    none?: EmailVerificationWhereInput
  }

  export type PasswordResetListRelationFilter = {
    every?: PasswordResetWhereInput
    some?: PasswordResetWhereInput
    none?: PasswordResetWhereInput
  }

  export type DomainListRelationFilter = {
    every?: DomainWhereInput
    some?: DomainWhereInput
    none?: DomainWhereInput
  }

  export type HostingAccountListRelationFilter = {
    every?: HostingAccountWhereInput
    some?: HostingAccountWhereInput
    none?: HostingAccountWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EmailVerificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordResetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DomainOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HostingAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    loginAttempts?: SortOrder
    lockoutUntil?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    loginAttempts?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    loginAttempts?: SortOrder
    lockoutUntil?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    role?: SortOrder
    provider?: SortOrder
    providerId?: SortOrder
    loginAttempts?: SortOrder
    lockoutUntil?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    loginAttempts?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type EnumProviderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProviderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Provider | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProviderNullableFilter<$PrismaModel>
    _max?: NestedEnumProviderNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type EmailVerificationCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailVerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailVerificationMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type PasswordResetMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumDomainStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DomainStatus | EnumDomainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDomainStatusFilter<$PrismaModel> | $Enums.DomainStatus
  }

  export type NameserverListRelationFilter = {
    every?: NameserverWhereInput
    some?: NameserverWhereInput
    none?: NameserverWhereInput
  }

  export type DnsRecordListRelationFilter = {
    every?: DnsRecordWhereInput
    some?: DnsRecordWhereInput
    none?: DnsRecordWhereInput
  }

  export type NameserverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DnsRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DomainCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    registrar?: SortOrder
    registrationDate?: SortOrder
    expiryDate?: SortOrder
    autoRenew?: SortOrder
    status?: SortOrder
    privacyProtection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    registrar?: SortOrder
    registrationDate?: SortOrder
    expiryDate?: SortOrder
    autoRenew?: SortOrder
    status?: SortOrder
    privacyProtection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DomainMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    registrar?: SortOrder
    registrationDate?: SortOrder
    expiryDate?: SortOrder
    autoRenew?: SortOrder
    status?: SortOrder
    privacyProtection?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDomainStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DomainStatus | EnumDomainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDomainStatusWithAggregatesFilter<$PrismaModel> | $Enums.DomainStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDomainStatusFilter<$PrismaModel>
    _max?: NestedEnumDomainStatusFilter<$PrismaModel>
  }

  export type DomainScalarRelationFilter = {
    is?: DomainWhereInput
    isNot?: DomainWhereInput
  }

  export type NameserverCountOrderByAggregateInput = {
    id?: SortOrder
    hostname?: SortOrder
    domainId?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NameserverAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type NameserverMaxOrderByAggregateInput = {
    id?: SortOrder
    hostname?: SortOrder
    domainId?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NameserverMinOrderByAggregateInput = {
    id?: SortOrder
    hostname?: SortOrder
    domainId?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NameserverSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DnsRecordCountOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    content?: SortOrder
    ttl?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DnsRecordAvgOrderByAggregateInput = {
    ttl?: SortOrder
    priority?: SortOrder
  }

  export type DnsRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    content?: SortOrder
    ttl?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DnsRecordMinOrderByAggregateInput = {
    id?: SortOrder
    domainId?: SortOrder
    type?: SortOrder
    name?: SortOrder
    content?: SortOrder
    ttl?: SortOrder
    priority?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DnsRecordSumOrderByAggregateInput = {
    ttl?: SortOrder
    priority?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type HostingPackageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    diskSpace?: SortOrder
    bandwidth?: SortOrder
    emailAccounts?: SortOrder
    databases?: SortOrder
    subdomains?: SortOrder
    price?: SortOrder
    billingCycle?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HostingPackageAvgOrderByAggregateInput = {
    diskSpace?: SortOrder
    bandwidth?: SortOrder
    emailAccounts?: SortOrder
    databases?: SortOrder
    subdomains?: SortOrder
    price?: SortOrder
  }

  export type HostingPackageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    diskSpace?: SortOrder
    bandwidth?: SortOrder
    emailAccounts?: SortOrder
    databases?: SortOrder
    subdomains?: SortOrder
    price?: SortOrder
    billingCycle?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HostingPackageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    diskSpace?: SortOrder
    bandwidth?: SortOrder
    emailAccounts?: SortOrder
    databases?: SortOrder
    subdomains?: SortOrder
    price?: SortOrder
    billingCycle?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HostingPackageSumOrderByAggregateInput = {
    diskSpace?: SortOrder
    bandwidth?: SortOrder
    emailAccounts?: SortOrder
    databases?: SortOrder
    subdomains?: SortOrder
    price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumHostingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HostingStatus | EnumHostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingStatusFilter<$PrismaModel> | $Enums.HostingStatus
  }

  export type HostingPackageScalarRelationFilter = {
    is?: HostingPackageWhereInput
    isNot?: HostingPackageWhereInput
  }

  export type DomainNullableScalarRelationFilter = {
    is?: DomainWhereInput | null
    isNot?: DomainWhereInput | null
  }

  export type ServerScalarRelationFilter = {
    is?: ServerWhereInput
    isNot?: ServerWhereInput
  }

  export type FTPAccountListRelationFilter = {
    every?: FTPAccountWhereInput
    some?: FTPAccountWhereInput
    none?: FTPAccountWhereInput
  }

  export type DatabaseListRelationFilter = {
    every?: DatabaseWhereInput
    some?: DatabaseWhereInput
    none?: DatabaseWhereInput
  }

  export type EmailAccountListRelationFilter = {
    every?: EmailAccountWhereInput
    some?: EmailAccountWhereInput
    none?: EmailAccountWhereInput
  }

  export type FTPAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DatabaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HostingAccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    packageId?: SortOrder
    domainId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    serverIp?: SortOrder
    status?: SortOrder
    suspensionReason?: SortOrder
    diskUsage?: SortOrder
    bandwidthUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serverId?: SortOrder
  }

  export type HostingAccountAvgOrderByAggregateInput = {
    diskUsage?: SortOrder
    bandwidthUsage?: SortOrder
  }

  export type HostingAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    packageId?: SortOrder
    domainId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    serverIp?: SortOrder
    status?: SortOrder
    suspensionReason?: SortOrder
    diskUsage?: SortOrder
    bandwidthUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serverId?: SortOrder
  }

  export type HostingAccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    packageId?: SortOrder
    domainId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    serverIp?: SortOrder
    status?: SortOrder
    suspensionReason?: SortOrder
    diskUsage?: SortOrder
    bandwidthUsage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serverId?: SortOrder
  }

  export type HostingAccountSumOrderByAggregateInput = {
    diskUsage?: SortOrder
    bandwidthUsage?: SortOrder
  }

  export type EnumHostingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HostingStatus | EnumHostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingStatusWithAggregatesFilter<$PrismaModel> | $Enums.HostingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostingStatusFilter<$PrismaModel>
    _max?: NestedEnumHostingStatusFilter<$PrismaModel>
  }

  export type EnumServerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerType | EnumServerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServerTypeFilter<$PrismaModel> | $Enums.ServerType
  }

  export type EnumServerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerStatus | EnumServerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServerStatusFilter<$PrismaModel> | $Enums.ServerStatus
  }

  export type MaintenanceLogListRelationFilter = {
    every?: MaintenanceLogWhereInput
    some?: MaintenanceLogWhereInput
    none?: MaintenanceLogWhereInput
  }

  export type MaintenanceLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ipAddress?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    operatingSystem?: SortOrder
    totalDiskSpace?: SortOrder
    usedDiskSpace?: SortOrder
    totalBandwidth?: SortOrder
    usedBandwidth?: SortOrder
    cpuCores?: SortOrder
    ram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServerAvgOrderByAggregateInput = {
    totalDiskSpace?: SortOrder
    usedDiskSpace?: SortOrder
    totalBandwidth?: SortOrder
    usedBandwidth?: SortOrder
    cpuCores?: SortOrder
    ram?: SortOrder
  }

  export type ServerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ipAddress?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    operatingSystem?: SortOrder
    totalDiskSpace?: SortOrder
    usedDiskSpace?: SortOrder
    totalBandwidth?: SortOrder
    usedBandwidth?: SortOrder
    cpuCores?: SortOrder
    ram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ipAddress?: SortOrder
    type?: SortOrder
    location?: SortOrder
    status?: SortOrder
    operatingSystem?: SortOrder
    totalDiskSpace?: SortOrder
    usedDiskSpace?: SortOrder
    totalBandwidth?: SortOrder
    usedBandwidth?: SortOrder
    cpuCores?: SortOrder
    ram?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServerSumOrderByAggregateInput = {
    totalDiskSpace?: SortOrder
    usedDiskSpace?: SortOrder
    totalBandwidth?: SortOrder
    usedBandwidth?: SortOrder
    cpuCores?: SortOrder
    ram?: SortOrder
  }

  export type EnumServerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerType | EnumServerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServerTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServerTypeFilter<$PrismaModel>
    _max?: NestedEnumServerTypeFilter<$PrismaModel>
  }

  export type EnumServerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerStatus | EnumServerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServerStatusWithAggregatesFilter<$PrismaModel> | $Enums.ServerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServerStatusFilter<$PrismaModel>
    _max?: NestedEnumServerStatusFilter<$PrismaModel>
  }

  export type HostingAccountScalarRelationFilter = {
    is?: HostingAccountWhereInput
    isNot?: HostingAccountWhereInput
  }

  export type FTPAccountCountOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    directory?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FTPAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    directory?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FTPAccountMinOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    username?: SortOrder
    password?: SortOrder
    directory?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDatabaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DatabaseType | EnumDatabaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDatabaseTypeFilter<$PrismaModel> | $Enums.DatabaseType
  }

  export type DatabaseCountOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatabaseAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type DatabaseMaxOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatabaseMinOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    type?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatabaseSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumDatabaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DatabaseType | EnumDatabaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDatabaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.DatabaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDatabaseTypeFilter<$PrismaModel>
    _max?: NestedEnumDatabaseTypeFilter<$PrismaModel>
  }

  export type EmailAccountCountOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    forwardTo?: SortOrder
    quotaSize?: SortOrder
    usedQuota?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailAccountAvgOrderByAggregateInput = {
    quotaSize?: SortOrder
    usedQuota?: SortOrder
  }

  export type EmailAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    forwardTo?: SortOrder
    quotaSize?: SortOrder
    usedQuota?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailAccountMinOrderByAggregateInput = {
    id?: SortOrder
    hostingAccountId?: SortOrder
    email?: SortOrder
    password?: SortOrder
    forwardTo?: SortOrder
    quotaSize?: SortOrder
    usedQuota?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailAccountSumOrderByAggregateInput = {
    quotaSize?: SortOrder
    usedQuota?: SortOrder
  }

  export type EnumMaintenanceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceType | EnumMaintenanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTypeFilter<$PrismaModel> | $Enums.MaintenanceType
  }

  export type EnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type MaintenanceLogCountOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceLogMaxOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MaintenanceLogMinOrderByAggregateInput = {
    id?: SortOrder
    serverId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMaintenanceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceType | EnumMaintenanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTypeWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceTypeFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceTypeFilter<$PrismaModel>
  }

  export type EnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }

  export type EmailVerificationCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailVerificationCreateWithoutUserInput, EmailVerificationUncheckedCreateWithoutUserInput> | EmailVerificationCreateWithoutUserInput[] | EmailVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationCreateOrConnectWithoutUserInput | EmailVerificationCreateOrConnectWithoutUserInput[]
    createMany?: EmailVerificationCreateManyUserInputEnvelope
    connect?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
  }

  export type PasswordResetCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type DomainCreateNestedManyWithoutUserInput = {
    create?: XOR<DomainCreateWithoutUserInput, DomainUncheckedCreateWithoutUserInput> | DomainCreateWithoutUserInput[] | DomainUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DomainCreateOrConnectWithoutUserInput | DomainCreateOrConnectWithoutUserInput[]
    createMany?: DomainCreateManyUserInputEnvelope
    connect?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
  }

  export type HostingAccountCreateNestedManyWithoutUserInput = {
    create?: XOR<HostingAccountCreateWithoutUserInput, HostingAccountUncheckedCreateWithoutUserInput> | HostingAccountCreateWithoutUserInput[] | HostingAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutUserInput | HostingAccountCreateOrConnectWithoutUserInput[]
    createMany?: HostingAccountCreateManyUserInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type EmailVerificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmailVerificationCreateWithoutUserInput, EmailVerificationUncheckedCreateWithoutUserInput> | EmailVerificationCreateWithoutUserInput[] | EmailVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationCreateOrConnectWithoutUserInput | EmailVerificationCreateOrConnectWithoutUserInput[]
    createMany?: EmailVerificationCreateManyUserInputEnvelope
    connect?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
  }

  export type PasswordResetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
  }

  export type DomainUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DomainCreateWithoutUserInput, DomainUncheckedCreateWithoutUserInput> | DomainCreateWithoutUserInput[] | DomainUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DomainCreateOrConnectWithoutUserInput | DomainCreateOrConnectWithoutUserInput[]
    createMany?: DomainCreateManyUserInputEnvelope
    connect?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
  }

  export type HostingAccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HostingAccountCreateWithoutUserInput, HostingAccountUncheckedCreateWithoutUserInput> | HostingAccountCreateWithoutUserInput[] | HostingAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutUserInput | HostingAccountCreateOrConnectWithoutUserInput[]
    createMany?: HostingAccountCreateManyUserInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableEnumProviderFieldUpdateOperationsInput = {
    set?: $Enums.Provider | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EmailVerificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailVerificationCreateWithoutUserInput, EmailVerificationUncheckedCreateWithoutUserInput> | EmailVerificationCreateWithoutUserInput[] | EmailVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationCreateOrConnectWithoutUserInput | EmailVerificationCreateOrConnectWithoutUserInput[]
    upsert?: EmailVerificationUpsertWithWhereUniqueWithoutUserInput | EmailVerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailVerificationCreateManyUserInputEnvelope
    set?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    disconnect?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    delete?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    connect?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    update?: EmailVerificationUpdateWithWhereUniqueWithoutUserInput | EmailVerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailVerificationUpdateManyWithWhereWithoutUserInput | EmailVerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailVerificationScalarWhereInput | EmailVerificationScalarWhereInput[]
  }

  export type PasswordResetUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutUserInput | PasswordResetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutUserInput | PasswordResetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutUserInput | PasswordResetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type DomainUpdateManyWithoutUserNestedInput = {
    create?: XOR<DomainCreateWithoutUserInput, DomainUncheckedCreateWithoutUserInput> | DomainCreateWithoutUserInput[] | DomainUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DomainCreateOrConnectWithoutUserInput | DomainCreateOrConnectWithoutUserInput[]
    upsert?: DomainUpsertWithWhereUniqueWithoutUserInput | DomainUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DomainCreateManyUserInputEnvelope
    set?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    disconnect?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    delete?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    connect?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    update?: DomainUpdateWithWhereUniqueWithoutUserInput | DomainUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DomainUpdateManyWithWhereWithoutUserInput | DomainUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DomainScalarWhereInput | DomainScalarWhereInput[]
  }

  export type HostingAccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<HostingAccountCreateWithoutUserInput, HostingAccountUncheckedCreateWithoutUserInput> | HostingAccountCreateWithoutUserInput[] | HostingAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutUserInput | HostingAccountCreateOrConnectWithoutUserInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutUserInput | HostingAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HostingAccountCreateManyUserInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutUserInput | HostingAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutUserInput | HostingAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type EmailVerificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmailVerificationCreateWithoutUserInput, EmailVerificationUncheckedCreateWithoutUserInput> | EmailVerificationCreateWithoutUserInput[] | EmailVerificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmailVerificationCreateOrConnectWithoutUserInput | EmailVerificationCreateOrConnectWithoutUserInput[]
    upsert?: EmailVerificationUpsertWithWhereUniqueWithoutUserInput | EmailVerificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmailVerificationCreateManyUserInputEnvelope
    set?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    disconnect?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    delete?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    connect?: EmailVerificationWhereUniqueInput | EmailVerificationWhereUniqueInput[]
    update?: EmailVerificationUpdateWithWhereUniqueWithoutUserInput | EmailVerificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmailVerificationUpdateManyWithWhereWithoutUserInput | EmailVerificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmailVerificationScalarWhereInput | EmailVerificationScalarWhereInput[]
  }

  export type PasswordResetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput> | PasswordResetCreateWithoutUserInput[] | PasswordResetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordResetCreateOrConnectWithoutUserInput | PasswordResetCreateOrConnectWithoutUserInput[]
    upsert?: PasswordResetUpsertWithWhereUniqueWithoutUserInput | PasswordResetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordResetCreateManyUserInputEnvelope
    set?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    disconnect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    delete?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    connect?: PasswordResetWhereUniqueInput | PasswordResetWhereUniqueInput[]
    update?: PasswordResetUpdateWithWhereUniqueWithoutUserInput | PasswordResetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordResetUpdateManyWithWhereWithoutUserInput | PasswordResetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
  }

  export type DomainUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DomainCreateWithoutUserInput, DomainUncheckedCreateWithoutUserInput> | DomainCreateWithoutUserInput[] | DomainUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DomainCreateOrConnectWithoutUserInput | DomainCreateOrConnectWithoutUserInput[]
    upsert?: DomainUpsertWithWhereUniqueWithoutUserInput | DomainUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DomainCreateManyUserInputEnvelope
    set?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    disconnect?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    delete?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    connect?: DomainWhereUniqueInput | DomainWhereUniqueInput[]
    update?: DomainUpdateWithWhereUniqueWithoutUserInput | DomainUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DomainUpdateManyWithWhereWithoutUserInput | DomainUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DomainScalarWhereInput | DomainScalarWhereInput[]
  }

  export type HostingAccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HostingAccountCreateWithoutUserInput, HostingAccountUncheckedCreateWithoutUserInput> | HostingAccountCreateWithoutUserInput[] | HostingAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutUserInput | HostingAccountCreateOrConnectWithoutUserInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutUserInput | HostingAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HostingAccountCreateManyUserInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutUserInput | HostingAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutUserInput | HostingAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEmailVerificationsInput = {
    create?: XOR<UserCreateWithoutEmailVerificationsInput, UserUncheckedCreateWithoutEmailVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailVerificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEmailVerificationsNestedInput = {
    create?: XOR<UserCreateWithoutEmailVerificationsInput, UserUncheckedCreateWithoutEmailVerificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmailVerificationsInput
    upsert?: UserUpsertWithoutEmailVerificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmailVerificationsInput, UserUpdateWithoutEmailVerificationsInput>, UserUncheckedUpdateWithoutEmailVerificationsInput>
  }

  export type UserCreateNestedOneWithoutPasswordResetsInput = {
    create?: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordResetsNestedInput = {
    create?: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordResetsInput
    upsert?: UserUpsertWithoutPasswordResetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordResetsInput, UserUpdateWithoutPasswordResetsInput>, UserUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type UserCreateNestedOneWithoutDomainsInput = {
    create?: XOR<UserCreateWithoutDomainsInput, UserUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDomainsInput
    connect?: UserWhereUniqueInput
  }

  export type NameserverCreateNestedManyWithoutDomainInput = {
    create?: XOR<NameserverCreateWithoutDomainInput, NameserverUncheckedCreateWithoutDomainInput> | NameserverCreateWithoutDomainInput[] | NameserverUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: NameserverCreateOrConnectWithoutDomainInput | NameserverCreateOrConnectWithoutDomainInput[]
    createMany?: NameserverCreateManyDomainInputEnvelope
    connect?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
  }

  export type DnsRecordCreateNestedManyWithoutDomainInput = {
    create?: XOR<DnsRecordCreateWithoutDomainInput, DnsRecordUncheckedCreateWithoutDomainInput> | DnsRecordCreateWithoutDomainInput[] | DnsRecordUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DnsRecordCreateOrConnectWithoutDomainInput | DnsRecordCreateOrConnectWithoutDomainInput[]
    createMany?: DnsRecordCreateManyDomainInputEnvelope
    connect?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
  }

  export type HostingAccountCreateNestedManyWithoutDomainInput = {
    create?: XOR<HostingAccountCreateWithoutDomainInput, HostingAccountUncheckedCreateWithoutDomainInput> | HostingAccountCreateWithoutDomainInput[] | HostingAccountUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutDomainInput | HostingAccountCreateOrConnectWithoutDomainInput[]
    createMany?: HostingAccountCreateManyDomainInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type NameserverUncheckedCreateNestedManyWithoutDomainInput = {
    create?: XOR<NameserverCreateWithoutDomainInput, NameserverUncheckedCreateWithoutDomainInput> | NameserverCreateWithoutDomainInput[] | NameserverUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: NameserverCreateOrConnectWithoutDomainInput | NameserverCreateOrConnectWithoutDomainInput[]
    createMany?: NameserverCreateManyDomainInputEnvelope
    connect?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
  }

  export type DnsRecordUncheckedCreateNestedManyWithoutDomainInput = {
    create?: XOR<DnsRecordCreateWithoutDomainInput, DnsRecordUncheckedCreateWithoutDomainInput> | DnsRecordCreateWithoutDomainInput[] | DnsRecordUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DnsRecordCreateOrConnectWithoutDomainInput | DnsRecordCreateOrConnectWithoutDomainInput[]
    createMany?: DnsRecordCreateManyDomainInputEnvelope
    connect?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
  }

  export type HostingAccountUncheckedCreateNestedManyWithoutDomainInput = {
    create?: XOR<HostingAccountCreateWithoutDomainInput, HostingAccountUncheckedCreateWithoutDomainInput> | HostingAccountCreateWithoutDomainInput[] | HostingAccountUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutDomainInput | HostingAccountCreateOrConnectWithoutDomainInput[]
    createMany?: HostingAccountCreateManyDomainInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type EnumDomainStatusFieldUpdateOperationsInput = {
    set?: $Enums.DomainStatus
  }

  export type UserUpdateOneRequiredWithoutDomainsNestedInput = {
    create?: XOR<UserCreateWithoutDomainsInput, UserUncheckedCreateWithoutDomainsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDomainsInput
    upsert?: UserUpsertWithoutDomainsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDomainsInput, UserUpdateWithoutDomainsInput>, UserUncheckedUpdateWithoutDomainsInput>
  }

  export type NameserverUpdateManyWithoutDomainNestedInput = {
    create?: XOR<NameserverCreateWithoutDomainInput, NameserverUncheckedCreateWithoutDomainInput> | NameserverCreateWithoutDomainInput[] | NameserverUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: NameserverCreateOrConnectWithoutDomainInput | NameserverCreateOrConnectWithoutDomainInput[]
    upsert?: NameserverUpsertWithWhereUniqueWithoutDomainInput | NameserverUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: NameserverCreateManyDomainInputEnvelope
    set?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    disconnect?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    delete?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    connect?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    update?: NameserverUpdateWithWhereUniqueWithoutDomainInput | NameserverUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: NameserverUpdateManyWithWhereWithoutDomainInput | NameserverUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: NameserverScalarWhereInput | NameserverScalarWhereInput[]
  }

  export type DnsRecordUpdateManyWithoutDomainNestedInput = {
    create?: XOR<DnsRecordCreateWithoutDomainInput, DnsRecordUncheckedCreateWithoutDomainInput> | DnsRecordCreateWithoutDomainInput[] | DnsRecordUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DnsRecordCreateOrConnectWithoutDomainInput | DnsRecordCreateOrConnectWithoutDomainInput[]
    upsert?: DnsRecordUpsertWithWhereUniqueWithoutDomainInput | DnsRecordUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: DnsRecordCreateManyDomainInputEnvelope
    set?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    disconnect?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    delete?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    connect?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    update?: DnsRecordUpdateWithWhereUniqueWithoutDomainInput | DnsRecordUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: DnsRecordUpdateManyWithWhereWithoutDomainInput | DnsRecordUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: DnsRecordScalarWhereInput | DnsRecordScalarWhereInput[]
  }

  export type HostingAccountUpdateManyWithoutDomainNestedInput = {
    create?: XOR<HostingAccountCreateWithoutDomainInput, HostingAccountUncheckedCreateWithoutDomainInput> | HostingAccountCreateWithoutDomainInput[] | HostingAccountUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutDomainInput | HostingAccountCreateOrConnectWithoutDomainInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutDomainInput | HostingAccountUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: HostingAccountCreateManyDomainInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutDomainInput | HostingAccountUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutDomainInput | HostingAccountUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type NameserverUncheckedUpdateManyWithoutDomainNestedInput = {
    create?: XOR<NameserverCreateWithoutDomainInput, NameserverUncheckedCreateWithoutDomainInput> | NameserverCreateWithoutDomainInput[] | NameserverUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: NameserverCreateOrConnectWithoutDomainInput | NameserverCreateOrConnectWithoutDomainInput[]
    upsert?: NameserverUpsertWithWhereUniqueWithoutDomainInput | NameserverUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: NameserverCreateManyDomainInputEnvelope
    set?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    disconnect?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    delete?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    connect?: NameserverWhereUniqueInput | NameserverWhereUniqueInput[]
    update?: NameserverUpdateWithWhereUniqueWithoutDomainInput | NameserverUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: NameserverUpdateManyWithWhereWithoutDomainInput | NameserverUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: NameserverScalarWhereInput | NameserverScalarWhereInput[]
  }

  export type DnsRecordUncheckedUpdateManyWithoutDomainNestedInput = {
    create?: XOR<DnsRecordCreateWithoutDomainInput, DnsRecordUncheckedCreateWithoutDomainInput> | DnsRecordCreateWithoutDomainInput[] | DnsRecordUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: DnsRecordCreateOrConnectWithoutDomainInput | DnsRecordCreateOrConnectWithoutDomainInput[]
    upsert?: DnsRecordUpsertWithWhereUniqueWithoutDomainInput | DnsRecordUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: DnsRecordCreateManyDomainInputEnvelope
    set?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    disconnect?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    delete?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    connect?: DnsRecordWhereUniqueInput | DnsRecordWhereUniqueInput[]
    update?: DnsRecordUpdateWithWhereUniqueWithoutDomainInput | DnsRecordUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: DnsRecordUpdateManyWithWhereWithoutDomainInput | DnsRecordUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: DnsRecordScalarWhereInput | DnsRecordScalarWhereInput[]
  }

  export type HostingAccountUncheckedUpdateManyWithoutDomainNestedInput = {
    create?: XOR<HostingAccountCreateWithoutDomainInput, HostingAccountUncheckedCreateWithoutDomainInput> | HostingAccountCreateWithoutDomainInput[] | HostingAccountUncheckedCreateWithoutDomainInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutDomainInput | HostingAccountCreateOrConnectWithoutDomainInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutDomainInput | HostingAccountUpsertWithWhereUniqueWithoutDomainInput[]
    createMany?: HostingAccountCreateManyDomainInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutDomainInput | HostingAccountUpdateWithWhereUniqueWithoutDomainInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutDomainInput | HostingAccountUpdateManyWithWhereWithoutDomainInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type DomainCreateNestedOneWithoutNameserversInput = {
    create?: XOR<DomainCreateWithoutNameserversInput, DomainUncheckedCreateWithoutNameserversInput>
    connectOrCreate?: DomainCreateOrConnectWithoutNameserversInput
    connect?: DomainWhereUniqueInput
  }

  export type DomainUpdateOneRequiredWithoutNameserversNestedInput = {
    create?: XOR<DomainCreateWithoutNameserversInput, DomainUncheckedCreateWithoutNameserversInput>
    connectOrCreate?: DomainCreateOrConnectWithoutNameserversInput
    upsert?: DomainUpsertWithoutNameserversInput
    connect?: DomainWhereUniqueInput
    update?: XOR<XOR<DomainUpdateToOneWithWhereWithoutNameserversInput, DomainUpdateWithoutNameserversInput>, DomainUncheckedUpdateWithoutNameserversInput>
  }

  export type DomainCreateNestedOneWithoutDnsRecordsInput = {
    create?: XOR<DomainCreateWithoutDnsRecordsInput, DomainUncheckedCreateWithoutDnsRecordsInput>
    connectOrCreate?: DomainCreateOrConnectWithoutDnsRecordsInput
    connect?: DomainWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DomainUpdateOneRequiredWithoutDnsRecordsNestedInput = {
    create?: XOR<DomainCreateWithoutDnsRecordsInput, DomainUncheckedCreateWithoutDnsRecordsInput>
    connectOrCreate?: DomainCreateOrConnectWithoutDnsRecordsInput
    upsert?: DomainUpsertWithoutDnsRecordsInput
    connect?: DomainWhereUniqueInput
    update?: XOR<XOR<DomainUpdateToOneWithWhereWithoutDnsRecordsInput, DomainUpdateWithoutDnsRecordsInput>, DomainUncheckedUpdateWithoutDnsRecordsInput>
  }

  export type HostingAccountCreateNestedManyWithoutPackageInput = {
    create?: XOR<HostingAccountCreateWithoutPackageInput, HostingAccountUncheckedCreateWithoutPackageInput> | HostingAccountCreateWithoutPackageInput[] | HostingAccountUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutPackageInput | HostingAccountCreateOrConnectWithoutPackageInput[]
    createMany?: HostingAccountCreateManyPackageInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type HostingAccountUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<HostingAccountCreateWithoutPackageInput, HostingAccountUncheckedCreateWithoutPackageInput> | HostingAccountCreateWithoutPackageInput[] | HostingAccountUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutPackageInput | HostingAccountCreateOrConnectWithoutPackageInput[]
    createMany?: HostingAccountCreateManyPackageInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type HostingAccountUpdateManyWithoutPackageNestedInput = {
    create?: XOR<HostingAccountCreateWithoutPackageInput, HostingAccountUncheckedCreateWithoutPackageInput> | HostingAccountCreateWithoutPackageInput[] | HostingAccountUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutPackageInput | HostingAccountCreateOrConnectWithoutPackageInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutPackageInput | HostingAccountUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: HostingAccountCreateManyPackageInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutPackageInput | HostingAccountUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutPackageInput | HostingAccountUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type HostingAccountUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<HostingAccountCreateWithoutPackageInput, HostingAccountUncheckedCreateWithoutPackageInput> | HostingAccountCreateWithoutPackageInput[] | HostingAccountUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutPackageInput | HostingAccountCreateOrConnectWithoutPackageInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutPackageInput | HostingAccountUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: HostingAccountCreateManyPackageInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutPackageInput | HostingAccountUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutPackageInput | HostingAccountUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutHostingAccountInput = {
    create?: XOR<UserCreateWithoutHostingAccountInput, UserUncheckedCreateWithoutHostingAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostingAccountInput
    connect?: UserWhereUniqueInput
  }

  export type HostingPackageCreateNestedOneWithoutHostingAccountsInput = {
    create?: XOR<HostingPackageCreateWithoutHostingAccountsInput, HostingPackageUncheckedCreateWithoutHostingAccountsInput>
    connectOrCreate?: HostingPackageCreateOrConnectWithoutHostingAccountsInput
    connect?: HostingPackageWhereUniqueInput
  }

  export type DomainCreateNestedOneWithoutHostingAccountInput = {
    create?: XOR<DomainCreateWithoutHostingAccountInput, DomainUncheckedCreateWithoutHostingAccountInput>
    connectOrCreate?: DomainCreateOrConnectWithoutHostingAccountInput
    connect?: DomainWhereUniqueInput
  }

  export type ServerCreateNestedOneWithoutHostingAccountsInput = {
    create?: XOR<ServerCreateWithoutHostingAccountsInput, ServerUncheckedCreateWithoutHostingAccountsInput>
    connectOrCreate?: ServerCreateOrConnectWithoutHostingAccountsInput
    connect?: ServerWhereUniqueInput
  }

  export type FTPAccountCreateNestedManyWithoutHostingAccountInput = {
    create?: XOR<FTPAccountCreateWithoutHostingAccountInput, FTPAccountUncheckedCreateWithoutHostingAccountInput> | FTPAccountCreateWithoutHostingAccountInput[] | FTPAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: FTPAccountCreateOrConnectWithoutHostingAccountInput | FTPAccountCreateOrConnectWithoutHostingAccountInput[]
    createMany?: FTPAccountCreateManyHostingAccountInputEnvelope
    connect?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
  }

  export type DatabaseCreateNestedManyWithoutHostingAccountInput = {
    create?: XOR<DatabaseCreateWithoutHostingAccountInput, DatabaseUncheckedCreateWithoutHostingAccountInput> | DatabaseCreateWithoutHostingAccountInput[] | DatabaseUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: DatabaseCreateOrConnectWithoutHostingAccountInput | DatabaseCreateOrConnectWithoutHostingAccountInput[]
    createMany?: DatabaseCreateManyHostingAccountInputEnvelope
    connect?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
  }

  export type EmailAccountCreateNestedManyWithoutHostingAccountInput = {
    create?: XOR<EmailAccountCreateWithoutHostingAccountInput, EmailAccountUncheckedCreateWithoutHostingAccountInput> | EmailAccountCreateWithoutHostingAccountInput[] | EmailAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: EmailAccountCreateOrConnectWithoutHostingAccountInput | EmailAccountCreateOrConnectWithoutHostingAccountInput[]
    createMany?: EmailAccountCreateManyHostingAccountInputEnvelope
    connect?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
  }

  export type FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput = {
    create?: XOR<FTPAccountCreateWithoutHostingAccountInput, FTPAccountUncheckedCreateWithoutHostingAccountInput> | FTPAccountCreateWithoutHostingAccountInput[] | FTPAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: FTPAccountCreateOrConnectWithoutHostingAccountInput | FTPAccountCreateOrConnectWithoutHostingAccountInput[]
    createMany?: FTPAccountCreateManyHostingAccountInputEnvelope
    connect?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
  }

  export type DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput = {
    create?: XOR<DatabaseCreateWithoutHostingAccountInput, DatabaseUncheckedCreateWithoutHostingAccountInput> | DatabaseCreateWithoutHostingAccountInput[] | DatabaseUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: DatabaseCreateOrConnectWithoutHostingAccountInput | DatabaseCreateOrConnectWithoutHostingAccountInput[]
    createMany?: DatabaseCreateManyHostingAccountInputEnvelope
    connect?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
  }

  export type EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput = {
    create?: XOR<EmailAccountCreateWithoutHostingAccountInput, EmailAccountUncheckedCreateWithoutHostingAccountInput> | EmailAccountCreateWithoutHostingAccountInput[] | EmailAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: EmailAccountCreateOrConnectWithoutHostingAccountInput | EmailAccountCreateOrConnectWithoutHostingAccountInput[]
    createMany?: EmailAccountCreateManyHostingAccountInputEnvelope
    connect?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
  }

  export type EnumHostingStatusFieldUpdateOperationsInput = {
    set?: $Enums.HostingStatus
  }

  export type UserUpdateOneRequiredWithoutHostingAccountNestedInput = {
    create?: XOR<UserCreateWithoutHostingAccountInput, UserUncheckedCreateWithoutHostingAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutHostingAccountInput
    upsert?: UserUpsertWithoutHostingAccountInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHostingAccountInput, UserUpdateWithoutHostingAccountInput>, UserUncheckedUpdateWithoutHostingAccountInput>
  }

  export type HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput = {
    create?: XOR<HostingPackageCreateWithoutHostingAccountsInput, HostingPackageUncheckedCreateWithoutHostingAccountsInput>
    connectOrCreate?: HostingPackageCreateOrConnectWithoutHostingAccountsInput
    upsert?: HostingPackageUpsertWithoutHostingAccountsInput
    connect?: HostingPackageWhereUniqueInput
    update?: XOR<XOR<HostingPackageUpdateToOneWithWhereWithoutHostingAccountsInput, HostingPackageUpdateWithoutHostingAccountsInput>, HostingPackageUncheckedUpdateWithoutHostingAccountsInput>
  }

  export type DomainUpdateOneWithoutHostingAccountNestedInput = {
    create?: XOR<DomainCreateWithoutHostingAccountInput, DomainUncheckedCreateWithoutHostingAccountInput>
    connectOrCreate?: DomainCreateOrConnectWithoutHostingAccountInput
    upsert?: DomainUpsertWithoutHostingAccountInput
    disconnect?: DomainWhereInput | boolean
    delete?: DomainWhereInput | boolean
    connect?: DomainWhereUniqueInput
    update?: XOR<XOR<DomainUpdateToOneWithWhereWithoutHostingAccountInput, DomainUpdateWithoutHostingAccountInput>, DomainUncheckedUpdateWithoutHostingAccountInput>
  }

  export type ServerUpdateOneRequiredWithoutHostingAccountsNestedInput = {
    create?: XOR<ServerCreateWithoutHostingAccountsInput, ServerUncheckedCreateWithoutHostingAccountsInput>
    connectOrCreate?: ServerCreateOrConnectWithoutHostingAccountsInput
    upsert?: ServerUpsertWithoutHostingAccountsInput
    connect?: ServerWhereUniqueInput
    update?: XOR<XOR<ServerUpdateToOneWithWhereWithoutHostingAccountsInput, ServerUpdateWithoutHostingAccountsInput>, ServerUncheckedUpdateWithoutHostingAccountsInput>
  }

  export type FTPAccountUpdateManyWithoutHostingAccountNestedInput = {
    create?: XOR<FTPAccountCreateWithoutHostingAccountInput, FTPAccountUncheckedCreateWithoutHostingAccountInput> | FTPAccountCreateWithoutHostingAccountInput[] | FTPAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: FTPAccountCreateOrConnectWithoutHostingAccountInput | FTPAccountCreateOrConnectWithoutHostingAccountInput[]
    upsert?: FTPAccountUpsertWithWhereUniqueWithoutHostingAccountInput | FTPAccountUpsertWithWhereUniqueWithoutHostingAccountInput[]
    createMany?: FTPAccountCreateManyHostingAccountInputEnvelope
    set?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    disconnect?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    delete?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    connect?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    update?: FTPAccountUpdateWithWhereUniqueWithoutHostingAccountInput | FTPAccountUpdateWithWhereUniqueWithoutHostingAccountInput[]
    updateMany?: FTPAccountUpdateManyWithWhereWithoutHostingAccountInput | FTPAccountUpdateManyWithWhereWithoutHostingAccountInput[]
    deleteMany?: FTPAccountScalarWhereInput | FTPAccountScalarWhereInput[]
  }

  export type DatabaseUpdateManyWithoutHostingAccountNestedInput = {
    create?: XOR<DatabaseCreateWithoutHostingAccountInput, DatabaseUncheckedCreateWithoutHostingAccountInput> | DatabaseCreateWithoutHostingAccountInput[] | DatabaseUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: DatabaseCreateOrConnectWithoutHostingAccountInput | DatabaseCreateOrConnectWithoutHostingAccountInput[]
    upsert?: DatabaseUpsertWithWhereUniqueWithoutHostingAccountInput | DatabaseUpsertWithWhereUniqueWithoutHostingAccountInput[]
    createMany?: DatabaseCreateManyHostingAccountInputEnvelope
    set?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    disconnect?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    delete?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    connect?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    update?: DatabaseUpdateWithWhereUniqueWithoutHostingAccountInput | DatabaseUpdateWithWhereUniqueWithoutHostingAccountInput[]
    updateMany?: DatabaseUpdateManyWithWhereWithoutHostingAccountInput | DatabaseUpdateManyWithWhereWithoutHostingAccountInput[]
    deleteMany?: DatabaseScalarWhereInput | DatabaseScalarWhereInput[]
  }

  export type EmailAccountUpdateManyWithoutHostingAccountNestedInput = {
    create?: XOR<EmailAccountCreateWithoutHostingAccountInput, EmailAccountUncheckedCreateWithoutHostingAccountInput> | EmailAccountCreateWithoutHostingAccountInput[] | EmailAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: EmailAccountCreateOrConnectWithoutHostingAccountInput | EmailAccountCreateOrConnectWithoutHostingAccountInput[]
    upsert?: EmailAccountUpsertWithWhereUniqueWithoutHostingAccountInput | EmailAccountUpsertWithWhereUniqueWithoutHostingAccountInput[]
    createMany?: EmailAccountCreateManyHostingAccountInputEnvelope
    set?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    disconnect?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    delete?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    connect?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    update?: EmailAccountUpdateWithWhereUniqueWithoutHostingAccountInput | EmailAccountUpdateWithWhereUniqueWithoutHostingAccountInput[]
    updateMany?: EmailAccountUpdateManyWithWhereWithoutHostingAccountInput | EmailAccountUpdateManyWithWhereWithoutHostingAccountInput[]
    deleteMany?: EmailAccountScalarWhereInput | EmailAccountScalarWhereInput[]
  }

  export type FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput = {
    create?: XOR<FTPAccountCreateWithoutHostingAccountInput, FTPAccountUncheckedCreateWithoutHostingAccountInput> | FTPAccountCreateWithoutHostingAccountInput[] | FTPAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: FTPAccountCreateOrConnectWithoutHostingAccountInput | FTPAccountCreateOrConnectWithoutHostingAccountInput[]
    upsert?: FTPAccountUpsertWithWhereUniqueWithoutHostingAccountInput | FTPAccountUpsertWithWhereUniqueWithoutHostingAccountInput[]
    createMany?: FTPAccountCreateManyHostingAccountInputEnvelope
    set?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    disconnect?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    delete?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    connect?: FTPAccountWhereUniqueInput | FTPAccountWhereUniqueInput[]
    update?: FTPAccountUpdateWithWhereUniqueWithoutHostingAccountInput | FTPAccountUpdateWithWhereUniqueWithoutHostingAccountInput[]
    updateMany?: FTPAccountUpdateManyWithWhereWithoutHostingAccountInput | FTPAccountUpdateManyWithWhereWithoutHostingAccountInput[]
    deleteMany?: FTPAccountScalarWhereInput | FTPAccountScalarWhereInput[]
  }

  export type DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput = {
    create?: XOR<DatabaseCreateWithoutHostingAccountInput, DatabaseUncheckedCreateWithoutHostingAccountInput> | DatabaseCreateWithoutHostingAccountInput[] | DatabaseUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: DatabaseCreateOrConnectWithoutHostingAccountInput | DatabaseCreateOrConnectWithoutHostingAccountInput[]
    upsert?: DatabaseUpsertWithWhereUniqueWithoutHostingAccountInput | DatabaseUpsertWithWhereUniqueWithoutHostingAccountInput[]
    createMany?: DatabaseCreateManyHostingAccountInputEnvelope
    set?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    disconnect?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    delete?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    connect?: DatabaseWhereUniqueInput | DatabaseWhereUniqueInput[]
    update?: DatabaseUpdateWithWhereUniqueWithoutHostingAccountInput | DatabaseUpdateWithWhereUniqueWithoutHostingAccountInput[]
    updateMany?: DatabaseUpdateManyWithWhereWithoutHostingAccountInput | DatabaseUpdateManyWithWhereWithoutHostingAccountInput[]
    deleteMany?: DatabaseScalarWhereInput | DatabaseScalarWhereInput[]
  }

  export type EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput = {
    create?: XOR<EmailAccountCreateWithoutHostingAccountInput, EmailAccountUncheckedCreateWithoutHostingAccountInput> | EmailAccountCreateWithoutHostingAccountInput[] | EmailAccountUncheckedCreateWithoutHostingAccountInput[]
    connectOrCreate?: EmailAccountCreateOrConnectWithoutHostingAccountInput | EmailAccountCreateOrConnectWithoutHostingAccountInput[]
    upsert?: EmailAccountUpsertWithWhereUniqueWithoutHostingAccountInput | EmailAccountUpsertWithWhereUniqueWithoutHostingAccountInput[]
    createMany?: EmailAccountCreateManyHostingAccountInputEnvelope
    set?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    disconnect?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    delete?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    connect?: EmailAccountWhereUniqueInput | EmailAccountWhereUniqueInput[]
    update?: EmailAccountUpdateWithWhereUniqueWithoutHostingAccountInput | EmailAccountUpdateWithWhereUniqueWithoutHostingAccountInput[]
    updateMany?: EmailAccountUpdateManyWithWhereWithoutHostingAccountInput | EmailAccountUpdateManyWithWhereWithoutHostingAccountInput[]
    deleteMany?: EmailAccountScalarWhereInput | EmailAccountScalarWhereInput[]
  }

  export type HostingAccountCreateNestedManyWithoutServerInput = {
    create?: XOR<HostingAccountCreateWithoutServerInput, HostingAccountUncheckedCreateWithoutServerInput> | HostingAccountCreateWithoutServerInput[] | HostingAccountUncheckedCreateWithoutServerInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutServerInput | HostingAccountCreateOrConnectWithoutServerInput[]
    createMany?: HostingAccountCreateManyServerInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type MaintenanceLogCreateNestedManyWithoutServerInput = {
    create?: XOR<MaintenanceLogCreateWithoutServerInput, MaintenanceLogUncheckedCreateWithoutServerInput> | MaintenanceLogCreateWithoutServerInput[] | MaintenanceLogUncheckedCreateWithoutServerInput[]
    connectOrCreate?: MaintenanceLogCreateOrConnectWithoutServerInput | MaintenanceLogCreateOrConnectWithoutServerInput[]
    createMany?: MaintenanceLogCreateManyServerInputEnvelope
    connect?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
  }

  export type HostingAccountUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<HostingAccountCreateWithoutServerInput, HostingAccountUncheckedCreateWithoutServerInput> | HostingAccountCreateWithoutServerInput[] | HostingAccountUncheckedCreateWithoutServerInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutServerInput | HostingAccountCreateOrConnectWithoutServerInput[]
    createMany?: HostingAccountCreateManyServerInputEnvelope
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
  }

  export type MaintenanceLogUncheckedCreateNestedManyWithoutServerInput = {
    create?: XOR<MaintenanceLogCreateWithoutServerInput, MaintenanceLogUncheckedCreateWithoutServerInput> | MaintenanceLogCreateWithoutServerInput[] | MaintenanceLogUncheckedCreateWithoutServerInput[]
    connectOrCreate?: MaintenanceLogCreateOrConnectWithoutServerInput | MaintenanceLogCreateOrConnectWithoutServerInput[]
    createMany?: MaintenanceLogCreateManyServerInputEnvelope
    connect?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
  }

  export type EnumServerTypeFieldUpdateOperationsInput = {
    set?: $Enums.ServerType
  }

  export type EnumServerStatusFieldUpdateOperationsInput = {
    set?: $Enums.ServerStatus
  }

  export type HostingAccountUpdateManyWithoutServerNestedInput = {
    create?: XOR<HostingAccountCreateWithoutServerInput, HostingAccountUncheckedCreateWithoutServerInput> | HostingAccountCreateWithoutServerInput[] | HostingAccountUncheckedCreateWithoutServerInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutServerInput | HostingAccountCreateOrConnectWithoutServerInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutServerInput | HostingAccountUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: HostingAccountCreateManyServerInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutServerInput | HostingAccountUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutServerInput | HostingAccountUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type MaintenanceLogUpdateManyWithoutServerNestedInput = {
    create?: XOR<MaintenanceLogCreateWithoutServerInput, MaintenanceLogUncheckedCreateWithoutServerInput> | MaintenanceLogCreateWithoutServerInput[] | MaintenanceLogUncheckedCreateWithoutServerInput[]
    connectOrCreate?: MaintenanceLogCreateOrConnectWithoutServerInput | MaintenanceLogCreateOrConnectWithoutServerInput[]
    upsert?: MaintenanceLogUpsertWithWhereUniqueWithoutServerInput | MaintenanceLogUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: MaintenanceLogCreateManyServerInputEnvelope
    set?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    disconnect?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    delete?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    connect?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    update?: MaintenanceLogUpdateWithWhereUniqueWithoutServerInput | MaintenanceLogUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: MaintenanceLogUpdateManyWithWhereWithoutServerInput | MaintenanceLogUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: MaintenanceLogScalarWhereInput | MaintenanceLogScalarWhereInput[]
  }

  export type HostingAccountUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<HostingAccountCreateWithoutServerInput, HostingAccountUncheckedCreateWithoutServerInput> | HostingAccountCreateWithoutServerInput[] | HostingAccountUncheckedCreateWithoutServerInput[]
    connectOrCreate?: HostingAccountCreateOrConnectWithoutServerInput | HostingAccountCreateOrConnectWithoutServerInput[]
    upsert?: HostingAccountUpsertWithWhereUniqueWithoutServerInput | HostingAccountUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: HostingAccountCreateManyServerInputEnvelope
    set?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    disconnect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    delete?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    connect?: HostingAccountWhereUniqueInput | HostingAccountWhereUniqueInput[]
    update?: HostingAccountUpdateWithWhereUniqueWithoutServerInput | HostingAccountUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: HostingAccountUpdateManyWithWhereWithoutServerInput | HostingAccountUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
  }

  export type MaintenanceLogUncheckedUpdateManyWithoutServerNestedInput = {
    create?: XOR<MaintenanceLogCreateWithoutServerInput, MaintenanceLogUncheckedCreateWithoutServerInput> | MaintenanceLogCreateWithoutServerInput[] | MaintenanceLogUncheckedCreateWithoutServerInput[]
    connectOrCreate?: MaintenanceLogCreateOrConnectWithoutServerInput | MaintenanceLogCreateOrConnectWithoutServerInput[]
    upsert?: MaintenanceLogUpsertWithWhereUniqueWithoutServerInput | MaintenanceLogUpsertWithWhereUniqueWithoutServerInput[]
    createMany?: MaintenanceLogCreateManyServerInputEnvelope
    set?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    disconnect?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    delete?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    connect?: MaintenanceLogWhereUniqueInput | MaintenanceLogWhereUniqueInput[]
    update?: MaintenanceLogUpdateWithWhereUniqueWithoutServerInput | MaintenanceLogUpdateWithWhereUniqueWithoutServerInput[]
    updateMany?: MaintenanceLogUpdateManyWithWhereWithoutServerInput | MaintenanceLogUpdateManyWithWhereWithoutServerInput[]
    deleteMany?: MaintenanceLogScalarWhereInput | MaintenanceLogScalarWhereInput[]
  }

  export type HostingAccountCreateNestedOneWithoutFtpAccountsInput = {
    create?: XOR<HostingAccountCreateWithoutFtpAccountsInput, HostingAccountUncheckedCreateWithoutFtpAccountsInput>
    connectOrCreate?: HostingAccountCreateOrConnectWithoutFtpAccountsInput
    connect?: HostingAccountWhereUniqueInput
  }

  export type HostingAccountUpdateOneRequiredWithoutFtpAccountsNestedInput = {
    create?: XOR<HostingAccountCreateWithoutFtpAccountsInput, HostingAccountUncheckedCreateWithoutFtpAccountsInput>
    connectOrCreate?: HostingAccountCreateOrConnectWithoutFtpAccountsInput
    upsert?: HostingAccountUpsertWithoutFtpAccountsInput
    connect?: HostingAccountWhereUniqueInput
    update?: XOR<XOR<HostingAccountUpdateToOneWithWhereWithoutFtpAccountsInput, HostingAccountUpdateWithoutFtpAccountsInput>, HostingAccountUncheckedUpdateWithoutFtpAccountsInput>
  }

  export type HostingAccountCreateNestedOneWithoutDatabasesInput = {
    create?: XOR<HostingAccountCreateWithoutDatabasesInput, HostingAccountUncheckedCreateWithoutDatabasesInput>
    connectOrCreate?: HostingAccountCreateOrConnectWithoutDatabasesInput
    connect?: HostingAccountWhereUniqueInput
  }

  export type EnumDatabaseTypeFieldUpdateOperationsInput = {
    set?: $Enums.DatabaseType
  }

  export type HostingAccountUpdateOneRequiredWithoutDatabasesNestedInput = {
    create?: XOR<HostingAccountCreateWithoutDatabasesInput, HostingAccountUncheckedCreateWithoutDatabasesInput>
    connectOrCreate?: HostingAccountCreateOrConnectWithoutDatabasesInput
    upsert?: HostingAccountUpsertWithoutDatabasesInput
    connect?: HostingAccountWhereUniqueInput
    update?: XOR<XOR<HostingAccountUpdateToOneWithWhereWithoutDatabasesInput, HostingAccountUpdateWithoutDatabasesInput>, HostingAccountUncheckedUpdateWithoutDatabasesInput>
  }

  export type HostingAccountCreateNestedOneWithoutEmailAccountsInput = {
    create?: XOR<HostingAccountCreateWithoutEmailAccountsInput, HostingAccountUncheckedCreateWithoutEmailAccountsInput>
    connectOrCreate?: HostingAccountCreateOrConnectWithoutEmailAccountsInput
    connect?: HostingAccountWhereUniqueInput
  }

  export type HostingAccountUpdateOneRequiredWithoutEmailAccountsNestedInput = {
    create?: XOR<HostingAccountCreateWithoutEmailAccountsInput, HostingAccountUncheckedCreateWithoutEmailAccountsInput>
    connectOrCreate?: HostingAccountCreateOrConnectWithoutEmailAccountsInput
    upsert?: HostingAccountUpsertWithoutEmailAccountsInput
    connect?: HostingAccountWhereUniqueInput
    update?: XOR<XOR<HostingAccountUpdateToOneWithWhereWithoutEmailAccountsInput, HostingAccountUpdateWithoutEmailAccountsInput>, HostingAccountUncheckedUpdateWithoutEmailAccountsInput>
  }

  export type ServerCreateNestedOneWithoutMaintenanceLogsInput = {
    create?: XOR<ServerCreateWithoutMaintenanceLogsInput, ServerUncheckedCreateWithoutMaintenanceLogsInput>
    connectOrCreate?: ServerCreateOrConnectWithoutMaintenanceLogsInput
    connect?: ServerWhereUniqueInput
  }

  export type EnumMaintenanceTypeFieldUpdateOperationsInput = {
    set?: $Enums.MaintenanceType
  }

  export type EnumMaintenanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.MaintenanceStatus
  }

  export type ServerUpdateOneRequiredWithoutMaintenanceLogsNestedInput = {
    create?: XOR<ServerCreateWithoutMaintenanceLogsInput, ServerUncheckedCreateWithoutMaintenanceLogsInput>
    connectOrCreate?: ServerCreateOrConnectWithoutMaintenanceLogsInput
    upsert?: ServerUpsertWithoutMaintenanceLogsInput
    connect?: ServerWhereUniqueInput
    update?: XOR<XOR<ServerUpdateToOneWithWhereWithoutMaintenanceLogsInput, ServerUpdateWithoutMaintenanceLogsInput>, ServerUncheckedUpdateWithoutMaintenanceLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumProviderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProviderNullableFilter<$PrismaModel> | $Enums.Provider | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedEnumProviderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProviderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Provider | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProviderNullableFilter<$PrismaModel>
    _max?: NestedEnumProviderNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDomainStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DomainStatus | EnumDomainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDomainStatusFilter<$PrismaModel> | $Enums.DomainStatus
  }

  export type NestedEnumDomainStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DomainStatus | EnumDomainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DomainStatus[] | ListEnumDomainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDomainStatusWithAggregatesFilter<$PrismaModel> | $Enums.DomainStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDomainStatusFilter<$PrismaModel>
    _max?: NestedEnumDomainStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumHostingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.HostingStatus | EnumHostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingStatusFilter<$PrismaModel> | $Enums.HostingStatus
  }

  export type NestedEnumHostingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.HostingStatus | EnumHostingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.HostingStatus[] | ListEnumHostingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumHostingStatusWithAggregatesFilter<$PrismaModel> | $Enums.HostingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumHostingStatusFilter<$PrismaModel>
    _max?: NestedEnumHostingStatusFilter<$PrismaModel>
  }

  export type NestedEnumServerTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerType | EnumServerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServerTypeFilter<$PrismaModel> | $Enums.ServerType
  }

  export type NestedEnumServerStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerStatus | EnumServerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServerStatusFilter<$PrismaModel> | $Enums.ServerStatus
  }

  export type NestedEnumServerTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerType | EnumServerTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerType[] | ListEnumServerTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumServerTypeWithAggregatesFilter<$PrismaModel> | $Enums.ServerType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServerTypeFilter<$PrismaModel>
    _max?: NestedEnumServerTypeFilter<$PrismaModel>
  }

  export type NestedEnumServerStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServerStatus | EnumServerStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServerStatus[] | ListEnumServerStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumServerStatusWithAggregatesFilter<$PrismaModel> | $Enums.ServerStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServerStatusFilter<$PrismaModel>
    _max?: NestedEnumServerStatusFilter<$PrismaModel>
  }

  export type NestedEnumDatabaseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DatabaseType | EnumDatabaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDatabaseTypeFilter<$PrismaModel> | $Enums.DatabaseType
  }

  export type NestedEnumDatabaseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DatabaseType | EnumDatabaseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DatabaseType[] | ListEnumDatabaseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDatabaseTypeWithAggregatesFilter<$PrismaModel> | $Enums.DatabaseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDatabaseTypeFilter<$PrismaModel>
    _max?: NestedEnumDatabaseTypeFilter<$PrismaModel>
  }

  export type NestedEnumMaintenanceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceType | EnumMaintenanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTypeFilter<$PrismaModel> | $Enums.MaintenanceType
  }

  export type NestedEnumMaintenanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusFilter<$PrismaModel> | $Enums.MaintenanceStatus
  }

  export type NestedEnumMaintenanceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceType | EnumMaintenanceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceType[] | ListEnumMaintenanceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceTypeWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceTypeFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceTypeFilter<$PrismaModel>
  }

  export type NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaintenanceStatus | EnumMaintenanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaintenanceStatus[] | ListEnumMaintenanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumMaintenanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.MaintenanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
    _max?: NestedEnumMaintenanceStatusFilter<$PrismaModel>
  }

  export type EmailVerificationCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type EmailVerificationUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type EmailVerificationCreateOrConnectWithoutUserInput = {
    where: EmailVerificationWhereUniqueInput
    create: XOR<EmailVerificationCreateWithoutUserInput, EmailVerificationUncheckedCreateWithoutUserInput>
  }

  export type EmailVerificationCreateManyUserInputEnvelope = {
    data: EmailVerificationCreateManyUserInput | EmailVerificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PasswordResetCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetCreateOrConnectWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetCreateManyUserInputEnvelope = {
    data: PasswordResetCreateManyUserInput | PasswordResetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DomainCreateWithoutUserInput = {
    id?: string
    name: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    nameservers?: NameserverCreateNestedManyWithoutDomainInput
    dnsRecords?: DnsRecordCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutDomainInput
  }

  export type DomainUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    nameservers?: NameserverUncheckedCreateNestedManyWithoutDomainInput
    dnsRecords?: DnsRecordUncheckedCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutDomainInput
  }

  export type DomainCreateOrConnectWithoutUserInput = {
    where: DomainWhereUniqueInput
    create: XOR<DomainCreateWithoutUserInput, DomainUncheckedCreateWithoutUserInput>
  }

  export type DomainCreateManyUserInputEnvelope = {
    data: DomainCreateManyUserInput | DomainCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HostingAccountCreateWithoutUserInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    package: HostingPackageCreateNestedOneWithoutHostingAccountsInput
    domain?: DomainCreateNestedOneWithoutHostingAccountInput
    server: ServerCreateNestedOneWithoutHostingAccountsInput
    ftpAccounts?: FTPAccountCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateWithoutUserInput = {
    id?: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
    ftpAccounts?: FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountCreateOrConnectWithoutUserInput = {
    where: HostingAccountWhereUniqueInput
    create: XOR<HostingAccountCreateWithoutUserInput, HostingAccountUncheckedCreateWithoutUserInput>
  }

  export type HostingAccountCreateManyUserInputEnvelope = {
    data: HostingAccountCreateManyUserInput | HostingAccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmailVerificationUpsertWithWhereUniqueWithoutUserInput = {
    where: EmailVerificationWhereUniqueInput
    update: XOR<EmailVerificationUpdateWithoutUserInput, EmailVerificationUncheckedUpdateWithoutUserInput>
    create: XOR<EmailVerificationCreateWithoutUserInput, EmailVerificationUncheckedCreateWithoutUserInput>
  }

  export type EmailVerificationUpdateWithWhereUniqueWithoutUserInput = {
    where: EmailVerificationWhereUniqueInput
    data: XOR<EmailVerificationUpdateWithoutUserInput, EmailVerificationUncheckedUpdateWithoutUserInput>
  }

  export type EmailVerificationUpdateManyWithWhereWithoutUserInput = {
    where: EmailVerificationScalarWhereInput
    data: XOR<EmailVerificationUpdateManyMutationInput, EmailVerificationUncheckedUpdateManyWithoutUserInput>
  }

  export type EmailVerificationScalarWhereInput = {
    AND?: EmailVerificationScalarWhereInput | EmailVerificationScalarWhereInput[]
    OR?: EmailVerificationScalarWhereInput[]
    NOT?: EmailVerificationScalarWhereInput | EmailVerificationScalarWhereInput[]
    id?: StringFilter<"EmailVerification"> | string
    token?: StringFilter<"EmailVerification"> | string
    userId?: StringFilter<"EmailVerification"> | string
    expires?: DateTimeFilter<"EmailVerification"> | Date | string
    createdAt?: DateTimeFilter<"EmailVerification"> | Date | string
  }

  export type PasswordResetUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    update: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordResetCreateWithoutUserInput, PasswordResetUncheckedCreateWithoutUserInput>
  }

  export type PasswordResetUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordResetWhereUniqueInput
    data: XOR<PasswordResetUpdateWithoutUserInput, PasswordResetUncheckedUpdateWithoutUserInput>
  }

  export type PasswordResetUpdateManyWithWhereWithoutUserInput = {
    where: PasswordResetScalarWhereInput
    data: XOR<PasswordResetUpdateManyMutationInput, PasswordResetUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordResetScalarWhereInput = {
    AND?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
    OR?: PasswordResetScalarWhereInput[]
    NOT?: PasswordResetScalarWhereInput | PasswordResetScalarWhereInput[]
    id?: StringFilter<"PasswordReset"> | string
    token?: StringFilter<"PasswordReset"> | string
    userId?: StringFilter<"PasswordReset"> | string
    expires?: DateTimeFilter<"PasswordReset"> | Date | string
    createdAt?: DateTimeFilter<"PasswordReset"> | Date | string
  }

  export type DomainUpsertWithWhereUniqueWithoutUserInput = {
    where: DomainWhereUniqueInput
    update: XOR<DomainUpdateWithoutUserInput, DomainUncheckedUpdateWithoutUserInput>
    create: XOR<DomainCreateWithoutUserInput, DomainUncheckedCreateWithoutUserInput>
  }

  export type DomainUpdateWithWhereUniqueWithoutUserInput = {
    where: DomainWhereUniqueInput
    data: XOR<DomainUpdateWithoutUserInput, DomainUncheckedUpdateWithoutUserInput>
  }

  export type DomainUpdateManyWithWhereWithoutUserInput = {
    where: DomainScalarWhereInput
    data: XOR<DomainUpdateManyMutationInput, DomainUncheckedUpdateManyWithoutUserInput>
  }

  export type DomainScalarWhereInput = {
    AND?: DomainScalarWhereInput | DomainScalarWhereInput[]
    OR?: DomainScalarWhereInput[]
    NOT?: DomainScalarWhereInput | DomainScalarWhereInput[]
    id?: StringFilter<"Domain"> | string
    name?: StringFilter<"Domain"> | string
    userId?: StringFilter<"Domain"> | string
    registrar?: StringNullableFilter<"Domain"> | string | null
    registrationDate?: DateTimeFilter<"Domain"> | Date | string
    expiryDate?: DateTimeFilter<"Domain"> | Date | string
    autoRenew?: BoolFilter<"Domain"> | boolean
    status?: EnumDomainStatusFilter<"Domain"> | $Enums.DomainStatus
    privacyProtection?: BoolFilter<"Domain"> | boolean
    createdAt?: DateTimeFilter<"Domain"> | Date | string
    updatedAt?: DateTimeFilter<"Domain"> | Date | string
  }

  export type HostingAccountUpsertWithWhereUniqueWithoutUserInput = {
    where: HostingAccountWhereUniqueInput
    update: XOR<HostingAccountUpdateWithoutUserInput, HostingAccountUncheckedUpdateWithoutUserInput>
    create: XOR<HostingAccountCreateWithoutUserInput, HostingAccountUncheckedCreateWithoutUserInput>
  }

  export type HostingAccountUpdateWithWhereUniqueWithoutUserInput = {
    where: HostingAccountWhereUniqueInput
    data: XOR<HostingAccountUpdateWithoutUserInput, HostingAccountUncheckedUpdateWithoutUserInput>
  }

  export type HostingAccountUpdateManyWithWhereWithoutUserInput = {
    where: HostingAccountScalarWhereInput
    data: XOR<HostingAccountUpdateManyMutationInput, HostingAccountUncheckedUpdateManyWithoutUserInput>
  }

  export type HostingAccountScalarWhereInput = {
    AND?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
    OR?: HostingAccountScalarWhereInput[]
    NOT?: HostingAccountScalarWhereInput | HostingAccountScalarWhereInput[]
    id?: StringFilter<"HostingAccount"> | string
    userId?: StringFilter<"HostingAccount"> | string
    packageId?: StringFilter<"HostingAccount"> | string
    domainId?: StringNullableFilter<"HostingAccount"> | string | null
    username?: StringFilter<"HostingAccount"> | string
    password?: StringFilter<"HostingAccount"> | string
    serverIp?: StringFilter<"HostingAccount"> | string
    status?: EnumHostingStatusFilter<"HostingAccount"> | $Enums.HostingStatus
    suspensionReason?: StringNullableFilter<"HostingAccount"> | string | null
    diskUsage?: IntFilter<"HostingAccount"> | number
    bandwidthUsage?: IntFilter<"HostingAccount"> | number
    createdAt?: DateTimeFilter<"HostingAccount"> | Date | string
    updatedAt?: DateTimeFilter<"HostingAccount"> | Date | string
    serverId?: StringFilter<"HostingAccount"> | string
  }

  export type UserCreateWithoutEmailVerificationsInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResets?: PasswordResetCreateNestedManyWithoutUserInput
    domains?: DomainCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmailVerificationsInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    domains?: DomainUncheckedCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmailVerificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmailVerificationsInput, UserUncheckedCreateWithoutEmailVerificationsInput>
  }

  export type UserUpsertWithoutEmailVerificationsInput = {
    update: XOR<UserUpdateWithoutEmailVerificationsInput, UserUncheckedUpdateWithoutEmailVerificationsInput>
    create: XOR<UserCreateWithoutEmailVerificationsInput, UserUncheckedCreateWithoutEmailVerificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmailVerificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmailVerificationsInput, UserUncheckedUpdateWithoutEmailVerificationsInput>
  }

  export type UserUpdateWithoutEmailVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    domains?: DomainUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmailVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    domains?: DomainUncheckedUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPasswordResetsInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationCreateNestedManyWithoutUserInput
    domains?: DomainCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordResetsInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationUncheckedCreateNestedManyWithoutUserInput
    domains?: DomainUncheckedCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordResetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
  }

  export type UserUpsertWithoutPasswordResetsInput = {
    update: XOR<UserUpdateWithoutPasswordResetsInput, UserUncheckedUpdateWithoutPasswordResetsInput>
    create: XOR<UserCreateWithoutPasswordResetsInput, UserUncheckedCreateWithoutPasswordResetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordResetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordResetsInput, UserUncheckedUpdateWithoutPasswordResetsInput>
  }

  export type UserUpdateWithoutPasswordResetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUpdateManyWithoutUserNestedInput
    domains?: DomainUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordResetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUncheckedUpdateManyWithoutUserNestedInput
    domains?: DomainUncheckedUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDomainsInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationCreateNestedManyWithoutUserInput
    passwordResets?: PasswordResetCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDomainsInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDomainsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDomainsInput, UserUncheckedCreateWithoutDomainsInput>
  }

  export type NameserverCreateWithoutDomainInput = {
    id?: string
    hostname: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NameserverUncheckedCreateWithoutDomainInput = {
    id?: string
    hostname: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NameserverCreateOrConnectWithoutDomainInput = {
    where: NameserverWhereUniqueInput
    create: XOR<NameserverCreateWithoutDomainInput, NameserverUncheckedCreateWithoutDomainInput>
  }

  export type NameserverCreateManyDomainInputEnvelope = {
    data: NameserverCreateManyDomainInput | NameserverCreateManyDomainInput[]
    skipDuplicates?: boolean
  }

  export type DnsRecordCreateWithoutDomainInput = {
    id?: string
    type: string
    name: string
    content: string
    ttl?: number
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DnsRecordUncheckedCreateWithoutDomainInput = {
    id?: string
    type: string
    name: string
    content: string
    ttl?: number
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DnsRecordCreateOrConnectWithoutDomainInput = {
    where: DnsRecordWhereUniqueInput
    create: XOR<DnsRecordCreateWithoutDomainInput, DnsRecordUncheckedCreateWithoutDomainInput>
  }

  export type DnsRecordCreateManyDomainInputEnvelope = {
    data: DnsRecordCreateManyDomainInput | DnsRecordCreateManyDomainInput[]
    skipDuplicates?: boolean
  }

  export type HostingAccountCreateWithoutDomainInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHostingAccountInput
    package: HostingPackageCreateNestedOneWithoutHostingAccountsInput
    server: ServerCreateNestedOneWithoutHostingAccountsInput
    ftpAccounts?: FTPAccountCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateWithoutDomainInput = {
    id?: string
    userId: string
    packageId: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
    ftpAccounts?: FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountCreateOrConnectWithoutDomainInput = {
    where: HostingAccountWhereUniqueInput
    create: XOR<HostingAccountCreateWithoutDomainInput, HostingAccountUncheckedCreateWithoutDomainInput>
  }

  export type HostingAccountCreateManyDomainInputEnvelope = {
    data: HostingAccountCreateManyDomainInput | HostingAccountCreateManyDomainInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDomainsInput = {
    update: XOR<UserUpdateWithoutDomainsInput, UserUncheckedUpdateWithoutDomainsInput>
    create: XOR<UserCreateWithoutDomainsInput, UserUncheckedCreateWithoutDomainsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDomainsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDomainsInput, UserUncheckedUpdateWithoutDomainsInput>
  }

  export type UserUpdateWithoutDomainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUpdateManyWithoutUserNestedInput
    passwordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDomainsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NameserverUpsertWithWhereUniqueWithoutDomainInput = {
    where: NameserverWhereUniqueInput
    update: XOR<NameserverUpdateWithoutDomainInput, NameserverUncheckedUpdateWithoutDomainInput>
    create: XOR<NameserverCreateWithoutDomainInput, NameserverUncheckedCreateWithoutDomainInput>
  }

  export type NameserverUpdateWithWhereUniqueWithoutDomainInput = {
    where: NameserverWhereUniqueInput
    data: XOR<NameserverUpdateWithoutDomainInput, NameserverUncheckedUpdateWithoutDomainInput>
  }

  export type NameserverUpdateManyWithWhereWithoutDomainInput = {
    where: NameserverScalarWhereInput
    data: XOR<NameserverUpdateManyMutationInput, NameserverUncheckedUpdateManyWithoutDomainInput>
  }

  export type NameserverScalarWhereInput = {
    AND?: NameserverScalarWhereInput | NameserverScalarWhereInput[]
    OR?: NameserverScalarWhereInput[]
    NOT?: NameserverScalarWhereInput | NameserverScalarWhereInput[]
    id?: StringFilter<"Nameserver"> | string
    hostname?: StringFilter<"Nameserver"> | string
    domainId?: StringFilter<"Nameserver"> | string
    order?: IntFilter<"Nameserver"> | number
    createdAt?: DateTimeFilter<"Nameserver"> | Date | string
    updatedAt?: DateTimeFilter<"Nameserver"> | Date | string
  }

  export type DnsRecordUpsertWithWhereUniqueWithoutDomainInput = {
    where: DnsRecordWhereUniqueInput
    update: XOR<DnsRecordUpdateWithoutDomainInput, DnsRecordUncheckedUpdateWithoutDomainInput>
    create: XOR<DnsRecordCreateWithoutDomainInput, DnsRecordUncheckedCreateWithoutDomainInput>
  }

  export type DnsRecordUpdateWithWhereUniqueWithoutDomainInput = {
    where: DnsRecordWhereUniqueInput
    data: XOR<DnsRecordUpdateWithoutDomainInput, DnsRecordUncheckedUpdateWithoutDomainInput>
  }

  export type DnsRecordUpdateManyWithWhereWithoutDomainInput = {
    where: DnsRecordScalarWhereInput
    data: XOR<DnsRecordUpdateManyMutationInput, DnsRecordUncheckedUpdateManyWithoutDomainInput>
  }

  export type DnsRecordScalarWhereInput = {
    AND?: DnsRecordScalarWhereInput | DnsRecordScalarWhereInput[]
    OR?: DnsRecordScalarWhereInput[]
    NOT?: DnsRecordScalarWhereInput | DnsRecordScalarWhereInput[]
    id?: StringFilter<"DnsRecord"> | string
    domainId?: StringFilter<"DnsRecord"> | string
    type?: StringFilter<"DnsRecord"> | string
    name?: StringFilter<"DnsRecord"> | string
    content?: StringFilter<"DnsRecord"> | string
    ttl?: IntFilter<"DnsRecord"> | number
    priority?: IntNullableFilter<"DnsRecord"> | number | null
    createdAt?: DateTimeFilter<"DnsRecord"> | Date | string
    updatedAt?: DateTimeFilter<"DnsRecord"> | Date | string
  }

  export type HostingAccountUpsertWithWhereUniqueWithoutDomainInput = {
    where: HostingAccountWhereUniqueInput
    update: XOR<HostingAccountUpdateWithoutDomainInput, HostingAccountUncheckedUpdateWithoutDomainInput>
    create: XOR<HostingAccountCreateWithoutDomainInput, HostingAccountUncheckedCreateWithoutDomainInput>
  }

  export type HostingAccountUpdateWithWhereUniqueWithoutDomainInput = {
    where: HostingAccountWhereUniqueInput
    data: XOR<HostingAccountUpdateWithoutDomainInput, HostingAccountUncheckedUpdateWithoutDomainInput>
  }

  export type HostingAccountUpdateManyWithWhereWithoutDomainInput = {
    where: HostingAccountScalarWhereInput
    data: XOR<HostingAccountUpdateManyMutationInput, HostingAccountUncheckedUpdateManyWithoutDomainInput>
  }

  export type DomainCreateWithoutNameserversInput = {
    id?: string
    name: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDomainsInput
    dnsRecords?: DnsRecordCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutDomainInput
  }

  export type DomainUncheckedCreateWithoutNameserversInput = {
    id?: string
    name: string
    userId: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    dnsRecords?: DnsRecordUncheckedCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutDomainInput
  }

  export type DomainCreateOrConnectWithoutNameserversInput = {
    where: DomainWhereUniqueInput
    create: XOR<DomainCreateWithoutNameserversInput, DomainUncheckedCreateWithoutNameserversInput>
  }

  export type DomainUpsertWithoutNameserversInput = {
    update: XOR<DomainUpdateWithoutNameserversInput, DomainUncheckedUpdateWithoutNameserversInput>
    create: XOR<DomainCreateWithoutNameserversInput, DomainUncheckedCreateWithoutNameserversInput>
    where?: DomainWhereInput
  }

  export type DomainUpdateToOneWithWhereWithoutNameserversInput = {
    where?: DomainWhereInput
    data: XOR<DomainUpdateWithoutNameserversInput, DomainUncheckedUpdateWithoutNameserversInput>
  }

  export type DomainUpdateWithoutNameserversInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDomainsNestedInput
    dnsRecords?: DnsRecordUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutDomainNestedInput
  }

  export type DomainUncheckedUpdateWithoutNameserversInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dnsRecords?: DnsRecordUncheckedUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type DomainCreateWithoutDnsRecordsInput = {
    id?: string
    name: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDomainsInput
    nameservers?: NameserverCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountCreateNestedManyWithoutDomainInput
  }

  export type DomainUncheckedCreateWithoutDnsRecordsInput = {
    id?: string
    name: string
    userId: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    nameservers?: NameserverUncheckedCreateNestedManyWithoutDomainInput
    HostingAccount?: HostingAccountUncheckedCreateNestedManyWithoutDomainInput
  }

  export type DomainCreateOrConnectWithoutDnsRecordsInput = {
    where: DomainWhereUniqueInput
    create: XOR<DomainCreateWithoutDnsRecordsInput, DomainUncheckedCreateWithoutDnsRecordsInput>
  }

  export type DomainUpsertWithoutDnsRecordsInput = {
    update: XOR<DomainUpdateWithoutDnsRecordsInput, DomainUncheckedUpdateWithoutDnsRecordsInput>
    create: XOR<DomainCreateWithoutDnsRecordsInput, DomainUncheckedCreateWithoutDnsRecordsInput>
    where?: DomainWhereInput
  }

  export type DomainUpdateToOneWithWhereWithoutDnsRecordsInput = {
    where?: DomainWhereInput
    data: XOR<DomainUpdateWithoutDnsRecordsInput, DomainUncheckedUpdateWithoutDnsRecordsInput>
  }

  export type DomainUpdateWithoutDnsRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDomainsNestedInput
    nameservers?: NameserverUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutDomainNestedInput
  }

  export type DomainUncheckedUpdateWithoutDnsRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nameservers?: NameserverUncheckedUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type HostingAccountCreateWithoutPackageInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHostingAccountInput
    domain?: DomainCreateNestedOneWithoutHostingAccountInput
    server: ServerCreateNestedOneWithoutHostingAccountsInput
    ftpAccounts?: FTPAccountCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateWithoutPackageInput = {
    id?: string
    userId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
    ftpAccounts?: FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountCreateOrConnectWithoutPackageInput = {
    where: HostingAccountWhereUniqueInput
    create: XOR<HostingAccountCreateWithoutPackageInput, HostingAccountUncheckedCreateWithoutPackageInput>
  }

  export type HostingAccountCreateManyPackageInputEnvelope = {
    data: HostingAccountCreateManyPackageInput | HostingAccountCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type HostingAccountUpsertWithWhereUniqueWithoutPackageInput = {
    where: HostingAccountWhereUniqueInput
    update: XOR<HostingAccountUpdateWithoutPackageInput, HostingAccountUncheckedUpdateWithoutPackageInput>
    create: XOR<HostingAccountCreateWithoutPackageInput, HostingAccountUncheckedCreateWithoutPackageInput>
  }

  export type HostingAccountUpdateWithWhereUniqueWithoutPackageInput = {
    where: HostingAccountWhereUniqueInput
    data: XOR<HostingAccountUpdateWithoutPackageInput, HostingAccountUncheckedUpdateWithoutPackageInput>
  }

  export type HostingAccountUpdateManyWithWhereWithoutPackageInput = {
    where: HostingAccountScalarWhereInput
    data: XOR<HostingAccountUpdateManyMutationInput, HostingAccountUncheckedUpdateManyWithoutPackageInput>
  }

  export type UserCreateWithoutHostingAccountInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationCreateNestedManyWithoutUserInput
    passwordResets?: PasswordResetCreateNestedManyWithoutUserInput
    domains?: DomainCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHostingAccountInput = {
    id?: string
    name: string
    email: string
    password?: string | null
    emailVerified?: boolean
    role?: $Enums.Role
    provider?: $Enums.Provider | null
    providerId?: string | null
    loginAttempts?: number
    lockoutUntil?: Date | string | null
    lastLoginAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    emailVerifications?: EmailVerificationUncheckedCreateNestedManyWithoutUserInput
    passwordResets?: PasswordResetUncheckedCreateNestedManyWithoutUserInput
    domains?: DomainUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHostingAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHostingAccountInput, UserUncheckedCreateWithoutHostingAccountInput>
  }

  export type HostingPackageCreateWithoutHostingAccountsInput = {
    id?: string
    name: string
    description?: string | null
    diskSpace: number
    bandwidth: number
    emailAccounts: number
    databases: number
    subdomains: number
    price: Decimal | DecimalJsLike | number | string
    billingCycle: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HostingPackageUncheckedCreateWithoutHostingAccountsInput = {
    id?: string
    name: string
    description?: string | null
    diskSpace: number
    bandwidth: number
    emailAccounts: number
    databases: number
    subdomains: number
    price: Decimal | DecimalJsLike | number | string
    billingCycle: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HostingPackageCreateOrConnectWithoutHostingAccountsInput = {
    where: HostingPackageWhereUniqueInput
    create: XOR<HostingPackageCreateWithoutHostingAccountsInput, HostingPackageUncheckedCreateWithoutHostingAccountsInput>
  }

  export type DomainCreateWithoutHostingAccountInput = {
    id?: string
    name: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDomainsInput
    nameservers?: NameserverCreateNestedManyWithoutDomainInput
    dnsRecords?: DnsRecordCreateNestedManyWithoutDomainInput
  }

  export type DomainUncheckedCreateWithoutHostingAccountInput = {
    id?: string
    name: string
    userId: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    nameservers?: NameserverUncheckedCreateNestedManyWithoutDomainInput
    dnsRecords?: DnsRecordUncheckedCreateNestedManyWithoutDomainInput
  }

  export type DomainCreateOrConnectWithoutHostingAccountInput = {
    where: DomainWhereUniqueInput
    create: XOR<DomainCreateWithoutHostingAccountInput, DomainUncheckedCreateWithoutHostingAccountInput>
  }

  export type ServerCreateWithoutHostingAccountsInput = {
    id?: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status?: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace?: number
    totalBandwidth: number
    usedBandwidth?: number
    cpuCores: number
    ram: number
    createdAt?: Date | string
    updatedAt?: Date | string
    maintenanceLogs?: MaintenanceLogCreateNestedManyWithoutServerInput
  }

  export type ServerUncheckedCreateWithoutHostingAccountsInput = {
    id?: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status?: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace?: number
    totalBandwidth: number
    usedBandwidth?: number
    cpuCores: number
    ram: number
    createdAt?: Date | string
    updatedAt?: Date | string
    maintenanceLogs?: MaintenanceLogUncheckedCreateNestedManyWithoutServerInput
  }

  export type ServerCreateOrConnectWithoutHostingAccountsInput = {
    where: ServerWhereUniqueInput
    create: XOR<ServerCreateWithoutHostingAccountsInput, ServerUncheckedCreateWithoutHostingAccountsInput>
  }

  export type FTPAccountCreateWithoutHostingAccountInput = {
    id?: string
    username: string
    password: string
    directory?: string
    permissions?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FTPAccountUncheckedCreateWithoutHostingAccountInput = {
    id?: string
    username: string
    password: string
    directory?: string
    permissions?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FTPAccountCreateOrConnectWithoutHostingAccountInput = {
    where: FTPAccountWhereUniqueInput
    create: XOR<FTPAccountCreateWithoutHostingAccountInput, FTPAccountUncheckedCreateWithoutHostingAccountInput>
  }

  export type FTPAccountCreateManyHostingAccountInputEnvelope = {
    data: FTPAccountCreateManyHostingAccountInput | FTPAccountCreateManyHostingAccountInput[]
    skipDuplicates?: boolean
  }

  export type DatabaseCreateWithoutHostingAccountInput = {
    id?: string
    name: string
    username: string
    password: string
    type?: $Enums.DatabaseType
    size?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatabaseUncheckedCreateWithoutHostingAccountInput = {
    id?: string
    name: string
    username: string
    password: string
    type?: $Enums.DatabaseType
    size?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatabaseCreateOrConnectWithoutHostingAccountInput = {
    where: DatabaseWhereUniqueInput
    create: XOR<DatabaseCreateWithoutHostingAccountInput, DatabaseUncheckedCreateWithoutHostingAccountInput>
  }

  export type DatabaseCreateManyHostingAccountInputEnvelope = {
    data: DatabaseCreateManyHostingAccountInput | DatabaseCreateManyHostingAccountInput[]
    skipDuplicates?: boolean
  }

  export type EmailAccountCreateWithoutHostingAccountInput = {
    id?: string
    email: string
    password: string
    forwardTo?: string | null
    quotaSize?: number
    usedQuota?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailAccountUncheckedCreateWithoutHostingAccountInput = {
    id?: string
    email: string
    password: string
    forwardTo?: string | null
    quotaSize?: number
    usedQuota?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailAccountCreateOrConnectWithoutHostingAccountInput = {
    where: EmailAccountWhereUniqueInput
    create: XOR<EmailAccountCreateWithoutHostingAccountInput, EmailAccountUncheckedCreateWithoutHostingAccountInput>
  }

  export type EmailAccountCreateManyHostingAccountInputEnvelope = {
    data: EmailAccountCreateManyHostingAccountInput | EmailAccountCreateManyHostingAccountInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHostingAccountInput = {
    update: XOR<UserUpdateWithoutHostingAccountInput, UserUncheckedUpdateWithoutHostingAccountInput>
    create: XOR<UserCreateWithoutHostingAccountInput, UserUncheckedCreateWithoutHostingAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHostingAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHostingAccountInput, UserUncheckedUpdateWithoutHostingAccountInput>
  }

  export type UserUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUpdateManyWithoutUserNestedInput
    passwordResets?: PasswordResetUpdateManyWithoutUserNestedInput
    domains?: DomainUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    provider?: NullableEnumProviderFieldUpdateOperationsInput | $Enums.Provider | null
    providerId?: NullableStringFieldUpdateOperationsInput | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockoutUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emailVerifications?: EmailVerificationUncheckedUpdateManyWithoutUserNestedInput
    passwordResets?: PasswordResetUncheckedUpdateManyWithoutUserNestedInput
    domains?: DomainUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HostingPackageUpsertWithoutHostingAccountsInput = {
    update: XOR<HostingPackageUpdateWithoutHostingAccountsInput, HostingPackageUncheckedUpdateWithoutHostingAccountsInput>
    create: XOR<HostingPackageCreateWithoutHostingAccountsInput, HostingPackageUncheckedCreateWithoutHostingAccountsInput>
    where?: HostingPackageWhereInput
  }

  export type HostingPackageUpdateToOneWithWhereWithoutHostingAccountsInput = {
    where?: HostingPackageWhereInput
    data: XOR<HostingPackageUpdateWithoutHostingAccountsInput, HostingPackageUncheckedUpdateWithoutHostingAccountsInput>
  }

  export type HostingPackageUpdateWithoutHostingAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diskSpace?: IntFieldUpdateOperationsInput | number
    bandwidth?: IntFieldUpdateOperationsInput | number
    emailAccounts?: IntFieldUpdateOperationsInput | number
    databases?: IntFieldUpdateOperationsInput | number
    subdomains?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingPackageUncheckedUpdateWithoutHostingAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diskSpace?: IntFieldUpdateOperationsInput | number
    bandwidth?: IntFieldUpdateOperationsInput | number
    emailAccounts?: IntFieldUpdateOperationsInput | number
    databases?: IntFieldUpdateOperationsInput | number
    subdomains?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    billingCycle?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainUpsertWithoutHostingAccountInput = {
    update: XOR<DomainUpdateWithoutHostingAccountInput, DomainUncheckedUpdateWithoutHostingAccountInput>
    create: XOR<DomainCreateWithoutHostingAccountInput, DomainUncheckedCreateWithoutHostingAccountInput>
    where?: DomainWhereInput
  }

  export type DomainUpdateToOneWithWhereWithoutHostingAccountInput = {
    where?: DomainWhereInput
    data: XOR<DomainUpdateWithoutHostingAccountInput, DomainUncheckedUpdateWithoutHostingAccountInput>
  }

  export type DomainUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDomainsNestedInput
    nameservers?: NameserverUpdateManyWithoutDomainNestedInput
    dnsRecords?: DnsRecordUpdateManyWithoutDomainNestedInput
  }

  export type DomainUncheckedUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nameservers?: NameserverUncheckedUpdateManyWithoutDomainNestedInput
    dnsRecords?: DnsRecordUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type ServerUpsertWithoutHostingAccountsInput = {
    update: XOR<ServerUpdateWithoutHostingAccountsInput, ServerUncheckedUpdateWithoutHostingAccountsInput>
    create: XOR<ServerCreateWithoutHostingAccountsInput, ServerUncheckedCreateWithoutHostingAccountsInput>
    where?: ServerWhereInput
  }

  export type ServerUpdateToOneWithWhereWithoutHostingAccountsInput = {
    where?: ServerWhereInput
    data: XOR<ServerUpdateWithoutHostingAccountsInput, ServerUncheckedUpdateWithoutHostingAccountsInput>
  }

  export type ServerUpdateWithoutHostingAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maintenanceLogs?: MaintenanceLogUpdateManyWithoutServerNestedInput
  }

  export type ServerUncheckedUpdateWithoutHostingAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    maintenanceLogs?: MaintenanceLogUncheckedUpdateManyWithoutServerNestedInput
  }

  export type FTPAccountUpsertWithWhereUniqueWithoutHostingAccountInput = {
    where: FTPAccountWhereUniqueInput
    update: XOR<FTPAccountUpdateWithoutHostingAccountInput, FTPAccountUncheckedUpdateWithoutHostingAccountInput>
    create: XOR<FTPAccountCreateWithoutHostingAccountInput, FTPAccountUncheckedCreateWithoutHostingAccountInput>
  }

  export type FTPAccountUpdateWithWhereUniqueWithoutHostingAccountInput = {
    where: FTPAccountWhereUniqueInput
    data: XOR<FTPAccountUpdateWithoutHostingAccountInput, FTPAccountUncheckedUpdateWithoutHostingAccountInput>
  }

  export type FTPAccountUpdateManyWithWhereWithoutHostingAccountInput = {
    where: FTPAccountScalarWhereInput
    data: XOR<FTPAccountUpdateManyMutationInput, FTPAccountUncheckedUpdateManyWithoutHostingAccountInput>
  }

  export type FTPAccountScalarWhereInput = {
    AND?: FTPAccountScalarWhereInput | FTPAccountScalarWhereInput[]
    OR?: FTPAccountScalarWhereInput[]
    NOT?: FTPAccountScalarWhereInput | FTPAccountScalarWhereInput[]
    id?: StringFilter<"FTPAccount"> | string
    hostingAccountId?: StringFilter<"FTPAccount"> | string
    username?: StringFilter<"FTPAccount"> | string
    password?: StringFilter<"FTPAccount"> | string
    directory?: StringFilter<"FTPAccount"> | string
    permissions?: StringFilter<"FTPAccount"> | string
    createdAt?: DateTimeFilter<"FTPAccount"> | Date | string
    updatedAt?: DateTimeFilter<"FTPAccount"> | Date | string
  }

  export type DatabaseUpsertWithWhereUniqueWithoutHostingAccountInput = {
    where: DatabaseWhereUniqueInput
    update: XOR<DatabaseUpdateWithoutHostingAccountInput, DatabaseUncheckedUpdateWithoutHostingAccountInput>
    create: XOR<DatabaseCreateWithoutHostingAccountInput, DatabaseUncheckedCreateWithoutHostingAccountInput>
  }

  export type DatabaseUpdateWithWhereUniqueWithoutHostingAccountInput = {
    where: DatabaseWhereUniqueInput
    data: XOR<DatabaseUpdateWithoutHostingAccountInput, DatabaseUncheckedUpdateWithoutHostingAccountInput>
  }

  export type DatabaseUpdateManyWithWhereWithoutHostingAccountInput = {
    where: DatabaseScalarWhereInput
    data: XOR<DatabaseUpdateManyMutationInput, DatabaseUncheckedUpdateManyWithoutHostingAccountInput>
  }

  export type DatabaseScalarWhereInput = {
    AND?: DatabaseScalarWhereInput | DatabaseScalarWhereInput[]
    OR?: DatabaseScalarWhereInput[]
    NOT?: DatabaseScalarWhereInput | DatabaseScalarWhereInput[]
    id?: StringFilter<"Database"> | string
    hostingAccountId?: StringFilter<"Database"> | string
    name?: StringFilter<"Database"> | string
    username?: StringFilter<"Database"> | string
    password?: StringFilter<"Database"> | string
    type?: EnumDatabaseTypeFilter<"Database"> | $Enums.DatabaseType
    size?: IntFilter<"Database"> | number
    createdAt?: DateTimeFilter<"Database"> | Date | string
    updatedAt?: DateTimeFilter<"Database"> | Date | string
  }

  export type EmailAccountUpsertWithWhereUniqueWithoutHostingAccountInput = {
    where: EmailAccountWhereUniqueInput
    update: XOR<EmailAccountUpdateWithoutHostingAccountInput, EmailAccountUncheckedUpdateWithoutHostingAccountInput>
    create: XOR<EmailAccountCreateWithoutHostingAccountInput, EmailAccountUncheckedCreateWithoutHostingAccountInput>
  }

  export type EmailAccountUpdateWithWhereUniqueWithoutHostingAccountInput = {
    where: EmailAccountWhereUniqueInput
    data: XOR<EmailAccountUpdateWithoutHostingAccountInput, EmailAccountUncheckedUpdateWithoutHostingAccountInput>
  }

  export type EmailAccountUpdateManyWithWhereWithoutHostingAccountInput = {
    where: EmailAccountScalarWhereInput
    data: XOR<EmailAccountUpdateManyMutationInput, EmailAccountUncheckedUpdateManyWithoutHostingAccountInput>
  }

  export type EmailAccountScalarWhereInput = {
    AND?: EmailAccountScalarWhereInput | EmailAccountScalarWhereInput[]
    OR?: EmailAccountScalarWhereInput[]
    NOT?: EmailAccountScalarWhereInput | EmailAccountScalarWhereInput[]
    id?: StringFilter<"EmailAccount"> | string
    hostingAccountId?: StringFilter<"EmailAccount"> | string
    email?: StringFilter<"EmailAccount"> | string
    password?: StringFilter<"EmailAccount"> | string
    forwardTo?: StringNullableFilter<"EmailAccount"> | string | null
    quotaSize?: IntFilter<"EmailAccount"> | number
    usedQuota?: IntFilter<"EmailAccount"> | number
    createdAt?: DateTimeFilter<"EmailAccount"> | Date | string
    updatedAt?: DateTimeFilter<"EmailAccount"> | Date | string
  }

  export type HostingAccountCreateWithoutServerInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHostingAccountInput
    package: HostingPackageCreateNestedOneWithoutHostingAccountsInput
    domain?: DomainCreateNestedOneWithoutHostingAccountInput
    ftpAccounts?: FTPAccountCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateWithoutServerInput = {
    id?: string
    userId: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ftpAccounts?: FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountCreateOrConnectWithoutServerInput = {
    where: HostingAccountWhereUniqueInput
    create: XOR<HostingAccountCreateWithoutServerInput, HostingAccountUncheckedCreateWithoutServerInput>
  }

  export type HostingAccountCreateManyServerInputEnvelope = {
    data: HostingAccountCreateManyServerInput | HostingAccountCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type MaintenanceLogCreateWithoutServerInput = {
    id?: string
    type: $Enums.MaintenanceType
    description: string
    startTime: Date | string
    endTime?: Date | string | null
    status?: $Enums.MaintenanceStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceLogUncheckedCreateWithoutServerInput = {
    id?: string
    type: $Enums.MaintenanceType
    description: string
    startTime: Date | string
    endTime?: Date | string | null
    status?: $Enums.MaintenanceStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceLogCreateOrConnectWithoutServerInput = {
    where: MaintenanceLogWhereUniqueInput
    create: XOR<MaintenanceLogCreateWithoutServerInput, MaintenanceLogUncheckedCreateWithoutServerInput>
  }

  export type MaintenanceLogCreateManyServerInputEnvelope = {
    data: MaintenanceLogCreateManyServerInput | MaintenanceLogCreateManyServerInput[]
    skipDuplicates?: boolean
  }

  export type HostingAccountUpsertWithWhereUniqueWithoutServerInput = {
    where: HostingAccountWhereUniqueInput
    update: XOR<HostingAccountUpdateWithoutServerInput, HostingAccountUncheckedUpdateWithoutServerInput>
    create: XOR<HostingAccountCreateWithoutServerInput, HostingAccountUncheckedCreateWithoutServerInput>
  }

  export type HostingAccountUpdateWithWhereUniqueWithoutServerInput = {
    where: HostingAccountWhereUniqueInput
    data: XOR<HostingAccountUpdateWithoutServerInput, HostingAccountUncheckedUpdateWithoutServerInput>
  }

  export type HostingAccountUpdateManyWithWhereWithoutServerInput = {
    where: HostingAccountScalarWhereInput
    data: XOR<HostingAccountUpdateManyMutationInput, HostingAccountUncheckedUpdateManyWithoutServerInput>
  }

  export type MaintenanceLogUpsertWithWhereUniqueWithoutServerInput = {
    where: MaintenanceLogWhereUniqueInput
    update: XOR<MaintenanceLogUpdateWithoutServerInput, MaintenanceLogUncheckedUpdateWithoutServerInput>
    create: XOR<MaintenanceLogCreateWithoutServerInput, MaintenanceLogUncheckedCreateWithoutServerInput>
  }

  export type MaintenanceLogUpdateWithWhereUniqueWithoutServerInput = {
    where: MaintenanceLogWhereUniqueInput
    data: XOR<MaintenanceLogUpdateWithoutServerInput, MaintenanceLogUncheckedUpdateWithoutServerInput>
  }

  export type MaintenanceLogUpdateManyWithWhereWithoutServerInput = {
    where: MaintenanceLogScalarWhereInput
    data: XOR<MaintenanceLogUpdateManyMutationInput, MaintenanceLogUncheckedUpdateManyWithoutServerInput>
  }

  export type MaintenanceLogScalarWhereInput = {
    AND?: MaintenanceLogScalarWhereInput | MaintenanceLogScalarWhereInput[]
    OR?: MaintenanceLogScalarWhereInput[]
    NOT?: MaintenanceLogScalarWhereInput | MaintenanceLogScalarWhereInput[]
    id?: StringFilter<"MaintenanceLog"> | string
    serverId?: StringFilter<"MaintenanceLog"> | string
    type?: EnumMaintenanceTypeFilter<"MaintenanceLog"> | $Enums.MaintenanceType
    description?: StringFilter<"MaintenanceLog"> | string
    startTime?: DateTimeFilter<"MaintenanceLog"> | Date | string
    endTime?: DateTimeNullableFilter<"MaintenanceLog"> | Date | string | null
    status?: EnumMaintenanceStatusFilter<"MaintenanceLog"> | $Enums.MaintenanceStatus
    createdAt?: DateTimeFilter<"MaintenanceLog"> | Date | string
    updatedAt?: DateTimeFilter<"MaintenanceLog"> | Date | string
  }

  export type HostingAccountCreateWithoutFtpAccountsInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHostingAccountInput
    package: HostingPackageCreateNestedOneWithoutHostingAccountsInput
    domain?: DomainCreateNestedOneWithoutHostingAccountInput
    server: ServerCreateNestedOneWithoutHostingAccountsInput
    databases?: DatabaseCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateWithoutFtpAccountsInput = {
    id?: string
    userId: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
    databases?: DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountCreateOrConnectWithoutFtpAccountsInput = {
    where: HostingAccountWhereUniqueInput
    create: XOR<HostingAccountCreateWithoutFtpAccountsInput, HostingAccountUncheckedCreateWithoutFtpAccountsInput>
  }

  export type HostingAccountUpsertWithoutFtpAccountsInput = {
    update: XOR<HostingAccountUpdateWithoutFtpAccountsInput, HostingAccountUncheckedUpdateWithoutFtpAccountsInput>
    create: XOR<HostingAccountCreateWithoutFtpAccountsInput, HostingAccountUncheckedCreateWithoutFtpAccountsInput>
    where?: HostingAccountWhereInput
  }

  export type HostingAccountUpdateToOneWithWhereWithoutFtpAccountsInput = {
    where?: HostingAccountWhereInput
    data: XOR<HostingAccountUpdateWithoutFtpAccountsInput, HostingAccountUncheckedUpdateWithoutFtpAccountsInput>
  }

  export type HostingAccountUpdateWithoutFtpAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostingAccountNestedInput
    package?: HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput
    domain?: DomainUpdateOneWithoutHostingAccountNestedInput
    server?: ServerUpdateOneRequiredWithoutHostingAccountsNestedInput
    databases?: DatabaseUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateWithoutFtpAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
    databases?: DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountCreateWithoutDatabasesInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHostingAccountInput
    package: HostingPackageCreateNestedOneWithoutHostingAccountsInput
    domain?: DomainCreateNestedOneWithoutHostingAccountInput
    server: ServerCreateNestedOneWithoutHostingAccountsInput
    ftpAccounts?: FTPAccountCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateWithoutDatabasesInput = {
    id?: string
    userId: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
    ftpAccounts?: FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput
    emailAccounts?: EmailAccountUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountCreateOrConnectWithoutDatabasesInput = {
    where: HostingAccountWhereUniqueInput
    create: XOR<HostingAccountCreateWithoutDatabasesInput, HostingAccountUncheckedCreateWithoutDatabasesInput>
  }

  export type HostingAccountUpsertWithoutDatabasesInput = {
    update: XOR<HostingAccountUpdateWithoutDatabasesInput, HostingAccountUncheckedUpdateWithoutDatabasesInput>
    create: XOR<HostingAccountCreateWithoutDatabasesInput, HostingAccountUncheckedCreateWithoutDatabasesInput>
    where?: HostingAccountWhereInput
  }

  export type HostingAccountUpdateToOneWithWhereWithoutDatabasesInput = {
    where?: HostingAccountWhereInput
    data: XOR<HostingAccountUpdateWithoutDatabasesInput, HostingAccountUncheckedUpdateWithoutDatabasesInput>
  }

  export type HostingAccountUpdateWithoutDatabasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostingAccountNestedInput
    package?: HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput
    domain?: DomainUpdateOneWithoutHostingAccountNestedInput
    server?: ServerUpdateOneRequiredWithoutHostingAccountsNestedInput
    ftpAccounts?: FTPAccountUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateWithoutDatabasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
    ftpAccounts?: FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountCreateWithoutEmailAccountsInput = {
    id?: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutHostingAccountInput
    package: HostingPackageCreateNestedOneWithoutHostingAccountsInput
    domain?: DomainCreateNestedOneWithoutHostingAccountInput
    server: ServerCreateNestedOneWithoutHostingAccountsInput
    ftpAccounts?: FTPAccountCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountUncheckedCreateWithoutEmailAccountsInput = {
    id?: string
    userId: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
    ftpAccounts?: FTPAccountUncheckedCreateNestedManyWithoutHostingAccountInput
    databases?: DatabaseUncheckedCreateNestedManyWithoutHostingAccountInput
  }

  export type HostingAccountCreateOrConnectWithoutEmailAccountsInput = {
    where: HostingAccountWhereUniqueInput
    create: XOR<HostingAccountCreateWithoutEmailAccountsInput, HostingAccountUncheckedCreateWithoutEmailAccountsInput>
  }

  export type HostingAccountUpsertWithoutEmailAccountsInput = {
    update: XOR<HostingAccountUpdateWithoutEmailAccountsInput, HostingAccountUncheckedUpdateWithoutEmailAccountsInput>
    create: XOR<HostingAccountCreateWithoutEmailAccountsInput, HostingAccountUncheckedCreateWithoutEmailAccountsInput>
    where?: HostingAccountWhereInput
  }

  export type HostingAccountUpdateToOneWithWhereWithoutEmailAccountsInput = {
    where?: HostingAccountWhereInput
    data: XOR<HostingAccountUpdateWithoutEmailAccountsInput, HostingAccountUncheckedUpdateWithoutEmailAccountsInput>
  }

  export type HostingAccountUpdateWithoutEmailAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostingAccountNestedInput
    package?: HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput
    domain?: DomainUpdateOneWithoutHostingAccountNestedInput
    server?: ServerUpdateOneRequiredWithoutHostingAccountsNestedInput
    ftpAccounts?: FTPAccountUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateWithoutEmailAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
    ftpAccounts?: FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type ServerCreateWithoutMaintenanceLogsInput = {
    id?: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status?: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace?: number
    totalBandwidth: number
    usedBandwidth?: number
    cpuCores: number
    ram: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccounts?: HostingAccountCreateNestedManyWithoutServerInput
  }

  export type ServerUncheckedCreateWithoutMaintenanceLogsInput = {
    id?: string
    name: string
    ipAddress: string
    type: $Enums.ServerType
    location: string
    status?: $Enums.ServerStatus
    operatingSystem: string
    totalDiskSpace: number
    usedDiskSpace?: number
    totalBandwidth: number
    usedBandwidth?: number
    cpuCores: number
    ram: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hostingAccounts?: HostingAccountUncheckedCreateNestedManyWithoutServerInput
  }

  export type ServerCreateOrConnectWithoutMaintenanceLogsInput = {
    where: ServerWhereUniqueInput
    create: XOR<ServerCreateWithoutMaintenanceLogsInput, ServerUncheckedCreateWithoutMaintenanceLogsInput>
  }

  export type ServerUpsertWithoutMaintenanceLogsInput = {
    update: XOR<ServerUpdateWithoutMaintenanceLogsInput, ServerUncheckedUpdateWithoutMaintenanceLogsInput>
    create: XOR<ServerCreateWithoutMaintenanceLogsInput, ServerUncheckedCreateWithoutMaintenanceLogsInput>
    where?: ServerWhereInput
  }

  export type ServerUpdateToOneWithWhereWithoutMaintenanceLogsInput = {
    where?: ServerWhereInput
    data: XOR<ServerUpdateWithoutMaintenanceLogsInput, ServerUncheckedUpdateWithoutMaintenanceLogsInput>
  }

  export type ServerUpdateWithoutMaintenanceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccounts?: HostingAccountUpdateManyWithoutServerNestedInput
  }

  export type ServerUncheckedUpdateWithoutMaintenanceLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    ipAddress?: StringFieldUpdateOperationsInput | string
    type?: EnumServerTypeFieldUpdateOperationsInput | $Enums.ServerType
    location?: StringFieldUpdateOperationsInput | string
    status?: EnumServerStatusFieldUpdateOperationsInput | $Enums.ServerStatus
    operatingSystem?: StringFieldUpdateOperationsInput | string
    totalDiskSpace?: IntFieldUpdateOperationsInput | number
    usedDiskSpace?: IntFieldUpdateOperationsInput | number
    totalBandwidth?: IntFieldUpdateOperationsInput | number
    usedBandwidth?: IntFieldUpdateOperationsInput | number
    cpuCores?: IntFieldUpdateOperationsInput | number
    ram?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hostingAccounts?: HostingAccountUncheckedUpdateManyWithoutServerNestedInput
  }

  export type EmailVerificationCreateManyUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type PasswordResetCreateManyUserInput = {
    id?: string
    token: string
    expires: Date | string
    createdAt?: Date | string
  }

  export type DomainCreateManyUserInput = {
    id?: string
    name: string
    registrar?: string | null
    registrationDate: Date | string
    expiryDate: Date | string
    autoRenew?: boolean
    status?: $Enums.DomainStatus
    privacyProtection?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HostingAccountCreateManyUserInput = {
    id?: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
  }

  export type EmailVerificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailVerificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PasswordResetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DomainUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nameservers?: NameserverUpdateManyWithoutDomainNestedInput
    dnsRecords?: DnsRecordUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUpdateManyWithoutDomainNestedInput
  }

  export type DomainUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    nameservers?: NameserverUncheckedUpdateManyWithoutDomainNestedInput
    dnsRecords?: DnsRecordUncheckedUpdateManyWithoutDomainNestedInput
    HostingAccount?: HostingAccountUncheckedUpdateManyWithoutDomainNestedInput
  }

  export type DomainUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    registrar?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: DateTimeFieldUpdateOperationsInput | Date | string
    autoRenew?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumDomainStatusFieldUpdateOperationsInput | $Enums.DomainStatus
    privacyProtection?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingAccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput
    domain?: DomainUpdateOneWithoutHostingAccountNestedInput
    server?: ServerUpdateOneRequiredWithoutHostingAccountsNestedInput
    ftpAccounts?: FTPAccountUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
    ftpAccounts?: FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type NameserverCreateManyDomainInput = {
    id?: string
    hostname: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DnsRecordCreateManyDomainInput = {
    id?: string
    type: string
    name: string
    content: string
    ttl?: number
    priority?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HostingAccountCreateManyDomainInput = {
    id?: string
    userId: string
    packageId: string
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
  }

  export type NameserverUpdateWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostname?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameserverUncheckedUpdateWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostname?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NameserverUncheckedUpdateManyWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    hostname?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DnsRecordUpdateWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ttl?: IntFieldUpdateOperationsInput | number
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DnsRecordUncheckedUpdateWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ttl?: IntFieldUpdateOperationsInput | number
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DnsRecordUncheckedUpdateManyWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    ttl?: IntFieldUpdateOperationsInput | number
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingAccountUpdateWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostingAccountNestedInput
    package?: HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput
    server?: ServerUpdateOneRequiredWithoutHostingAccountsNestedInput
    ftpAccounts?: FTPAccountUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
    ftpAccounts?: FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateManyWithoutDomainInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type HostingAccountCreateManyPackageInput = {
    id?: string
    userId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    serverId: string
  }

  export type HostingAccountUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostingAccountNestedInput
    domain?: DomainUpdateOneWithoutHostingAccountNestedInput
    server?: ServerUpdateOneRequiredWithoutHostingAccountsNestedInput
    ftpAccounts?: FTPAccountUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
    ftpAccounts?: FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateManyWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serverId?: StringFieldUpdateOperationsInput | string
  }

  export type FTPAccountCreateManyHostingAccountInput = {
    id?: string
    username: string
    password: string
    directory?: string
    permissions?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatabaseCreateManyHostingAccountInput = {
    id?: string
    name: string
    username: string
    password: string
    type?: $Enums.DatabaseType
    size?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailAccountCreateManyHostingAccountInput = {
    id?: string
    email: string
    password: string
    forwardTo?: string | null
    quotaSize?: number
    usedQuota?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FTPAccountUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    directory?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FTPAccountUncheckedUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    directory?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FTPAccountUncheckedUpdateManyWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    directory?: StringFieldUpdateOperationsInput | string
    permissions?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumDatabaseTypeFieldUpdateOperationsInput | $Enums.DatabaseType
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseUncheckedUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumDatabaseTypeFieldUpdateOperationsInput | $Enums.DatabaseType
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatabaseUncheckedUpdateManyWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumDatabaseTypeFieldUpdateOperationsInput | $Enums.DatabaseType
    size?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailAccountUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    forwardTo?: NullableStringFieldUpdateOperationsInput | string | null
    quotaSize?: IntFieldUpdateOperationsInput | number
    usedQuota?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailAccountUncheckedUpdateWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    forwardTo?: NullableStringFieldUpdateOperationsInput | string | null
    quotaSize?: IntFieldUpdateOperationsInput | number
    usedQuota?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailAccountUncheckedUpdateManyWithoutHostingAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    forwardTo?: NullableStringFieldUpdateOperationsInput | string | null
    quotaSize?: IntFieldUpdateOperationsInput | number
    usedQuota?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HostingAccountCreateManyServerInput = {
    id?: string
    userId: string
    packageId: string
    domainId?: string | null
    username: string
    password: string
    serverIp: string
    status?: $Enums.HostingStatus
    suspensionReason?: string | null
    diskUsage?: number
    bandwidthUsage?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MaintenanceLogCreateManyServerInput = {
    id?: string
    type: $Enums.MaintenanceType
    description: string
    startTime: Date | string
    endTime?: Date | string | null
    status?: $Enums.MaintenanceStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HostingAccountUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHostingAccountNestedInput
    package?: HostingPackageUpdateOneRequiredWithoutHostingAccountsNestedInput
    domain?: DomainUpdateOneWithoutHostingAccountNestedInput
    ftpAccounts?: FTPAccountUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ftpAccounts?: FTPAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
    databases?: DatabaseUncheckedUpdateManyWithoutHostingAccountNestedInput
    emailAccounts?: EmailAccountUncheckedUpdateManyWithoutHostingAccountNestedInput
  }

  export type HostingAccountUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    domainId?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    serverIp?: StringFieldUpdateOperationsInput | string
    status?: EnumHostingStatusFieldUpdateOperationsInput | $Enums.HostingStatus
    suspensionReason?: NullableStringFieldUpdateOperationsInput | string | null
    diskUsage?: IntFieldUpdateOperationsInput | number
    bandwidthUsage?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceLogUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMaintenanceTypeFieldUpdateOperationsInput | $Enums.MaintenanceType
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceLogUncheckedUpdateWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMaintenanceTypeFieldUpdateOperationsInput | $Enums.MaintenanceType
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MaintenanceLogUncheckedUpdateManyWithoutServerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumMaintenanceTypeFieldUpdateOperationsInput | $Enums.MaintenanceType
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumMaintenanceStatusFieldUpdateOperationsInput | $Enums.MaintenanceStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}